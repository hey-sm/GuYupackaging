/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Â∑•‰∏öËµÑÊ∫êbossÁÆ°ÁêÜÁ´Ø„ÄêAPIÊé•Âè£ÊñáÊ°£„Äë
 * Â∑•‰∏öËµÑÊ∫êbossÁÆ°ÁêÜÁ´Ø
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  _ExportParams,
  ResultActivityResp,
  ActivityBossReq,
  ResultIwubidaPageResultËê•ÈîÄÊ¥ªÂä®ÂÆû‰Ωì,
  ActivityListBossReq,
  ResultListActivitySpuInfoResp,
  ActivitySpuReq,
  Result,
  ActivitySaveOrUpdateBossReq,
  ActivityReviewBossReq,
  ResultBoolean,
  SysBillCodeAddOrEditRequest,
  SysBillCodeBatchUpdateStatusRequest,
  ResultString,
  CreateCodeParams,
  ResultIwubidaPageResultSysBillCodeInfoResponse,
  SysBillCodeQueryRequest,
  ResultSysBillCodeInfoResponse,
  QueryDetailInfoByIdBillCodeParams,
  ResultIwubidaPageResultBillReconciliation,
  BillReconciliationPageQueryRequest,
  ResultInt,
  ResultBuyOrderAfterSalesDetailVO,
  AfterSalesDetailParams,
  ResultIwubidaPageResultBuyOrderAfterSalesApplyVO,
  AfterSalesListQueryRequest,
  AfterSalesExportParams,
  ExportExcelParams,
  ResultBuyOrderLogistSendOrderVO,
  SendDetailParams,
  ResultIwubidaPageResultBuyOrderLogistSendOrderVO,
  LogisticsSendListRequest,
  RefundApplyExportParams,
  ResultBuyOrderRefundApplyDetailVO,
  RefundApplyDetailParams,
  ResultIwubidaPageResultBuyOrderRefundApplyVO,
  RefundListQueryRequest,
  ResultBossEnterprisePayVO,
  EnterprisePayInfoParams,
  ExportExcel1Params,
  OrderContractDetailParams,
  ResultBuyOrderBossDetailInfoVO,
  OrderDetailParams,
  ResultIwubidaPageResultBuyOrderVO,
  OrderListQueryRequest,
  BindCommodityRequest,
  JsonListResultCategoryCommodityVO,
  HomeCategoryCommodityListRequest,
  JsonListResultCommodity,
  JsonResult,
  CategoryCommoditySortDownParams,
  SortTopParams,
  CategoryCommoditySortUpParams,
  UnBindCommodityParams,
  ResultVoid,
  DmsApiToken,
  ResultPageInfoCategoryQualificationResultInfo,
  CategoryQualificationPageRequest,
  SysGenBasicInfoAddOrEditRequest,
  SysCodeGenMainAddOrEditRequest,
  SysCodeGenSonAddOrEditRequest,
  SysGenBasicInfoBatchDeleteRequest,
  SysGenBasicInfoBatchSonDeleteRequest,
  ResultSysCodeGenChildrenResponse,
  SysCodeSonInfoRequest,
  ResultSysCodeGenMainResponse,
  SysCodeMainInfoRequest,
  ResultIwubidaPageResultSysCodeGenPageResponse,
  SysGenBasicInfoPageRequest,
  ResultLong,
  CommodityAttributeParam,
  ResultListCommoditySkuStock,
  AttributeGetCommoditySkuParams,
  AttributeRelationCategoryVO,
  ResultCommodityAttrComplicatedInfo,
  BasicIdRequest,
  ResultIwubidaPageResultCommodityAttributeVO,
  AttriListQueryRequest,
  ResultListCommodityAttrInfoVO,
  GetListParams,
  CommodityAttributeSimpleParam,
  RelationAttrParamVO,
  CateUpDownMoveReq,
  CommodityCategoryParamVO,
  FindThreeListByTwoCategoryParams,
  FindTwoListByOneCategoryParams,
  ResultCommodityCateCheckedTree,
  CommodityCateTreeListRequest,
  ResultListCommodityCategoryInfo,
  CateListQueryParamVO,
  ResultIwubidaPageResultCommodityCategoryVO,
  CateListQueryRequest,
  ResultCommodityCategoryVO,
  GetCommodityCategoryByIdParams,
  ResultListÂïÜÂìÅÂõõÁ∫ßÂàÜÁ±ª,
  GetPartCommodityCateTreeListParams,
  ResultListCommodityAttributeVO,
  LogicDeleteParams,
  SaveCategoryBeforeJudgParams,
  ResultCommodityCategoryFront,
  CommodityCateFrontOperationRequest,
  ResultCMSÂÜÖÂÆπÊãìÂ±ïÂÆû‰Ωì,
  CmsContentInfoReq,
  CommodityCateFrontMoveRequest,
  ResultListCommodityCategoryFront,
  CategoryFrontQueryTreeRequest,
  ResultIwubidaPageResultCommodityCargoDto,
  SkuListQueryRequest,
  AssembleVO,
  CommodityCreateInfoVO,
  ResultCommodityStandardStockDto,
  GetStandardStockByIdParams,
  ResultIwubidaPageResultCommodityStandardStockVO,
  StandardStockQueryRequest,
  LogicDelete1Params,
  VertifyParamVO,
  ResultListCommodityStandardVertifyLogVO,
  LoadVertifyLogParams,
  VertifyRejectReasonParams,
  ResultIwubidaPageResultCommodityVertifyLogDto,
  CommodityVertifyLogQueryRequest,
  ResultListCommodityVertifyLogVO,
  LoadProductVertifyLogParams,
  LookAuditLogParams,
  ResultCommodityValueInfoVO,
  ProductVertifyLookParams,
  CommodityVertifyParamVO,
  CmsContentInfoDeleteReq,
  ResultCMSTreeÈÖçÁΩÆÂÆû‰Ωì,
  ResultIwubidaPageResultCMSÂÜÖÂÆπÂÆû‰Ωì,
  ResultIwubidaPageResultCMSÂÜÖÂÆπÊãìÂ±ïÂÆû‰Ωì,
  ResultCMSÂÜÖÂÆπÂÆû‰Ωì,
  CmsMoveUpAndDownReq,
  EnterpriseAccountAuditRequest,
  ResultIwubidaPageResultEnterpriseAccountAuditListVo,
  EnterpriseAccountAuditPageRequest,
  EnterpriseAccountDisableRequest,
  ResultIwubidaPageResultEnterpriseAccountPageVo,
  EnterpriseAccountListRequest,
  ResultEnterpriseShowInfoDto,
  ResultIwubidaPageResultEnterpriseContractPageVo,
  EnterpriseContractPageRequest,
  EnterpriseBuyerRegisterRequest,
  EnterpriseDisableRequest,
  ResultIwubidaPageResultEnterprise,
  EnterpriseListRequest,
  EnterpriseSearchRequest,
  ResultEnterpriseDto,
  ResultIwubidaPageResultEnterpriseSignChannelManagementPageVo,
  EnterpriseSignChannelManagementListRequest,
  SignEnterpriseListRequest,
  EnterpriseAuditRequest,
  ResultIwubidaPageResultEnterpriseTemp,
  EnterpriseTempAuditPageRequest,
  Export1Params,
  ResultIwubidaPageResultFeedbackProblem,
  BossCommonQuery,
  TemplateDownParams,
  ResultObject,
  TemplateUploadParams,
  JsonListResultCategoryLayoutExtVO,
  HomeCategoryConfigListRequest,
  ResultListHomeCategoryTreeVO,
  SaveBindCategoryRequest,
  BossCategoryLayoutRequest,
  HomeCategorySortDownParams,
  HomeCategorySortTopParams,
  HomeCategorySortUpParams,
  StartHomeCategoryParams,
  StopHomeCategoryParams,
  ResultBindCategoryPageVO,
  ToBindCategoryPageParams,
  ResultInquiryManagerInfoDto,
  FileSystemResource,
  InquiryPageExportParams,
  ResultIwubidaPageResultInquiryInfoDto,
  InquiryPageRequest,
  ResultIwubidaPageResultInvoiceRecord,
  InvoiceRecordPageQueryRequest,
  LongAgreementAuditRequest,
  ResultLongAgreementVo,
  ResultIwubidaPageResultLongAgreementDto,
  LongAgreementPageRequest,
  ResultIwubidaPageResultMember,
  MemberAdminListPageRequest,
  MemberEmployeeAddRequest,
  MemberEmployeeAssociateRequest,
  ResultIwubidaPageResultMemberEmployeePageVo,
  MemberEmployeePageRequest,
  ResultIwubidaPageResultMemberListVo,
  MemberListRequest,
  ResultListMemberRoleTypeVo,
  MemberRoleTypeRequest,
  ResultIwubidaPageResultPaymentOrder,
  PaymentOrderPageQueryRequest,
  ResultIwubidaPageResultPriceQuotation,
  BossCommonQuery0,
  PriceQuotationUpdateReq,
  ResultPageInfoStoreQualificationAuditPageResultDto,
  BasicPageQuery,
  ResultStoreQualificationAuditViewResultDto,
  QualificationCategoryAddRequest,
  QualificationCategoryEditRequest,
  ResultPageInfoQualificationCategoryDto,
  QualificationCategoryListRequest,
  QualificationCategoryRemoveRequest,
  QualificationAddRequest,
  QualificationEditRequest,
  ResultPageInfoQualificationDto,
  QualificationListRequest,
  QualificationRemoveRequest,
  ResultExtendQualificationDto,
  ResultListUcRbacRoleDto,
  ResultCaptchaResponse,
  CaptchaValidRequest,
  ResultLoginInfoResponse,
  SessionCreateRequest,
  ForgetPwdEditRequest,
  ResetLoginPwdRequest,
  SmsSendCodeRequest,
  ResultIwubidaPageResultSettleOrder,
  SettleOrderPageQueryRequest,
  CommodityBossStatusVO,
  CommodityBossCreateVOReq,
  ResultCommodityBossCreateVO,
  ProductVertifyLook1Params,
  AfterSalesExport1Params,
  CopyCommodityVO,
  ResultIwubidaPageResultCommodity,
  ShopCommodityQueryRequest,
  ResultStoreInfo,
  AuditViewParams,
  ResultJsonListResultStoreInfo,
  StoreAbleRequest,
  StoreEditRequest,
  ResultIwubidaPageResultStoreResultInfo,
  StoreListRequest,
  ViewParams,
  ResultPageInfoCommodityInfo,
  StoreApplyCommodityListRequest,
  ResultPageInfoStoreInfo,
  StorePopularListRequest,
  ResultListStoreInfo,
  StorePopularRequest,
  SysAccountPasswordEditRequest,
  ResultIwubidaPageResultSysAccountResponse,
  SysAccountQueryRequest,
  ResultSysRoleColumnMenuResponse,
  QueryColumnByMenuParams,
  ResultListSysAccountRoleRelationResponse,
  QueryRolesSysAccountParams,
  ResetPasswordParams,
  BaseIdsRequest,
  QueryByUserIdParams,
  SysAccountRoleRelationEditRequest,
  ResultSysAppVersionResponse,
  DetailSysAppVersionParams,
  ResultIwubidaPageResultSysAppVersionResponse,
  SysAppVersionQueryRequest,
  SysAppVersionEditRequest,
  SysAreaAddOrEditRequest,
  SysAreaBatchUpdateStatusRequest,
  ResultListSysAmapAreaCodeResponse,
  CitysParams,
  DistrictsParams,
  ApiToken,
  GetAllCityParams,
  ResultIwubidaPageResultSysAreaResponse,
  SysAreaQuerySonRequest,
  ProvincesParams,
  ResultListSysAreaRegionResponse,
  GetAreaRegionTreeParams,
  FindStreetByDistrictCodeParams,
  ResultListSysAmapAreaCodeTreeResponse,
  GetAreaTreeParams,
  GetAreaTreeByParentCodeParams,
  ResultSysBusinessLogResponse,
  DetailSysBusinessLogParams,
  ExportInfoSysBusinessLogParams,
  ResultIwubidaPageResultSysBusinessLogResponse,
  SysBusinessLogQueryRequest,
  SysDbConnectionEditRequest,
  SysDbConnectionDeleteRequest,
  ResultListSysTableColumnInfoResponse,
  SysTableColumnInfoQueryRequest,
  ResultListSysTableInfoResponse,
  SysTableInfoQueryRequest,
  ResultIwubidaPageResultSysDbConnectionResponse,
  SysDbConnectionQueryRequest,
  SysDbConnectionTestRequest,
  SysDictBatchUpdateStatusRequest,
  ResultListSysDictResponse,
  ResultIwubidaPageResultSysDictSonResponse,
  SysDictQuerySonRequest,
  ResultListSysDictTreeResponse,
  ListSysDictTreeParams,
  SysDictClassfiyQuerySonRequest,
  SysDictQueryRequest,
  SysDictAddOrEditRequest,
  UpdateDictAsyncToNacosParams,
  ResultSysDynamicDemoFormValueResponse,
  SysDynamicDemoFormValueDetailRequest,
  SysDynamicDemoFormValueEditRequest,
  SysDynamicBatchUpdateStatusRequest,
  ResultSysDynamicExcelResponse,
  DetailDynamicParams,
  DetailByCodeParams,
  ResultIwubidaPageResultSysDynamicExcelPageResponse,
  SysDynamicExcelQueryRequest,
  SysDynamicExcelEditRequest,
  SysBaseIdsRequest,
  ResultSysDynamicFormInstanceDetailResponse,
  DetailDynamicFormParams,
  DetailByCodeDynamicFormParams,
  SysDynamicFormInstanceEditRequest,
  ResultMap,
  ResultIwubidaPageResultSysDynamicFormInstancePageResponse,
  SysDynamicFormInstanceQueryRequest,
  ResultSysDynamicFormInstanceV2DetailResponse,
  DetailByCodeV2DynamicFormParams,
  SysDynamicFormModelDeployEditRequest,
  ResultSysDynamicFormModelDetailResponse,
  DetailDynamicFromModelParams,
  ResultListIdNameResponse,
  ResultIwubidaPageResultSysDynamicFormModelPageResponse,
  SysDynamicFormModelQueryRequest,
  SysDynamicFormModelEditRequest,
  DetailDynamicFromModelV2Params,
  BasicBaseIdsRequest,
  ExportSysEmployeeParams,
  SysEmployeeResponse,
  SysEmployeeListQueryRequest,
  IwubidaPageResultSysEmployeeResponse,
  SysEmployeeQueryNoSqlRequest,
  ResetParams,
  SysEmployeeEditRequest,
  SysExcelTemplateExportAddOrEditRequest,
  SysExcelTemplateImportAddOrEditRequest,
  SysExcelTemplatePrintAddOrEditRequest,
  SysExcelTemplateUpdateStatusRequest,
  DownExcelTemplateParams,
  ResultIwubidaPageResultSysExcelTemplateResponse,
  SysExcelTemplatePageQueryRequest,
  ResultSysExcelTemplateResponse,
  QueryDetailInfoByIdExcelTempParams,
  SysFunAttributeAddOrEditRequest,
  SysFunAttributeDetailAddOrEditRequest,
  ResultSysFunAttributeDetailResponse,
  SysFunAttributeListRequest,
  ResultSysFunAttributeResponse,
  SysFunAttributeMainQueryAddRequest,
  ResultSysFunAttributeMainQueryResponse,
  SysFunAttributeQueryUserAddOrEditRequest,
  SysFunAttributeQueryUserDeleteRequest,
  ResultListSysFunAttributeQueryUserConfigsResponse,
  SysFunAttributeQueryUserQueryRequest,
  ResultListSysFunAttributeQueryUserQueryResponse,
  SysFunAttributeQueryUserPlanQueryRequest,
  ResultIwubidaPageResultSysLogResponse,
  SysLogPageQueryRequest,
  ResultSysLogResponse,
  QueryDetailInfoByIdSysLogParams,
  SysMenuAddOrEditRequest,
  SysMenuDeleteRequest,
  ResultListSysMenuResponse,
  ListButtonParams,
  ResultIwubidaPageResultSysMenuResponse,
  SysMenuQueryPageRequest,
  SysMenuQuerySonRequest,
  ResultListSysMenuTreeResponse,
  ListSysMenuTreeParams,
  ListSysMenuTreeButtonParams,
  ResultSysMenuResponse,
  QueryDetailInfoByIdMenuParams,
  ResultListSysDictComponentResponse,
  ResultSysOrganizationResponse,
  DetailSysOrganizationParams,
  ExportSysOrganizationParams,
  ResultListSysOrganizationResponse,
  SysOrganizationQueryRequest,
  ResultIwubidaPageResultSysOrganizationResponse,
  SysSapToDmpRequest,
  ResultListSysSapOrganizationPullResponse,
  TopNodeListParams,
  SysOrganizationEditRequest,
  ResultSysEmployeeResponse,
  SmsUpdatePasswordEditRequest,
  ResultListSysOrganizationTreeResponse,
  OrganizationTreeParams,
  ResultListSysRoleResponse,
  RoleTreeParams,
  ResultSysPostResponse,
  DetailParams,
  ExportSysPostParams,
  ResultListSysPostResponse,
  ResultIwubidaPageResultSysPostResponse,
  SysPostQueryRequest,
  SysPostEditRequest,
  ResultSysRoleClassfiyDeleteResponse,
  ResultListSysRoleClassfiyResponse,
  SysRoleClassfiyQueryRequest,
  ResultIwubidaPageResultSysRoleClassfiyResponse,
  SysRoleClassfiyEditRequest,
  ResultSysRoleDeleteResponse,
  ResultSysRoleDetailResponse,
  DetailSysRoleParams,
  ResultIwubidaPageResultSysRoleResponse,
  SysRoleQueryRequest,
  SysRoleEditRequest,
  ResultListSysRoleColumnDetailResponse,
  ColumnTreeAdminParams,
  ResultListSysRoleDataScopeResponse,
  DataTreeAdminParams,
  ResultListSysRoleMenuDetailResponse,
  FunctionTreeAdminParams,
  MerchantfunctionTreeAdminParams,
  SysRolePermissTreeEditRequest,
  TemplateDataSaveRequest,
  Export2Params,
  ResultListTemplateSonTableResponse,
  ImportDataParams,
  ImportTemplateUploadParams,
  PrintParams,
  ResultIwubidaPageResultTemplateMasterTableResponse,
  TemplateMasterTableQueryRequest,
  ResultTemplatePrintResponse,
  PrintTempSonParams,
  ResultTemplateSonTableResponse,
  QueryDetailTempSonParams,
  CmsTreeDeleteReq,
  ResultListCMSTreeÈÖçÁΩÆÂÆû‰Ωì,
  CmsCommonNoticeClassifyReq,
  CmsCommonProblemClassifyReq,
  ResultListCMSTreeÈÖçÁΩÆÊãìÂ±ïÂÆû‰Ωì,
  ResultUnpaidBills,
  UnpaidBillInfoRequest,
  ResultIwubidaPageResultUnpaidBills,
  UnpaidBillPageQueryRequest
} from '../model'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';


/**
 * @summary ÂØºÂá∫
 */
export const _export = (
    params?: _ExportParams,
 ) => {
      return customInstance<void>(
      {url: `/boss/manage/platform/feedbackProblem/feedbackProblemExport`, method: 'post',
        params
    },
      );
    }
  


    export type _ExportMutationResult = NonNullable<Awaited<ReturnType<typeof _export>>>
    
    export type _ExportMutationError = ErrorType<unknown>

    export const useExport = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _export>>, TError,{params?: _ExportParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof _export>>, {params?: _ExportParams}> = (props) => {
          const {params} = props ?? {};

          return  _export(params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof _export>>, TError, {params?: _ExportParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê¥ªÂä®ËØ¶ÊÉÖ
 */
export const show = (
    activityBossReq: ActivityBossReq,
 ) => {
      return customInstance<ResultActivityResp>(
      {url: `/boss/platform/activity/getDetail`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityBossReq
    },
      );
    }
  

export const getShowQueryKey = (activityBossReq: ActivityBossReq,) => [`/boss/platform/activity/getDetail`, activityBossReq];

    
export type ShowQueryResult = NonNullable<Awaited<ReturnType<typeof show>>>
export type ShowQueryError = ErrorType<void>

export const useShow = <TData = Awaited<ReturnType<typeof show>>, TError = ErrorType<void>>(
 activityBossReq: ActivityBossReq, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof show>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getShowQueryKey(activityBossReq);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof show>>> = () => show(activityBossReq, );


  

  const query = useQuery<Awaited<ReturnType<typeof show>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const list = (
    activityListBossReq: ActivityListBossReq,
 ) => {
      return customInstance<ResultIwubidaPageResultËê•ÈîÄÊ¥ªÂä®ÂÆû‰Ωì>(
      {url: `/boss/platform/activity/listJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityListBossReq
    },
      );
    }
  


    export type ListMutationResult = NonNullable<Awaited<ReturnType<typeof list>>>
    export type ListMutationBody = ActivityListBossReq
    export type ListMutationError = ErrorType<void>

    export const useList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof list>>, TError,{data: ActivityListBossReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof list>>, {data: ActivityListBossReq}> = (props) => {
          const {data} = props ?? {};

          return  list(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof list>>, TError, {data: ActivityListBossReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê†πÊçÆskuÊàñËÄÖÂïÜÂìÅÂêçÁß∞Êü•ËØ¢ÂïÜÂìÅ
 */
export const querySpuBySkuOrName = (
    activitySpuReq: ActivitySpuReq,
 ) => {
      return customInstance<ResultListActivitySpuInfoResp>(
      {url: `/boss/platform/activity/querySpuBySkuOrName`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activitySpuReq
    },
      );
    }
  


    export type QuerySpuBySkuOrNameMutationResult = NonNullable<Awaited<ReturnType<typeof querySpuBySkuOrName>>>
    export type QuerySpuBySkuOrNameMutationBody = ActivitySpuReq
    export type QuerySpuBySkuOrNameMutationError = ErrorType<void>

    export const useQuerySpuBySkuOrName = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof querySpuBySkuOrName>>, TError,{data: ActivitySpuReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof querySpuBySkuOrName>>, {data: ActivitySpuReq}> = (props) => {
          const {data} = props ?? {};

          return  querySpuBySkuOrName(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof querySpuBySkuOrName>>, TError, {data: ActivitySpuReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê¥ªÂä®Âà†Èô§
 */
export const remove = (
    activitySaveOrUpdateBossReq: ActivitySaveOrUpdateBossReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/activity/remove`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activitySaveOrUpdateBossReq
    },
      );
    }
  


    export type RemoveMutationResult = NonNullable<Awaited<ReturnType<typeof remove>>>
    export type RemoveMutationBody = ActivitySaveOrUpdateBossReq
    export type RemoveMutationError = ErrorType<void>

    export const useRemove = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{data: ActivitySaveOrUpdateBossReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remove>>, {data: ActivitySaveOrUpdateBossReq}> = (props) => {
          const {data} = props ?? {};

          return  remove(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof remove>>, TError, {data: ActivitySaveOrUpdateBossReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê¥ªÂä®ÂÆ°Ê†∏
 */
export const updateStatus = (
    activityReviewBossReq: ActivityReviewBossReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/activity/reviewActivity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityReviewBossReq
    },
      );
    }
  


    export type UpdateStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatus>>>
    export type UpdateStatusMutationBody = ActivityReviewBossReq
    export type UpdateStatusMutationError = ErrorType<void>

    export const useUpdateStatus = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatus>>, TError,{data: ActivityReviewBossReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatus>>, {data: ActivityReviewBossReq}> = (props) => {
          const {data} = props ?? {};

          return  updateStatus(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatus>>, TError, {data: ActivityReviewBossReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê¥ªÂä®Êñ∞Â¢û‰øùÂ≠ò
 */
export const save = (
    activitySaveOrUpdateBossReq: ActivitySaveOrUpdateBossReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/activity/saveJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activitySaveOrUpdateBossReq
    },
      );
    }
  


    export type SaveMutationResult = NonNullable<Awaited<ReturnType<typeof save>>>
    export type SaveMutationBody = ActivitySaveOrUpdateBossReq
    export type SaveMutationError = ErrorType<void>

    export const useSave = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof save>>, TError,{data: ActivitySaveOrUpdateBossReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof save>>, {data: ActivitySaveOrUpdateBossReq}> = (props) => {
          const {data} = props ?? {};

          return  save(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof save>>, TError, {data: ActivitySaveOrUpdateBossReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê¥ªÂä®‰øÆÊîπ
 */
export const update = (
    activitySaveOrUpdateBossReq: ActivitySaveOrUpdateBossReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/activity/updateJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activitySaveOrUpdateBossReq
    },
      );
    }
  


    export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>
    export type UpdateMutationBody = ActivitySaveOrUpdateBossReq
    export type UpdateMutationError = ErrorType<void>

    export const useUpdate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{data: ActivitySaveOrUpdateBossReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof update>>, {data: ActivitySaveOrUpdateBossReq}> = (props) => {
          const {data} = props ?? {};

          return  update(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof update>>, TError, {data: ActivitySaveOrUpdateBossReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂçïÊçÆÁºñÁ†ÅÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditBillCode = (
    sysBillCodeAddOrEditRequest: SysBillCodeAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/billCode/addOrEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBillCodeAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditBillCodeMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditBillCode>>>
    export type AddOrEditBillCodeMutationBody = SysBillCodeAddOrEditRequest
    export type AddOrEditBillCodeMutationError = ErrorType<void>

    export const useAddOrEditBillCode = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditBillCode>>, TError,{data: SysBillCodeAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditBillCode>>, {data: SysBillCodeAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditBillCode(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditBillCode>>, TError, {data: SysBillCodeAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂçïÊçÆÁºñÁ†ÅÊâπÈáèÊõ¥ÊîπÁä∂ÊÄÅ
 */
export const batchUpdateStatusBillCode = (
    sysBillCodeBatchUpdateStatusRequest: SysBillCodeBatchUpdateStatusRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/billCode/batchUpdateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBillCodeBatchUpdateStatusRequest
    },
      );
    }
  


    export type BatchUpdateStatusBillCodeMutationResult = NonNullable<Awaited<ReturnType<typeof batchUpdateStatusBillCode>>>
    export type BatchUpdateStatusBillCodeMutationBody = SysBillCodeBatchUpdateStatusRequest
    export type BatchUpdateStatusBillCodeMutationError = ErrorType<void>

    export const useBatchUpdateStatusBillCode = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchUpdateStatusBillCode>>, TError,{data: SysBillCodeBatchUpdateStatusRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchUpdateStatusBillCode>>, {data: SysBillCodeBatchUpdateStatusRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchUpdateStatusBillCode(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchUpdateStatusBillCode>>, TError, {data: SysBillCodeBatchUpdateStatusRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÁîüÊàêÂçïÊçÆÁºñÁ†Å
 * @summary ÁîüÊàêÂçïÊçÆÁºñÁ†Å
 */
export const createCode = (
    params: CreateCodeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultString>(
      {url: `/boss/sys/billCode/createCode`, method: 'get',
        params, signal
    },
      );
    }
  

export const getCreateCodeQueryKey = (params: CreateCodeParams,) => [`/boss/sys/billCode/createCode`, ...(params ? [params]: [])];

    
export type CreateCodeQueryResult = NonNullable<Awaited<ReturnType<typeof createCode>>>
export type CreateCodeQueryError = ErrorType<void>

export const useCreateCode = <TData = Awaited<ReturnType<typeof createCode>>, TError = ErrorType<void>>(
 params: CreateCodeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof createCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCreateCodeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof createCode>>> = ({ signal }) => createCode(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof createCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂçïÊçÆÁºñÁ†ÅÈÖçÁΩÆÂàóË°®(ÂàÜÈ°µ)
 */
export const listPageBillCode = (
    sysBillCodeQueryRequest: SysBillCodeQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysBillCodeInfoResponse>(
      {url: `/boss/sys/billCode/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBillCodeQueryRequest
    },
      );
    }
  

export const getListPageBillCodeQueryKey = (sysBillCodeQueryRequest: SysBillCodeQueryRequest,) => [`/boss/sys/billCode/listPage`, sysBillCodeQueryRequest];

    
export type ListPageBillCodeQueryResult = NonNullable<Awaited<ReturnType<typeof listPageBillCode>>>
export type ListPageBillCodeQueryError = ErrorType<void>

export const useListPageBillCode = <TData = Awaited<ReturnType<typeof listPageBillCode>>, TError = ErrorType<void>>(
 sysBillCodeQueryRequest: SysBillCodeQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listPageBillCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPageBillCodeQueryKey(sysBillCodeQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPageBillCode>>> = () => listPageBillCode(sysBillCodeQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof listPageBillCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂçïÊçÆÁºñÁ†ÅËØ¶ÊÉÖ
 * @summary ÂçïÊçÆÁºñÁ†ÅËØ¶ÊÉÖ
 */
export const queryDetailInfoByIdBillCode = (
    params: QueryDetailInfoByIdBillCodeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysBillCodeInfoResponse>(
      {url: `/boss/sys/billCode/queryDetailInfoById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryDetailInfoByIdBillCodeQueryKey = (params: QueryDetailInfoByIdBillCodeParams,) => [`/boss/sys/billCode/queryDetailInfoById`, ...(params ? [params]: [])];

    
export type QueryDetailInfoByIdBillCodeQueryResult = NonNullable<Awaited<ReturnType<typeof queryDetailInfoByIdBillCode>>>
export type QueryDetailInfoByIdBillCodeQueryError = ErrorType<void>

export const useQueryDetailInfoByIdBillCode = <TData = Awaited<ReturnType<typeof queryDetailInfoByIdBillCode>>, TError = ErrorType<void>>(
 params: QueryDetailInfoByIdBillCodeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDetailInfoByIdBillCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDetailInfoByIdBillCodeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDetailInfoByIdBillCode>>> = ({ signal }) => queryDetailInfoByIdBillCode(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryDetailInfoByIdBillCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂØπË¥¶Âçï-ÂàÜÈ°µÊü•ËØ¢
 */
export const billReconciliationPageQuery = (
    billReconciliationPageQueryRequest: BillReconciliationPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultBillReconciliation>(
      {url: `/boss/payment/billReconciliation/billReconciliationPageQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: billReconciliationPageQueryRequest
    },
      );
    }
  


    export type BillReconciliationPageQueryMutationResult = NonNullable<Awaited<ReturnType<typeof billReconciliationPageQuery>>>
    export type BillReconciliationPageQueryMutationBody = BillReconciliationPageQueryRequest
    export type BillReconciliationPageQueryMutationError = ErrorType<void>

    export const useBillReconciliationPageQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof billReconciliationPageQuery>>, TError,{data: BillReconciliationPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof billReconciliationPageQuery>>, {data: BillReconciliationPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  billReconciliationPageQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof billReconciliationPageQuery>>, TError, {data: BillReconciliationPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÁâàÊú¨appVersion
 */
export const appVersion = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultString>(
      {url: `/app/version`, method: 'get', signal
    },
      );
    }
  

export const getAppVersionQueryKey = () => [`/app/version`];

    
export type AppVersionQueryResult = NonNullable<Awaited<ReturnType<typeof appVersion>>>
export type AppVersionQueryError = ErrorType<void>

export const useAppVersion = <TData = Awaited<ReturnType<typeof appVersion>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appVersion>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppVersionQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof appVersion>>> = ({ signal }) => appVersion(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof appVersion>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Êèê‰æõÁªôk8s‰ΩøÁî®Ëá™Âä®ÈîÄÊØÅpod‰ΩúÁî®
 */
export const check = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultInt>(
      {url: `/healthy/check`, method: 'get', signal
    },
      );
    }
  

export const getCheckQueryKey = () => [`/healthy/check`];

    
export type CheckQueryResult = NonNullable<Awaited<ReturnType<typeof check>>>
export type CheckQueryError = ErrorType<void>

export const useCheck = <TData = Awaited<ReturnType<typeof check>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof check>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof check>>> = ({ signal }) => check(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof check>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary heartÊ£ÄÊü•
 */
export const heart = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/heart`, method: 'get', signal
    },
      );
    }
  

export const getHeartQueryKey = () => [`/heart`];

    
export type HeartQueryResult = NonNullable<Awaited<ReturnType<typeof heart>>>
export type HeartQueryError = ErrorType<void>

export const useHeart = <TData = Awaited<ReturnType<typeof heart>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof heart>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHeartQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof heart>>> = ({ signal }) => heart(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof heart>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂîÆÂêéËØ¶ÊÉÖ
 */
export const afterSalesDetail = (
    params?: AfterSalesDetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBuyOrderAfterSalesDetailVO>(
      {url: `/boss/platform/buyOrderAfterSalesApply/afterSalesDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getAfterSalesDetailQueryKey = (params?: AfterSalesDetailParams,) => [`/boss/platform/buyOrderAfterSalesApply/afterSalesDetail`, ...(params ? [params]: [])];

    
export type AfterSalesDetailQueryResult = NonNullable<Awaited<ReturnType<typeof afterSalesDetail>>>
export type AfterSalesDetailQueryError = ErrorType<void>

export const useAfterSalesDetail = <TData = Awaited<ReturnType<typeof afterSalesDetail>>, TError = ErrorType<void>>(
 params?: AfterSalesDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof afterSalesDetail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAfterSalesDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof afterSalesDetail>>> = ({ signal }) => afterSalesDetail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof afterSalesDetail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂîÆÂêéÂàóË°®
 */
export const afterSalesList = (
    afterSalesListQueryRequest: AfterSalesListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultBuyOrderAfterSalesApplyVO>(
      {url: `/boss/platform/buyOrderAfterSalesApply/afterSalesList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: afterSalesListQueryRequest
    },
      );
    }
  


    export type AfterSalesListMutationResult = NonNullable<Awaited<ReturnType<typeof afterSalesList>>>
    export type AfterSalesListMutationBody = AfterSalesListQueryRequest
    export type AfterSalesListMutationError = ErrorType<void>

    export const useAfterSalesList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof afterSalesList>>, TError,{data: AfterSalesListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof afterSalesList>>, {data: AfterSalesListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  afterSalesList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof afterSalesList>>, TError, {data: AfterSalesListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂîÆÂêéÂàóË°®ÂØºÂá∫
 */
export const afterSalesExport = (
    params?: AfterSalesExportParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/platform/buyOrderAfterSalesApply/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getAfterSalesExportQueryKey = (params?: AfterSalesExportParams,) => [`/boss/platform/buyOrderAfterSalesApply/export`, ...(params ? [params]: [])];

    
export type AfterSalesExportQueryResult = NonNullable<Awaited<ReturnType<typeof afterSalesExport>>>
export type AfterSalesExportQueryError = ErrorType<unknown>

export const useAfterSalesExport = <TData = Awaited<ReturnType<typeof afterSalesExport>>, TError = ErrorType<unknown>>(
 params?: AfterSalesExportParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof afterSalesExport>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAfterSalesExportQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof afterSalesExport>>> = ({ signal }) => afterSalesExport(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof afterSalesExport>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂèëË¥ßÂçïÂØºÂá∫
 */
export const exportExcel = (
    params?: ExportExcelParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/platform/buyOrderLogistSendOrder/exportExcel`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportExcelQueryKey = (params?: ExportExcelParams,) => [`/boss/platform/buyOrderLogistSendOrder/exportExcel`, ...(params ? [params]: [])];

    
export type ExportExcelQueryResult = NonNullable<Awaited<ReturnType<typeof exportExcel>>>
export type ExportExcelQueryError = ErrorType<unknown>

export const useExportExcel = <TData = Awaited<ReturnType<typeof exportExcel>>, TError = ErrorType<unknown>>(
 params?: ExportExcelParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportExcel>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportExcelQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportExcel>>> = ({ signal }) => exportExcel(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportExcel>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂèëË¥ßËØ¶ÊÉÖ
 */
export const sendDetail = (
    params?: SendDetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBuyOrderLogistSendOrderVO>(
      {url: `/boss/platform/buyOrderLogistSendOrder/sendDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getSendDetailQueryKey = (params?: SendDetailParams,) => [`/boss/platform/buyOrderLogistSendOrder/sendDetail`, ...(params ? [params]: [])];

    
export type SendDetailQueryResult = NonNullable<Awaited<ReturnType<typeof sendDetail>>>
export type SendDetailQueryError = ErrorType<void>

export const useSendDetail = <TData = Awaited<ReturnType<typeof sendDetail>>, TError = ErrorType<void>>(
 params?: SendDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sendDetail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSendDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof sendDetail>>> = ({ signal }) => sendDetail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof sendDetail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂèëË¥ßÂàóË°®
 */
export const sendList = (
    logisticsSendListRequest: LogisticsSendListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultBuyOrderLogistSendOrderVO>(
      {url: `/boss/platform/buyOrderLogistSendOrder/sendList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: logisticsSendListRequest
    },
      );
    }
  


    export type SendListMutationResult = NonNullable<Awaited<ReturnType<typeof sendList>>>
    export type SendListMutationBody = LogisticsSendListRequest
    export type SendListMutationError = ErrorType<void>

    export const useSendList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendList>>, TError,{data: LogisticsSendListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendList>>, {data: LogisticsSendListRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof sendList>>, TError, {data: LogisticsSendListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈÄÄÂçïÂàóË°®ÂØºÂá∫
 */
export const refundApplyExport = (
    params?: RefundApplyExportParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/platform/buyOrderRefundApply/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getRefundApplyExportQueryKey = (params?: RefundApplyExportParams,) => [`/boss/platform/buyOrderRefundApply/export`, ...(params ? [params]: [])];

    
export type RefundApplyExportQueryResult = NonNullable<Awaited<ReturnType<typeof refundApplyExport>>>
export type RefundApplyExportQueryError = ErrorType<unknown>

export const useRefundApplyExport = <TData = Awaited<ReturnType<typeof refundApplyExport>>, TError = ErrorType<unknown>>(
 params?: RefundApplyExportParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof refundApplyExport>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRefundApplyExportQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof refundApplyExport>>> = ({ signal }) => refundApplyExport(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof refundApplyExport>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÈÄÄÂçïËØ¶ÊÉÖ
 */
export const refundApplyDetail = (
    params?: RefundApplyDetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBuyOrderRefundApplyDetailVO>(
      {url: `/boss/platform/buyOrderRefundApply/refundApplyDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getRefundApplyDetailQueryKey = (params?: RefundApplyDetailParams,) => [`/boss/platform/buyOrderRefundApply/refundApplyDetail`, ...(params ? [params]: [])];

    
export type RefundApplyDetailQueryResult = NonNullable<Awaited<ReturnType<typeof refundApplyDetail>>>
export type RefundApplyDetailQueryError = ErrorType<void>

export const useRefundApplyDetail = <TData = Awaited<ReturnType<typeof refundApplyDetail>>, TError = ErrorType<void>>(
 params?: RefundApplyDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof refundApplyDetail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRefundApplyDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof refundApplyDetail>>> = ({ signal }) => refundApplyDetail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof refundApplyDetail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÈÄÄÂçïÂàóË°®
 */
export const refundApplyList = (
    refundListQueryRequest: RefundListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultBuyOrderRefundApplyVO>(
      {url: `/boss/platform/buyOrderRefundApply/refundApplyList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: refundListQueryRequest
    },
      );
    }
  


    export type RefundApplyListMutationResult = NonNullable<Awaited<ReturnType<typeof refundApplyList>>>
    export type RefundApplyListMutationBody = RefundListQueryRequest
    export type RefundApplyListMutationError = ErrorType<void>

    export const useRefundApplyList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refundApplyList>>, TError,{data: RefundListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refundApplyList>>, {data: RefundListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  refundApplyList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof refundApplyList>>, TError, {data: RefundListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ËÆ¢Âçï‰ºÅ‰∏öÈì∂Ë°å‰ø°ÊÅØ
 */
export const enterprisePayInfo = (
    params?: EnterprisePayInfoParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBossEnterprisePayVO>(
      {url: `/boss/platform/buyOrderSub/enterprisePayInfo`, method: 'get',
        params, signal
    },
      );
    }
  

export const getEnterprisePayInfoQueryKey = (params?: EnterprisePayInfoParams,) => [`/boss/platform/buyOrderSub/enterprisePayInfo`, ...(params ? [params]: [])];

    
export type EnterprisePayInfoQueryResult = NonNullable<Awaited<ReturnType<typeof enterprisePayInfo>>>
export type EnterprisePayInfoQueryError = ErrorType<void>

export const useEnterprisePayInfo = <TData = Awaited<ReturnType<typeof enterprisePayInfo>>, TError = ErrorType<void>>(
 params?: EnterprisePayInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof enterprisePayInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnterprisePayInfoQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof enterprisePayInfo>>> = ({ signal }) => enterprisePayInfo(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof enterprisePayInfo>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËÆ¢ÂçïÂØºÂá∫
 */
export const exportExcel1 = (
    params?: ExportExcel1Params,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/platform/buyOrderSub/exportExcel`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportExcel1QueryKey = (params?: ExportExcel1Params,) => [`/boss/platform/buyOrderSub/exportExcel`, ...(params ? [params]: [])];

    
export type ExportExcel1QueryResult = NonNullable<Awaited<ReturnType<typeof exportExcel1>>>
export type ExportExcel1QueryError = ErrorType<unknown>

export const useExportExcel1 = <TData = Awaited<ReturnType<typeof exportExcel1>>, TError = ErrorType<unknown>>(
 params?: ExportExcel1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportExcel1>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportExcel1QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportExcel1>>> = ({ signal }) => exportExcel1(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportExcel1>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËÆ¢ÂçïÂêàÂêåËØ¶ÊÉÖ
 */
export const orderContractDetail = (
    params?: OrderContractDetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultString>(
      {url: `/boss/platform/buyOrderSub/orderContractDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getOrderContractDetailQueryKey = (params?: OrderContractDetailParams,) => [`/boss/platform/buyOrderSub/orderContractDetail`, ...(params ? [params]: [])];

    
export type OrderContractDetailQueryResult = NonNullable<Awaited<ReturnType<typeof orderContractDetail>>>
export type OrderContractDetailQueryError = ErrorType<void>

export const useOrderContractDetail = <TData = Awaited<ReturnType<typeof orderContractDetail>>, TError = ErrorType<void>>(
 params?: OrderContractDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof orderContractDetail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrderContractDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof orderContractDetail>>> = ({ signal }) => orderContractDetail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof orderContractDetail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËÆ¢ÂçïËØ¶ÊÉÖ
 */
export const orderDetail = (
    params?: OrderDetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBuyOrderBossDetailInfoVO>(
      {url: `/boss/platform/buyOrderSub/orderDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getOrderDetailQueryKey = (params?: OrderDetailParams,) => [`/boss/platform/buyOrderSub/orderDetail`, ...(params ? [params]: [])];

    
export type OrderDetailQueryResult = NonNullable<Awaited<ReturnType<typeof orderDetail>>>
export type OrderDetailQueryError = ErrorType<void>

export const useOrderDetail = <TData = Awaited<ReturnType<typeof orderDetail>>, TError = ErrorType<void>>(
 params?: OrderDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof orderDetail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrderDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof orderDetail>>> = ({ signal }) => orderDetail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof orderDetail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËÆ¢ÂçïÂàóË°®
 */
export const orderList = (
    orderListQueryRequest: OrderListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultBuyOrderVO>(
      {url: `/boss/platform/buyOrderSub/orderList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: orderListQueryRequest
    },
      );
    }
  


    export type OrderListMutationResult = NonNullable<Awaited<ReturnType<typeof orderList>>>
    export type OrderListMutationBody = OrderListQueryRequest
    export type OrderListMutationError = ErrorType<void>

    export const useOrderList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderList>>, TError,{data: OrderListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderList>>, {data: OrderListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  orderList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof orderList>>, TError, {data: OrderListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÁªëÂÆöÂïÜÂìÅ
 */
export const bindCommodityV2 = (
    bindCommodityRequest: BindCommodityRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/layout/categoryCommodity/bindCommodityV2`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bindCommodityRequest
    },
      );
    }
  


    export type BindCommodityV2MutationResult = NonNullable<Awaited<ReturnType<typeof bindCommodityV2>>>
    export type BindCommodityV2MutationBody = BindCommodityRequest
    export type BindCommodityV2MutationError = ErrorType<void>

    export const useBindCommodityV2 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bindCommodityV2>>, TError,{data: BindCommodityRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bindCommodityV2>>, {data: BindCommodityRequest}> = (props) => {
          const {data} = props ?? {};

          return  bindCommodityV2(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bindCommodityV2>>, TError, {data: BindCommodityRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÂïÜÂìÅÊü•ËØ¢
 */
export const categoryCommodityList = (
    homeCategoryCommodityListRequest: HomeCategoryCommodityListRequest,
 ) => {
      return customInstance<JsonListResultCategoryCommodityVO>(
      {url: `/boss/layout/categoryCommodity/categoryCommodityList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: homeCategoryCommodityListRequest
    },
      );
    }
  


    export type CategoryCommodityListMutationResult = NonNullable<Awaited<ReturnType<typeof categoryCommodityList>>>
    export type CategoryCommodityListMutationBody = HomeCategoryCommodityListRequest
    export type CategoryCommodityListMutationError = ErrorType<void>

    export const useCategoryCommodityList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryCommodityList>>, TError,{data: HomeCategoryCommodityListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoryCommodityList>>, {data: HomeCategoryCommodityListRequest}> = (props) => {
          const {data} = props ?? {};

          return  categoryCommodityList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof categoryCommodityList>>, TError, {data: HomeCategoryCommodityListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÂïÜÂìÅÂïÜÂìÅÊü•ËØ¢
 */
export const getCategoryProductList = (
    homeCategoryCommodityListRequest: HomeCategoryCommodityListRequest,
 ) => {
      return customInstance<JsonListResultCommodity>(
      {url: `/boss/layout/categoryCommodity/getCategoryProductList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: homeCategoryCommodityListRequest
    },
      );
    }
  

export const getGetCategoryProductListQueryKey = (homeCategoryCommodityListRequest: HomeCategoryCommodityListRequest,) => [`/boss/layout/categoryCommodity/getCategoryProductList`, homeCategoryCommodityListRequest];

    
export type GetCategoryProductListQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryProductList>>>
export type GetCategoryProductListQueryError = ErrorType<void>

export const useGetCategoryProductList = <TData = Awaited<ReturnType<typeof getCategoryProductList>>, TError = ErrorType<void>>(
 homeCategoryCommodityListRequest: HomeCategoryCommodityListRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCategoryProductList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryProductListQueryKey(homeCategoryCommodityListRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryProductList>>> = () => getCategoryProductList(homeCategoryCommodityListRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof getCategoryProductList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂïÜÂìÅÂêë‰∏ãÊéíÂ∫è
 */
export const categoryCommoditySortDown = (
    params?: CategoryCommoditySortDownParams,
 signal?: AbortSignal
) => {
      return customInstance<JsonResult>(
      {url: `/boss/layout/categoryCommodity/sortDown`, method: 'get',
        params, signal
    },
      );
    }
  

export const getCategoryCommoditySortDownQueryKey = (params?: CategoryCommoditySortDownParams,) => [`/boss/layout/categoryCommodity/sortDown`, ...(params ? [params]: [])];

    
export type CategoryCommoditySortDownQueryResult = NonNullable<Awaited<ReturnType<typeof categoryCommoditySortDown>>>
export type CategoryCommoditySortDownQueryError = ErrorType<void>

export const useCategoryCommoditySortDown = <TData = Awaited<ReturnType<typeof categoryCommoditySortDown>>, TError = ErrorType<void>>(
 params?: CategoryCommoditySortDownParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof categoryCommoditySortDown>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoryCommoditySortDownQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof categoryCommoditySortDown>>> = ({ signal }) => categoryCommoditySortDown(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof categoryCommoditySortDown>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂïÜÂìÅÈ°∂ÁΩÆ
 */
export const sortTop = (
    params?: SortTopParams,
 signal?: AbortSignal
) => {
      return customInstance<JsonResult>(
      {url: `/boss/layout/categoryCommodity/sortTop`, method: 'get',
        params, signal
    },
      );
    }
  

export const getSortTopQueryKey = (params?: SortTopParams,) => [`/boss/layout/categoryCommodity/sortTop`, ...(params ? [params]: [])];

    
export type SortTopQueryResult = NonNullable<Awaited<ReturnType<typeof sortTop>>>
export type SortTopQueryError = ErrorType<void>

export const useSortTop = <TData = Awaited<ReturnType<typeof sortTop>>, TError = ErrorType<void>>(
 params?: SortTopParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sortTop>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSortTopQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof sortTop>>> = ({ signal }) => sortTop(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof sortTop>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂïÜÂìÅÂêë‰∏äÊéíÂ∫è
 */
export const categoryCommoditySortUp = (
    params?: CategoryCommoditySortUpParams,
 signal?: AbortSignal
) => {
      return customInstance<JsonResult>(
      {url: `/boss/layout/categoryCommodity/sortUp`, method: 'get',
        params, signal
    },
      );
    }
  

export const getCategoryCommoditySortUpQueryKey = (params?: CategoryCommoditySortUpParams,) => [`/boss/layout/categoryCommodity/sortUp`, ...(params ? [params]: [])];

    
export type CategoryCommoditySortUpQueryResult = NonNullable<Awaited<ReturnType<typeof categoryCommoditySortUp>>>
export type CategoryCommoditySortUpQueryError = ErrorType<void>

export const useCategoryCommoditySortUp = <TData = Awaited<ReturnType<typeof categoryCommoditySortUp>>, TError = ErrorType<void>>(
 params?: CategoryCommoditySortUpParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof categoryCommoditySortUp>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoryCommoditySortUpQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof categoryCommoditySortUp>>> = ({ signal }) => categoryCommoditySortUp(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof categoryCommoditySortUp>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªËß£ÁªëÂÆöÂïÜÂìÅ
 */
export const unBindCommodity = (
    params?: UnBindCommodityParams,
 signal?: AbortSignal
) => {
      return customInstance<JsonResult>(
      {url: `/boss/layout/categoryCommodity/unBindCommodity`, method: 'get',
        params, signal
    },
      );
    }
  

export const getUnBindCommodityQueryKey = (params?: UnBindCommodityParams,) => [`/boss/layout/categoryCommodity/unBindCommodity`, ...(params ? [params]: [])];

    
export type UnBindCommodityQueryResult = NonNullable<Awaited<ReturnType<typeof unBindCommodity>>>
export type UnBindCommodityQueryError = ErrorType<void>

export const useUnBindCommodity = <TData = Awaited<ReturnType<typeof unBindCommodity>>, TError = ErrorType<void>>(
 params?: UnBindCommodityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof unBindCommodity>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnBindCommodityQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof unBindCommodity>>> = ({ signal }) => unBindCommodity(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof unBindCommodity>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂÖ≥ËÅîËµÑË¥®ÂàÜÁ±ª
 */
export const attach = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/category/qualification/attach`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type AttachMutationResult = NonNullable<Awaited<ReturnType<typeof attach>>>
    export type AttachMutationBody = DmsApiToken
    export type AttachMutationError = ErrorType<void>

    export const useAttach = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attach>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attach>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  attach(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof attach>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Á±ªÁõÆÁâπÊÆäËµÑË¥®ÂàóË°®
 */
export const page = (
    categoryQualificationPageRequest: CategoryQualificationPageRequest,
 ) => {
      return customInstance<ResultPageInfoCategoryQualificationResultInfo>(
      {url: `/boss/category/qualification/page`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: categoryQualificationPageRequest
    },
      );
    }
  

export const getPageQueryKey = (categoryQualificationPageRequest: CategoryQualificationPageRequest,) => [`/boss/category/qualification/page`, categoryQualificationPageRequest];

    
export type PageQueryResult = NonNullable<Awaited<ReturnType<typeof page>>>
export type PageQueryError = ErrorType<void>

export const usePage = <TData = Awaited<ReturnType<typeof page>>, TError = ErrorType<void>>(
 categoryQualificationPageRequest: CategoryQualificationPageRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof page>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPageQueryKey(categoryQualificationPageRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof page>>> = () => page(categoryQualificationPageRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof page>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂÖ≥ËÅîËµÑË¥®Ëß£Èô§ÂÖ≥ËÅî
 */
export const cataQualificationRemove = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/category/qualification/remove`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type CataQualificationRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof cataQualificationRemove>>>
    export type CataQualificationRemoveMutationBody = DmsApiToken
    export type CataQualificationRemoveMutationError = ErrorType<void>

    export const useCataQualificationRemove = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cataQualificationRemove>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cataQualificationRemove>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  cataQualificationRemove(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof cataQualificationRemove>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditBasicInfo = (
    sysGenBasicInfoAddOrEditRequest: SysGenBasicInfoAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/gen/addOrEditBasicInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysGenBasicInfoAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditBasicInfoMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditBasicInfo>>>
    export type AddOrEditBasicInfoMutationBody = SysGenBasicInfoAddOrEditRequest
    export type AddOrEditBasicInfoMutationError = ErrorType<void>

    export const useAddOrEditBasicInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditBasicInfo>>, TError,{data: SysGenBasicInfoAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditBasicInfo>>, {data: SysGenBasicInfoAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditBasicInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditBasicInfo>>, TError, {data: SysGenBasicInfoAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªË°®Âü∫Á°Ä‰ø°ÊÅØ„ÄÅÁîüÊàê‰ø°ÊÅØ„ÄÅÂ≠óÊÆµ‰ø°ÊÅØ„ÄÅÊµÅÁ®ã‰ø°ÊÅØ„ÄÅÊåâÈíÆ‰ø°ÊÅØ„ÄÅËèúÂçï‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ‰∏ªË°®Âü∫Á°Ä‰ø°ÊÅØ„ÄÅÁîüÊàê‰ø°ÊÅØ„ÄÅÂ≠óÊÆµ‰ø°ÊÅØ„ÄÅÊµÅÁ®ã‰ø°ÊÅØ„ÄÅÊåâÈíÆ‰ø°ÊÅØ„ÄÅËèúÂçï‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditMain = (
    sysCodeGenMainAddOrEditRequest: SysCodeGenMainAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/gen/addOrEditMain`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysCodeGenMainAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditMainMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditMain>>>
    export type AddOrEditMainMutationBody = SysCodeGenMainAddOrEditRequest
    export type AddOrEditMainMutationError = ErrorType<void>

    export const useAddOrEditMain = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditMain>>, TError,{data: SysCodeGenMainAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditMain>>, {data: SysCodeGenMainAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditMain(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditMain>>, TError, {data: SysCodeGenMainAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰ªéË°®ÁîüÊàê‰ø°ÊÅØ„ÄÅÂ≠óÊÆµ‰ø°ÊÅØ„ÄÅÊåâÈíÆ‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ‰ªéË°®ÁîüÊàê‰ø°ÊÅØ„ÄÅÂ≠óÊÆµ‰ø°ÊÅØ„ÄÅÊåâÈíÆ‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditSon = (
    sysCodeGenSonAddOrEditRequest: SysCodeGenSonAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/gen/addOrEditSon`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysCodeGenSonAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditSonMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditSon>>>
    export type AddOrEditSonMutationBody = SysCodeGenSonAddOrEditRequest
    export type AddOrEditSonMutationError = ErrorType<void>

    export const useAddOrEditSon = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditSon>>, TError,{data: SysCodeGenSonAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditSon>>, {data: SysCodeGenSonAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditSon(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditSon>>, TError, {data: SysCodeGenSonAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊâπÈáèÂà†Èô§
 * @summary ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊâπÈáèÂà†Èô§
 */
export const batchDelete = (
    sysGenBasicInfoBatchDeleteRequest: SysGenBasicInfoBatchDeleteRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/gen/batchDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysGenBasicInfoBatchDeleteRequest
    },
      );
    }
  


    export type BatchDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof batchDelete>>>
    export type BatchDeleteMutationBody = SysGenBasicInfoBatchDeleteRequest
    export type BatchDeleteMutationError = ErrorType<void>

    export const useBatchDelete = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDelete>>, TError,{data: SysGenBasicInfoBatchDeleteRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchDelete>>, {data: SysGenBasicInfoBatchDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchDelete(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchDelete>>, TError, {data: SysGenBasicInfoBatchDeleteRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊâπÈáèÂà†Èô§
 * @summary ‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÊâπÈáèÂà†Èô§
 */
export const batchSonDelete = (
    sysGenBasicInfoBatchSonDeleteRequest: SysGenBasicInfoBatchSonDeleteRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/gen/batchSonDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysGenBasicInfoBatchSonDeleteRequest
    },
      );
    }
  


    export type BatchSonDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof batchSonDelete>>>
    export type BatchSonDeleteMutationBody = SysGenBasicInfoBatchSonDeleteRequest
    export type BatchSonDeleteMutationError = ErrorType<void>

    export const useBatchSonDelete = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchSonDelete>>, TError,{data: SysGenBasicInfoBatchSonDeleteRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchSonDelete>>, {data: SysGenBasicInfoBatchSonDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchSonDelete(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchSonDelete>>, TError, {data: SysGenBasicInfoBatchSonDeleteRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰ªéË°®ÈÖçÁΩÆËØ¶ÊÉÖ
 * @summary ‰ªéË°®ÈÖçÁΩÆËØ¶ÊÉÖ
 */
export const codeSonInfo = (
    sysCodeSonInfoRequest: SysCodeSonInfoRequest,
 ) => {
      return customInstance<ResultSysCodeGenChildrenResponse>(
      {url: `/boss/sys/gen/codeSonInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysCodeSonInfoRequest
    },
      );
    }
  


    export type CodeSonInfoMutationResult = NonNullable<Awaited<ReturnType<typeof codeSonInfo>>>
    export type CodeSonInfoMutationBody = SysCodeSonInfoRequest
    export type CodeSonInfoMutationError = ErrorType<void>

    export const useCodeSonInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof codeSonInfo>>, TError,{data: SysCodeSonInfoRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof codeSonInfo>>, {data: SysCodeSonInfoRequest}> = (props) => {
          const {data} = props ?? {};

          return  codeSonInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof codeSonInfo>>, TError, {data: SysCodeSonInfoRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªË°®ÈÖçÁΩÆËØ¶ÊÉÖ
 * @summary ‰∏ªË°®ÈÖçÁΩÆËØ¶ÊÉÖ
 */
export const codeMainInfo = (
    sysCodeMainInfoRequest: SysCodeMainInfoRequest,
 ) => {
      return customInstance<ResultSysCodeGenMainResponse>(
      {url: `/boss/sys/gen/codeMainInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysCodeMainInfoRequest
    },
      );
    }
  


    export type CodeMainInfoMutationResult = NonNullable<Awaited<ReturnType<typeof codeMainInfo>>>
    export type CodeMainInfoMutationBody = SysCodeMainInfoRequest
    export type CodeMainInfoMutationError = ErrorType<void>

    export const useCodeMainInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof codeMainInfo>>, TError,{data: SysCodeMainInfoRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof codeMainInfo>>, {data: SysCodeMainInfoRequest}> = (props) => {
          const {data} = props ?? {};

          return  codeMainInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof codeMainInfo>>, TError, {data: SysCodeMainInfoRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÂàÜÈ°µÂàóË°®
 * @summary ‰∏ª‰ªéË°®Âü∫Á°Ä‰ø°ÊÅØÂàÜÈ°µÂàóË°®
 */
export const listPageCodeGen = (
    sysGenBasicInfoPageRequest: SysGenBasicInfoPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysCodeGenPageResponse>(
      {url: `/boss/sys/gen/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysGenBasicInfoPageRequest
    },
      );
    }
  


    export type ListPageCodeGenMutationResult = NonNullable<Awaited<ReturnType<typeof listPageCodeGen>>>
    export type ListPageCodeGenMutationBody = SysGenBasicInfoPageRequest
    export type ListPageCodeGenMutationError = ErrorType<void>

    export const useListPageCodeGen = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listPageCodeGen>>, TError,{data: SysGenBasicInfoPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listPageCodeGen>>, {data: SysGenBasicInfoPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  listPageCodeGen(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listPageCodeGen>>, TError, {data: SysGenBasicInfoPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê∑ªÂä†Êñ∞Â±ûÊÄß
 */
export const addNewAttribute = (
    commodityAttributeParam: CommodityAttributeParam,
 ) => {
      return customInstance<ResultLong>(
      {url: `/boss/manage/platform/commodityAttribute/addNewAttribute`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityAttributeParam
    },
      );
    }
  


    export type AddNewAttributeMutationResult = NonNullable<Awaited<ReturnType<typeof addNewAttribute>>>
    export type AddNewAttributeMutationBody = CommodityAttributeParam
    export type AddNewAttributeMutationError = ErrorType<void>

    export const useAddNewAttribute = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addNewAttribute>>, TError,{data: CommodityAttributeParam}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addNewAttribute>>, {data: CommodityAttributeParam}> = (props) => {
          const {data} = props ?? {};

          return  addNewAttribute(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addNewAttribute>>, TError, {data: CommodityAttributeParam}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êü•ËØ¢Â±ûÊÄßÁöÑÂèØÈÄâÂÄºÊòØÂê¶ÂÖ≥ËÅîÂïÜÂìÅsku
 */
export const attributeGetCommoditySku = (
    params?: AttributeGetCommoditySkuParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListCommoditySkuStock>(
      {url: `/boss/manage/platform/commodityAttribute/attributeGetCommoditySku`, method: 'get',
        params, signal
    },
      );
    }
  

export const getAttributeGetCommoditySkuQueryKey = (params?: AttributeGetCommoditySkuParams,) => [`/boss/manage/platform/commodityAttribute/attributeGetCommoditySku`, ...(params ? [params]: [])];

    
export type AttributeGetCommoditySkuQueryResult = NonNullable<Awaited<ReturnType<typeof attributeGetCommoditySku>>>
export type AttributeGetCommoditySkuQueryError = ErrorType<void>

export const useAttributeGetCommoditySku = <TData = Awaited<ReturnType<typeof attributeGetCommoditySku>>, TError = ErrorType<void>>(
 params?: AttributeGetCommoditySkuParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof attributeGetCommoditySku>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAttributeGetCommoditySkuQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof attributeGetCommoditySku>>> = ({ signal }) => attributeGetCommoditySku(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof attributeGetCommoditySku>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Â±ûÊÄßÊâπÈáèÂÖ≥ËÅîÁ±ªÁõÆ
 */
export const batchDetermine = (
    attributeRelationCategoryVO: AttributeRelationCategoryVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityAttribute/attributeRelationCategoryBatchDetermine`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: attributeRelationCategoryVO
    },
      );
    }
  


    export type BatchDetermineMutationResult = NonNullable<Awaited<ReturnType<typeof batchDetermine>>>
    export type BatchDetermineMutationBody = AttributeRelationCategoryVO
    export type BatchDetermineMutationError = ErrorType<void>

    export const useBatchDetermine = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDetermine>>, TError,{data: AttributeRelationCategoryVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchDetermine>>, {data: AttributeRelationCategoryVO}> = (props) => {
          const {data} = props ?? {};

          return  batchDetermine(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchDetermine>>, TError, {data: AttributeRelationCategoryVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰øÆÊîπÂïÜÂìÅÂ±ûÊÄß‰ø°ÊÅØ
 */
export const attributeWithUpdate = (
    commodityAttributeParam: CommodityAttributeParam,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityAttribute/attributeWithUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityAttributeParam
    },
      );
    }
  


    export type AttributeWithUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof attributeWithUpdate>>>
    export type AttributeWithUpdateMutationBody = CommodityAttributeParam
    export type AttributeWithUpdateMutationError = ErrorType<void>

    export const useAttributeWithUpdate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeWithUpdate>>, TError,{data: CommodityAttributeParam}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attributeWithUpdate>>, {data: CommodityAttributeParam}> = (props) => {
          const {data} = props ?? {};

          return  attributeWithUpdate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof attributeWithUpdate>>, TError, {data: CommodityAttributeParam}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êü•ËØ¢Â±ûÊÄßËØ¶ÊÉÖ
 */
export const findAttributeInfo = (
    basicIdRequest: BasicIdRequest,
 ) => {
      return customInstance<ResultCommodityAttrComplicatedInfo>(
      {url: `/boss/manage/platform/commodityAttribute/findAttributeInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicIdRequest
    },
      );
    }
  

export const getFindAttributeInfoQueryKey = (basicIdRequest: BasicIdRequest,) => [`/boss/manage/platform/commodityAttribute/findAttributeInfo`, basicIdRequest];

    
export type FindAttributeInfoQueryResult = NonNullable<Awaited<ReturnType<typeof findAttributeInfo>>>
export type FindAttributeInfoQueryError = ErrorType<void>

export const useFindAttributeInfo = <TData = Awaited<ReturnType<typeof findAttributeInfo>>, TError = ErrorType<void>>(
 basicIdRequest: BasicIdRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAttributeInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAttributeInfoQueryKey(basicIdRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAttributeInfo>>> = () => findAttributeInfo(basicIdRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof findAttributeInfo>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÊü•ËØ¢Â±ûÊÄß‰ø°ÊÅØ
 */
export const getCommodityAttributePageInfo = (
    attriListQueryRequest: AttriListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodityAttributeVO>(
      {url: `/boss/manage/platform/commodityAttribute/getCommodityAttributePageInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: attriListQueryRequest
    },
      );
    }
  


    export type GetCommodityAttributePageInfoMutationResult = NonNullable<Awaited<ReturnType<typeof getCommodityAttributePageInfo>>>
    export type GetCommodityAttributePageInfoMutationBody = AttriListQueryRequest
    export type GetCommodityAttributePageInfoMutationError = ErrorType<void>

    export const useGetCommodityAttributePageInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCommodityAttributePageInfo>>, TError,{data: AttriListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCommodityAttributePageInfo>>, {data: AttriListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getCommodityAttributePageInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getCommodityAttributePageInfo>>, TError, {data: AttriListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê†πÊçÆÂïÜÂìÅÂàÜÁ±ªÁöÑidËé∑ÂèñÂïÜÂìÅÂ±ûÊÄßÂèäÂ±ûÊÄßÂàÜÁ±ª
 */
export const getList = (
    params?: GetListParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListCommodityAttrInfoVO>(
      {url: `/boss/manage/platform/commodityAttribute/list`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetListQueryKey = (params?: GetListParams,) => [`/boss/manage/platform/commodityAttribute/list`, ...(params ? [params]: [])];

    
export type GetListQueryResult = NonNullable<Awaited<ReturnType<typeof getList>>>
export type GetListQueryError = ErrorType<void>

export const useGetList = <TData = Awaited<ReturnType<typeof getList>>, TError = ErrorType<void>>(
 params?: GetListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getList>>> = ({ signal }) => getList(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Â±ûÊÄßÁä∂ÊÄÅ‰øÆÊîπ(Âà†Èô§)
 */
export const updateStatus1 = (
    commodityAttributeSimpleParam: CommodityAttributeSimpleParam,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityAttribute/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityAttributeSimpleParam
    },
      );
    }
  


    export type UpdateStatus1MutationResult = NonNullable<Awaited<ReturnType<typeof updateStatus1>>>
    export type UpdateStatus1MutationBody = CommodityAttributeSimpleParam
    export type UpdateStatus1MutationError = ErrorType<void>

    export const useUpdateStatus1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatus1>>, TError,{data: CommodityAttributeSimpleParam}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatus1>>, {data: CommodityAttributeSimpleParam}> = (props) => {
          const {data} = props ?? {};

          return  updateStatus1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatus1>>, TError, {data: CommodityAttributeSimpleParam}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Á±ªÁõÆÊâπÈáèÂÖ≥ËÅîÂ±ûÊÄß
 */
export const categoryRelationAttributeBatchDetermine = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/categoryRelationAttributeBatchDetermine`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type CategoryRelationAttributeBatchDetermineMutationResult = NonNullable<Awaited<ReturnType<typeof categoryRelationAttributeBatchDetermine>>>
    export type CategoryRelationAttributeBatchDetermineMutationBody = RelationAttrParamVO
    export type CategoryRelationAttributeBatchDetermineMutationError = ErrorType<void>

    export const useCategoryRelationAttributeBatchDetermine = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryRelationAttributeBatchDetermine>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoryRelationAttributeBatchDetermine>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  categoryRelationAttributeBatchDetermine(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof categoryRelationAttributeBatchDetermine>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Á±ªÁõÆÂÖ≥ËÅîÂ±ûÊÄß
 */
export const determine1 = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/categoryRelationAttributeDetermine`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type Determine1MutationResult = NonNullable<Awaited<ReturnType<typeof determine1>>>
    export type Determine1MutationBody = RelationAttrParamVO
    export type Determine1MutationError = ErrorType<void>

    export const useDetermine1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof determine1>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof determine1>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  determine1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof determine1>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂàÜÁ±ª‰∏äÁßª‰∏ãÁßª
 */
export const commodityCategoryUpOrDownByIds = (
    cateUpDownMoveReq: CateUpDownMoveReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/commodityCategoryUpOrDownByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cateUpDownMoveReq
    },
      );
    }
  


    export type CommodityCategoryUpOrDownByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof commodityCategoryUpOrDownByIds>>>
    export type CommodityCategoryUpOrDownByIdsMutationBody = CateUpDownMoveReq
    export type CommodityCategoryUpOrDownByIdsMutationError = ErrorType<void>

    export const useCommodityCategoryUpOrDownByIds = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commodityCategoryUpOrDownByIds>>, TError,{data: CateUpDownMoveReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commodityCategoryUpOrDownByIds>>, {data: CateUpDownMoveReq}> = (props) => {
          const {data} = props ?? {};

          return  commodityCategoryUpOrDownByIds(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof commodityCategoryUpOrDownByIds>>, TError, {data: CateUpDownMoveReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁºñËæëÂïÜÂìÅÂàÜÁ±ª
 */
export const commodityCategoryUpdate = (
    commodityCategoryParamVO: CommodityCategoryParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/commodityCategoryUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCategoryParamVO
    },
      );
    }
  


    export type CommodityCategoryUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof commodityCategoryUpdate>>>
    export type CommodityCategoryUpdateMutationBody = CommodityCategoryParamVO
    export type CommodityCategoryUpdateMutationError = ErrorType<void>

    export const useCommodityCategoryUpdate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commodityCategoryUpdate>>, TError,{data: CommodityCategoryParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commodityCategoryUpdate>>, {data: CommodityCategoryParamVO}> = (props) => {
          const {data} = props ?? {};

          return  commodityCategoryUpdate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof commodityCategoryUpdate>>, TError, {data: CommodityCategoryParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëß£Èô§ÂÖ≥ËÅî(‰∏ÄÁ∫ß)
 */
export const disassociate = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/disassociate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type DisassociateMutationResult = NonNullable<Awaited<ReturnType<typeof disassociate>>>
    export type DisassociateMutationBody = RelationAttrParamVO
    export type DisassociateMutationError = ErrorType<void>

    export const useDisassociate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociate>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disassociate>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  disassociate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof disassociate>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈÄöËøá‰∫åÁ∫ßÁ±ªÁõÆÊü•Êâæ‰∏âÁ∫ßÁ±ªÁõÆÂàóË°®
 */
export const findThreeListByTwoCategory = (
    params?: FindThreeListByTwoCategoryParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/findThreeListByTwoCategory`, method: 'get',
        params, signal
    },
      );
    }
  

export const getFindThreeListByTwoCategoryQueryKey = (params?: FindThreeListByTwoCategoryParams,) => [`/boss/manage/platform/commodityCategory/findThreeListByTwoCategory`, ...(params ? [params]: [])];

    
export type FindThreeListByTwoCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof findThreeListByTwoCategory>>>
export type FindThreeListByTwoCategoryQueryError = ErrorType<void>

export const useFindThreeListByTwoCategory = <TData = Awaited<ReturnType<typeof findThreeListByTwoCategory>>, TError = ErrorType<void>>(
 params?: FindThreeListByTwoCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findThreeListByTwoCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindThreeListByTwoCategoryQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof findThreeListByTwoCategory>>> = ({ signal }) => findThreeListByTwoCategory(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof findThreeListByTwoCategory>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÈÄöËøá‰∏ÄÁ∫ßÁ±ªÁõÆÊü•Êâæ‰∫åÁ∫ßÁ±ªÁõÆÂàóË°®
 */
export const findTwoListByOneCategory = (
    params?: FindTwoListByOneCategoryParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/findTwoListByOneCategory`, method: 'get',
        params, signal
    },
      );
    }
  

export const getFindTwoListByOneCategoryQueryKey = (params?: FindTwoListByOneCategoryParams,) => [`/boss/manage/platform/commodityCategory/findTwoListByOneCategory`, ...(params ? [params]: [])];

    
export type FindTwoListByOneCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof findTwoListByOneCategory>>>
export type FindTwoListByOneCategoryQueryError = ErrorType<void>

export const useFindTwoListByOneCategory = <TData = Awaited<ReturnType<typeof findTwoListByOneCategory>>, TError = ErrorType<void>>(
 params?: FindTwoListByOneCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findTwoListByOneCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindTwoListByOneCategoryQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof findTwoListByOneCategory>>> = ({ signal }) => findTwoListByOneCategory(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof findTwoListByOneCategory>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëß£Èô§ÂÖ≥ËÅî(ÂõõÁ∫ß)
 */
export const fourDisassociate = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/fourDisassociate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type FourDisassociateMutationResult = NonNullable<Awaited<ReturnType<typeof fourDisassociate>>>
    export type FourDisassociateMutationBody = RelationAttrParamVO
    export type FourDisassociateMutationError = ErrorType<void>

    export const useFourDisassociate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fourDisassociate>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fourDisassociate>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  fourDisassociate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof fourDisassociate>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÂàÜÁ±ªÈÄâ‰∏≠Ê†ë-ÁõÆÂâçÂèÇÊï∞ÈúÄË¶Å‰º†ÂÖ•Â±ûÊÄßidÂÆö‰ΩçÊòØÂê¶ÈÄâÊã©
 */
export const getBOSSCommodityCateCheckedTree = (
    commodityCateTreeListRequest: CommodityCateTreeListRequest,
 ) => {
      return customInstance<ResultCommodityCateCheckedTree>(
      {url: `/boss/manage/platform/commodityCategory/getBOSSCommodityCateCheckedTree`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCateTreeListRequest
    },
      );
    }
  

export const getGetBOSSCommodityCateCheckedTreeQueryKey = (commodityCateTreeListRequest: CommodityCateTreeListRequest,) => [`/boss/manage/platform/commodityCategory/getBOSSCommodityCateCheckedTree`, commodityCateTreeListRequest];

    
export type GetBOSSCommodityCateCheckedTreeQueryResult = NonNullable<Awaited<ReturnType<typeof getBOSSCommodityCateCheckedTree>>>
export type GetBOSSCommodityCateCheckedTreeQueryError = ErrorType<void>

export const useGetBOSSCommodityCateCheckedTree = <TData = Awaited<ReturnType<typeof getBOSSCommodityCateCheckedTree>>, TError = ErrorType<void>>(
 commodityCateTreeListRequest: CommodityCateTreeListRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBOSSCommodityCateCheckedTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBOSSCommodityCateCheckedTreeQueryKey(commodityCateTreeListRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBOSSCommodityCateCheckedTree>>> = () => getBOSSCommodityCateCheckedTree(commodityCateTreeListRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof getBOSSCommodityCateCheckedTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÂïÜÂìÅÊúÄÂ§öÂõõÁ∫ßÂàÜÁ±ª(ÈõÜÂêàÊ†ë)
 */
export const getBOSSCommodityCateTreeList = (
    cateListQueryParamVO: CateListQueryParamVO,
 ) => {
      return customInstance<ResultListCommodityCategoryInfo>(
      {url: `/boss/manage/platform/commodityCategory/getBOSSCommodityCateTreeList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cateListQueryParamVO
    },
      );
    }
  

export const getGetBOSSCommodityCateTreeListQueryKey = (cateListQueryParamVO: CateListQueryParamVO,) => [`/boss/manage/platform/commodityCategory/getBOSSCommodityCateTreeList`, cateListQueryParamVO];

    
export type GetBOSSCommodityCateTreeListQueryResult = NonNullable<Awaited<ReturnType<typeof getBOSSCommodityCateTreeList>>>
export type GetBOSSCommodityCateTreeListQueryError = ErrorType<void>

export const useGetBOSSCommodityCateTreeList = <TData = Awaited<ReturnType<typeof getBOSSCommodityCateTreeList>>, TError = ErrorType<void>>(
 cateListQueryParamVO: CateListQueryParamVO, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBOSSCommodityCateTreeList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBOSSCommodityCateTreeListQueryKey(cateListQueryParamVO);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBOSSCommodityCateTreeList>>> = () => getBOSSCommodityCateTreeList(cateListQueryParamVO, );


  

  const query = useQuery<Awaited<ReturnType<typeof getBOSSCommodityCateTreeList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÂè™ÂåÖÂê´Ê†áÂìÅÂïÜÂìÅÁöÑÊúÄÂ§öÂõõÁ∫ßÂàÜÁ±ª(ÈõÜÂêàÊ†ë)
 */
export const getBOSSCommodityStandardCateTreeList = (
    
 ) => {
      return customInstance<ResultListCommodityCategoryInfo>(
      {url: `/boss/manage/platform/commodityCategory/getBOSSCommodityStandardCateTreeList`, method: 'post'
    },
      );
    }
  

export const getGetBOSSCommodityStandardCateTreeListQueryKey = () => [`/boss/manage/platform/commodityCategory/getBOSSCommodityStandardCateTreeList`];

    
export type GetBOSSCommodityStandardCateTreeListQueryResult = NonNullable<Awaited<ReturnType<typeof getBOSSCommodityStandardCateTreeList>>>
export type GetBOSSCommodityStandardCateTreeListQueryError = ErrorType<void>

export const useGetBOSSCommodityStandardCateTreeList = <TData = Awaited<ReturnType<typeof getBOSSCommodityStandardCateTreeList>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBOSSCommodityStandardCateTreeList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBOSSCommodityStandardCateTreeListQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBOSSCommodityStandardCateTreeList>>> = () => getBOSSCommodityStandardCateTreeList();


  

  const query = useQuery<Awaited<ReturnType<typeof getBOSSCommodityStandardCateTreeList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ê†πÊçÆÁà∂idÂàÜÈ°µÊü•ËØ¢Ê†áÂáÜÁ±ªÁõÆ
 */
export const getCatePageInfo = (
    cateListQueryRequest: CateListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodityCategoryVO>(
      {url: `/boss/manage/platform/commodityCategory/getCatePageInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cateListQueryRequest
    },
      );
    }
  


    export type GetCatePageInfoMutationResult = NonNullable<Awaited<ReturnType<typeof getCatePageInfo>>>
    export type GetCatePageInfoMutationBody = CateListQueryRequest
    export type GetCatePageInfoMutationError = ErrorType<void>

    export const useGetCatePageInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCatePageInfo>>, TError,{data: CateListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCatePageInfo>>, {data: CateListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getCatePageInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getCatePageInfo>>, TError, {data: CateListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈÄöËøáÂàÜÁ±ªidËé∑ÂèñÂàÜÁ±ª‰ø°ÊÅØ
 */
export const getCommodityCategoryById = (
    params?: GetCommodityCategoryByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultCommodityCategoryVO>(
      {url: `/boss/manage/platform/commodityCategory/getCommodityCategoryById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetCommodityCategoryByIdQueryKey = (params?: GetCommodityCategoryByIdParams,) => [`/boss/manage/platform/commodityCategory/getCommodityCategoryById`, ...(params ? [params]: [])];

    
export type GetCommodityCategoryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommodityCategoryById>>>
export type GetCommodityCategoryByIdQueryError = ErrorType<void>

export const useGetCommodityCategoryById = <TData = Awaited<ReturnType<typeof getCommodityCategoryById>>, TError = ErrorType<void>>(
 params?: GetCommodityCategoryByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCommodityCategoryById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommodityCategoryByIdQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommodityCategoryById>>> = ({ signal }) => getCommodityCategoryById(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getCommodityCategoryById>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÂïÜÂìÅÊúÄÂ§öÂõõÁ∫ßÂàÜÁ±ª(Âπ≥Èì∫)
 */
export const getFourCategory = (
    
 ) => {
      return customInstance<ResultListÂïÜÂìÅÂõõÁ∫ßÂàÜÁ±ª>(
      {url: `/boss/manage/platform/commodityCategory/getFourCategory`, method: 'post'
    },
      );
    }
  

export const getGetFourCategoryQueryKey = () => [`/boss/manage/platform/commodityCategory/getFourCategory`];

    
export type GetFourCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getFourCategory>>>
export type GetFourCategoryQueryError = ErrorType<void>

export const useGetFourCategory = <TData = Awaited<ReturnType<typeof getFourCategory>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFourCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFourCategoryQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFourCategory>>> = () => getFourCategory();


  

  const query = useQuery<Awaited<ReturnType<typeof getFourCategory>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÈÄöËøá‰∏ÄÁ∫ßÂàÜÁ±ªidÊü•ËØ¢Ê≠§Á±ªÁõÆÊ†ë
 */
export const getPartCommodityCateTreeList = (
    params?: GetPartCommodityCateTreeListParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListCommodityCategoryInfo>(
      {url: `/boss/manage/platform/commodityCategory/getPartCommodityCateTreeList`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetPartCommodityCateTreeListQueryKey = (params?: GetPartCommodityCateTreeListParams,) => [`/boss/manage/platform/commodityCategory/getPartCommodityCateTreeList`, ...(params ? [params]: [])];

    
export type GetPartCommodityCateTreeListQueryResult = NonNullable<Awaited<ReturnType<typeof getPartCommodityCateTreeList>>>
export type GetPartCommodityCateTreeListQueryError = ErrorType<void>

export const useGetPartCommodityCateTreeList = <TData = Awaited<ReturnType<typeof getPartCommodityCateTreeList>>, TError = ErrorType<void>>(
 params?: GetPartCommodityCateTreeListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPartCommodityCateTreeList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartCommodityCateTreeListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartCommodityCateTreeList>>> = ({ signal }) => getPartCommodityCateTreeList(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getPartCommodityCateTreeList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ‰∏ÄÁ∫ßÂÖ≥ËÅîÂ±ûÊÄß‰ø°ÊÅØ
 */
export const listRelationAttributeJson = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<ResultListCommodityAttrInfoVO>(
      {url: `/boss/manage/platform/commodityCategory/listRelationAttributeJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type ListRelationAttributeJsonMutationResult = NonNullable<Awaited<ReturnType<typeof listRelationAttributeJson>>>
    export type ListRelationAttributeJsonMutationBody = RelationAttrParamVO
    export type ListRelationAttributeJsonMutationError = ErrorType<void>

    export const useListRelationAttributeJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listRelationAttributeJson>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listRelationAttributeJson>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  listRelationAttributeJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listRelationAttributeJson>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰∏âÁ∫ßÂÖ≥ËÅîÂ±ûÊÄß‰ø°ÊÅØ
 */
export const listThreeRelationAttributeJson = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<ResultListCommodityAttributeVO>(
      {url: `/boss/manage/platform/commodityCategory/listThreeRelationAttributeJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type ListThreeRelationAttributeJsonMutationResult = NonNullable<Awaited<ReturnType<typeof listThreeRelationAttributeJson>>>
    export type ListThreeRelationAttributeJsonMutationBody = RelationAttrParamVO
    export type ListThreeRelationAttributeJsonMutationError = ErrorType<void>

    export const useListThreeRelationAttributeJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listThreeRelationAttributeJson>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listThreeRelationAttributeJson>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  listThreeRelationAttributeJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listThreeRelationAttributeJson>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰∫åÁ∫ßÂÖ≥ËÅîÂ±ûÊÄß‰ø°ÊÅØ
 */
export const listTwoRelationAttributeJson = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<ResultListCommodityAttrInfoVO>(
      {url: `/boss/manage/platform/commodityCategory/listTwoRelationAttributeJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type ListTwoRelationAttributeJsonMutationResult = NonNullable<Awaited<ReturnType<typeof listTwoRelationAttributeJson>>>
    export type ListTwoRelationAttributeJsonMutationBody = RelationAttrParamVO
    export type ListTwoRelationAttributeJsonMutationError = ErrorType<void>

    export const useListTwoRelationAttributeJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listTwoRelationAttributeJson>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listTwoRelationAttributeJson>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  listTwoRelationAttributeJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listTwoRelationAttributeJson>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈÄªËæëÂà†Èô§
 */
export const logicDelete = (
    params?: LogicDeleteParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/logicDelete`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLogicDeleteQueryKey = (params?: LogicDeleteParams,) => [`/boss/manage/platform/commodityCategory/logicDelete`, ...(params ? [params]: [])];

    
export type LogicDeleteQueryResult = NonNullable<Awaited<ReturnType<typeof logicDelete>>>
export type LogicDeleteQueryError = ErrorType<void>

export const useLogicDelete = <TData = Awaited<ReturnType<typeof logicDelete>>, TError = ErrorType<void>>(
 params?: LogicDeleteParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logicDelete>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogicDeleteQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof logicDelete>>> = ({ signal }) => logicDelete(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof logicDelete>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ê∑ªÂä†‰∏Ä‰∫åÁ∫ßÂàÜÁ±ª
 */
export const determine = (
    commodityCategoryParamVO: CommodityCategoryParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/saveCategory`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCategoryParamVO
    },
      );
    }
  


    export type DetermineMutationResult = NonNullable<Awaited<ReturnType<typeof determine>>>
    export type DetermineMutationBody = CommodityCategoryParamVO
    export type DetermineMutationError = ErrorType<void>

    export const useDetermine = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof determine>>, TError,{data: CommodityCategoryParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof determine>>, {data: CommodityCategoryParamVO}> = (props) => {
          const {data} = props ?? {};

          return  determine(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof determine>>, TError, {data: CommodityCategoryParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê∑ªÂä†Á±ªÁõÆ‰πãÂâçÁöÑÂà§Êñ≠
 */
export const saveCategoryBeforeJudg = (
    params?: SaveCategoryBeforeJudgParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/saveCategoryBeforeJudg`, method: 'get',
        params, signal
    },
      );
    }
  

export const getSaveCategoryBeforeJudgQueryKey = (params?: SaveCategoryBeforeJudgParams,) => [`/boss/manage/platform/commodityCategory/saveCategoryBeforeJudg`, ...(params ? [params]: [])];

    
export type SaveCategoryBeforeJudgQueryResult = NonNullable<Awaited<ReturnType<typeof saveCategoryBeforeJudg>>>
export type SaveCategoryBeforeJudgQueryError = ErrorType<void>

export const useSaveCategoryBeforeJudg = <TData = Awaited<ReturnType<typeof saveCategoryBeforeJudg>>, TError = ErrorType<void>>(
 params?: SaveCategoryBeforeJudgParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof saveCategoryBeforeJudg>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSaveCategoryBeforeJudgQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof saveCategoryBeforeJudg>>> = ({ signal }) => saveCategoryBeforeJudg(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof saveCategoryBeforeJudg>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ê∑ªÂä†‰∏âÂõõÁ∫ßÂàÜÁ±ª
 */
export const saveThreeFourCategory = (
    commodityCategoryParamVO: CommodityCategoryParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/saveThreeFourCategory`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCategoryParamVO
    },
      );
    }
  


    export type SaveThreeFourCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof saveThreeFourCategory>>>
    export type SaveThreeFourCategoryMutationBody = CommodityCategoryParamVO
    export type SaveThreeFourCategoryMutationError = ErrorType<void>

    export const useSaveThreeFourCategory = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveThreeFourCategory>>, TError,{data: CommodityCategoryParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveThreeFourCategory>>, {data: CommodityCategoryParamVO}> = (props) => {
          const {data} = props ?? {};

          return  saveThreeFourCategory(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveThreeFourCategory>>, TError, {data: CommodityCategoryParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê∑ªÂä†‰∫å‰∏âÁ∫ßÂàÜÁ±ª
 */
export const saveTwoThreeCategory = (
    commodityCategoryParamVO: CommodityCategoryParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/saveTwoThreeCategory`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCategoryParamVO
    },
      );
    }
  


    export type SaveTwoThreeCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof saveTwoThreeCategory>>>
    export type SaveTwoThreeCategoryMutationBody = CommodityCategoryParamVO
    export type SaveTwoThreeCategoryMutationError = ErrorType<void>

    export const useSaveTwoThreeCategory = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveTwoThreeCategory>>, TError,{data: CommodityCategoryParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveTwoThreeCategory>>, {data: CommodityCategoryParamVO}> = (props) => {
          const {data} = props ?? {};

          return  saveTwoThreeCategory(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveTwoThreeCategory>>, TError, {data: CommodityCategoryParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëß£Èô§ÂÖ≥ËÅî(‰∏âÁ∫ß)
 */
export const threeDisassociate = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/threeDisassociate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type ThreeDisassociateMutationResult = NonNullable<Awaited<ReturnType<typeof threeDisassociate>>>
    export type ThreeDisassociateMutationBody = RelationAttrParamVO
    export type ThreeDisassociateMutationError = ErrorType<void>

    export const useThreeDisassociate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threeDisassociate>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threeDisassociate>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  threeDisassociate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof threeDisassociate>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëß£Èô§ÂÖ≥ËÅî(‰∫åÁ∫ß)
 */
export const twoDisassociate = (
    relationAttrParamVO: RelationAttrParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/twoDisassociate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: relationAttrParamVO
    },
      );
    }
  


    export type TwoDisassociateMutationResult = NonNullable<Awaited<ReturnType<typeof twoDisassociate>>>
    export type TwoDisassociateMutationBody = RelationAttrParamVO
    export type TwoDisassociateMutationError = ErrorType<void>

    export const useTwoDisassociate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof twoDisassociate>>, TError,{data: RelationAttrParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof twoDisassociate>>, {data: RelationAttrParamVO}> = (props) => {
          const {data} = props ?? {};

          return  twoDisassociate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof twoDisassociate>>, TError, {data: RelationAttrParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Á±ªÁõÆÁä∂ÊÄÅ‰øÆÊîπ
 */
export const updateShowStatus = (
    commodityCategoryParamVO: CommodityCategoryParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityCategory/updateShowStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCategoryParamVO
    },
      );
    }
  


    export type UpdateShowStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateShowStatus>>>
    export type UpdateShowStatusMutationBody = CommodityCategoryParamVO
    export type UpdateShowStatusMutationError = ErrorType<void>

    export const useUpdateShowStatus = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateShowStatus>>, TError,{data: CommodityCategoryParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateShowStatus>>, {data: CommodityCategoryParamVO}> = (props) => {
          const {data} = props ?? {};

          return  updateShowStatus(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateShowStatus>>, TError, {data: CommodityCategoryParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂâçÁ´ØÁ±ªÁõÆËØ¶ÊÉÖ
 */
export const commodityAttributeInfo = (
    basicIdRequest: BasicIdRequest,
 ) => {
      return customInstance<ResultCommodityCategoryFront>(
      {url: `/boss/commoditycategoryfront/commodityCategoryFront/commodityAttributeInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicIdRequest
    },
      );
    }
  

export const getCommodityAttributeInfoQueryKey = (basicIdRequest: BasicIdRequest,) => [`/boss/commoditycategoryfront/commodityCategoryFront/commodityAttributeInfo`, basicIdRequest];

    
export type CommodityAttributeInfoQueryResult = NonNullable<Awaited<ReturnType<typeof commodityAttributeInfo>>>
export type CommodityAttributeInfoQueryError = ErrorType<void>

export const useCommodityAttributeInfo = <TData = Awaited<ReturnType<typeof commodityAttributeInfo>>, TError = ErrorType<void>>(
 basicIdRequest: BasicIdRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof commodityAttributeInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCommodityAttributeInfoQueryKey(basicIdRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof commodityAttributeInfo>>> = () => commodityAttributeInfo(basicIdRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof commodityAttributeInfo>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂâçÁ´ØÁ±ªÁõÆÊìç‰Ωú
 */
export const commodityCateFrontOperation = (
    commodityCateFrontOperationRequest: CommodityCateFrontOperationRequest,
 ) => {
      return customInstance<ResultLong>(
      {url: `/boss/commoditycategoryfront/commodityCategoryFront/commodityCateFrontOperation`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCateFrontOperationRequest
    },
      );
    }
  


    export type CommodityCateFrontOperationMutationResult = NonNullable<Awaited<ReturnType<typeof commodityCateFrontOperation>>>
    export type CommodityCateFrontOperationMutationBody = CommodityCateFrontOperationRequest
    export type CommodityCateFrontOperationMutationError = ErrorType<void>

    export const useCommodityCateFrontOperation = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commodityCateFrontOperation>>, TError,{data: CommodityCateFrontOperationRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commodityCateFrontOperation>>, {data: CommodityCateFrontOperationRequest}> = (props) => {
          const {data} = props ?? {};

          return  commodityCateFrontOperation(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof commodityCateFrontOperation>>, TError, {data: CommodityCateFrontOperationRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âçï‰ΩìÊü•Áúã
 */
export const getById = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSÂÜÖÂÆπÊãìÂ±ïÂÆû‰Ωì>(
      {url: `/boss/platform/contentInfo/cmsContentGetById`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type GetByIdMutationResult = NonNullable<Awaited<ReturnType<typeof getById>>>
    export type GetByIdMutationBody = CmsContentInfoReq
    export type GetByIdMutationError = ErrorType<void>

    export const useGetById = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getById>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getById>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  getById(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getById>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂâçÁ´ØÁ±ªÁõÆÁßªÂä®
 */
export const move = (
    commodityCateFrontMoveRequest: CommodityCateFrontMoveRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/commoditycategoryfront/commodityCategoryFront/move`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCateFrontMoveRequest
    },
      );
    }
  


    export type MoveMutationResult = NonNullable<Awaited<ReturnType<typeof move>>>
    export type MoveMutationBody = CommodityCateFrontMoveRequest
    export type MoveMutationError = ErrorType<void>

    export const useMove = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof move>>, TError,{data: CommodityCateFrontMoveRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof move>>, {data: CommodityCateFrontMoveRequest}> = (props) => {
          const {data} = props ?? {};

          return  move(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof move>>, TError, {data: CommodityCateFrontMoveRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂâçÁ´ØÁ±ªÁõÆÊ†ëÊü•ËØ¢
 */
export const queryTree = (
    categoryFrontQueryTreeRequest: CategoryFrontQueryTreeRequest,
 ) => {
      return customInstance<ResultListCommodityCategoryFront>(
      {url: `/boss/commoditycategoryfront/commodityCategoryFront/queryTree`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: categoryFrontQueryTreeRequest
    },
      );
    }
  

export const getQueryTreeQueryKey = (categoryFrontQueryTreeRequest: CategoryFrontQueryTreeRequest,) => [`/boss/commoditycategoryfront/commodityCategoryFront/queryTree`, categoryFrontQueryTreeRequest];

    
export type QueryTreeQueryResult = NonNullable<Awaited<ReturnType<typeof queryTree>>>
export type QueryTreeQueryError = ErrorType<void>

export const useQueryTree = <TData = Awaited<ReturnType<typeof queryTree>>, TError = ErrorType<void>>(
 categoryFrontQueryTreeRequest: CategoryFrontQueryTreeRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryTreeQueryKey(categoryFrontQueryTreeRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryTree>>> = () => queryTree(categoryFrontQueryTreeRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof queryTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const getlistJson = (
    skuListQueryRequest: SkuListQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodityCargoDto>(
      {url: `/boss/manage/platform/commoditySkuStock/getlistJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: skuListQueryRequest
    },
      );
    }
  


    export type GetlistJsonMutationResult = NonNullable<Awaited<ReturnType<typeof getlistJson>>>
    export type GetlistJsonMutationBody = SkuListQueryRequest
    export type GetlistJsonMutationError = ErrorType<void>

    export const useGetlistJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getlistJson>>, TError,{data: SkuListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getlistJson>>, {data: SkuListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getlistJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getlistJson>>, TError, {data: SkuListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary skuË°®‰∏≠sp_dataÂàóÊï∞ÊçÆÁªÑË£Ö
 */
export const spDataAssemble = (
    assembleVO: AssembleVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commoditySkuStock/spDataAssemble`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: assembleVO
    },
      );
    }
  


    export type SpDataAssembleMutationResult = NonNullable<Awaited<ReturnType<typeof spDataAssemble>>>
    export type SpDataAssembleMutationBody = AssembleVO
    export type SpDataAssembleMutationError = ErrorType<void>

    export const useSpDataAssemble = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spDataAssemble>>, TError,{data: AssembleVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof spDataAssemble>>, {data: AssembleVO}> = (props) => {
          const {data} = props ?? {};

          return  spDataAssemble(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof spDataAssemble>>, TError, {data: AssembleVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ê†áÂìÅÂèäÂïÜÂìÅ‰ø°ÊÅØÂàõÂª∫
 */
export const create = (
    commodityCreateInfoVO: CommodityCreateInfoVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardStock/create`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCreateInfoVO
    },
      );
    }
  


    export type CreateMutationResult = NonNullable<Awaited<ReturnType<typeof create>>>
    export type CreateMutationBody = CommodityCreateInfoVO
    export type CreateMutationError = ErrorType<void>

    export const useCreate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,{data: CommodityCreateInfoVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof create>>, {data: CommodityCreateInfoVO}> = (props) => {
          const {data} = props ?? {};

          return  create(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof create>>, TError, {data: CommodityCreateInfoVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êü•ÁúãÊ†áÂìÅÂ∫ì‰ø°ÊÅØ
 */
export const getStandardStockById = (
    params?: GetStandardStockByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultCommodityStandardStockDto>(
      {url: `/boss/manage/platform/commodityStandardStock/getStandardStockById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetStandardStockByIdQueryKey = (params?: GetStandardStockByIdParams,) => [`/boss/manage/platform/commodityStandardStock/getStandardStockById`, ...(params ? [params]: [])];

    
export type GetStandardStockByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStandardStockById>>>
export type GetStandardStockByIdQueryError = ErrorType<void>

export const useGetStandardStockById = <TData = Awaited<ReturnType<typeof getStandardStockById>>, TError = ErrorType<void>>(
 params?: GetStandardStockByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getStandardStockById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStandardStockByIdQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStandardStockById>>> = ({ signal }) => getStandardStockById(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getStandardStockById>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÊü•ËØ¢Ê†áÂìÅÂ∫ì‰ø°ÊÅØ
 */
export const getStandardStockListJson = (
    standardStockQueryRequest: StandardStockQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodityStandardStockVO>(
      {url: `/boss/manage/platform/commodityStandardStock/getStandardStockListJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: standardStockQueryRequest
    },
      );
    }
  


    export type GetStandardStockListJsonMutationResult = NonNullable<Awaited<ReturnType<typeof getStandardStockListJson>>>
    export type GetStandardStockListJsonMutationBody = StandardStockQueryRequest
    export type GetStandardStockListJsonMutationError = ErrorType<void>

    export const useGetStandardStockListJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStandardStockListJson>>, TError,{data: StandardStockQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStandardStockListJson>>, {data: StandardStockQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getStandardStockListJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getStandardStockListJson>>, TError, {data: StandardStockQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈÄªËæëÂà†Èô§
 */
export const logicDelete1 = (
    params?: LogicDelete1Params,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardStock/logicDelete`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLogicDelete1QueryKey = (params?: LogicDelete1Params,) => [`/boss/manage/platform/commodityStandardStock/logicDelete`, ...(params ? [params]: [])];

    
export type LogicDelete1QueryResult = NonNullable<Awaited<ReturnType<typeof logicDelete1>>>
export type LogicDelete1QueryError = ErrorType<void>

export const useLogicDelete1 = <TData = Awaited<ReturnType<typeof logicDelete1>>, TError = ErrorType<void>>(
 params?: LogicDelete1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logicDelete1>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogicDelete1QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof logicDelete1>>> = ({ signal }) => logicDelete1(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof logicDelete1>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁºñËæëÊ†áÂìÅ
 */
export const updateJson = (
    commodityCreateInfoVO: CommodityCreateInfoVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardStock/updateJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityCreateInfoVO
    },
      );
    }
  


    export type UpdateJsonMutationResult = NonNullable<Awaited<ReturnType<typeof updateJson>>>
    export type UpdateJsonMutationBody = CommodityCreateInfoVO
    export type UpdateJsonMutationError = ErrorType<void>

    export const useUpdateJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateJson>>, TError,{data: CommodityCreateInfoVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateJson>>, {data: CommodityCreateInfoVO}> = (props) => {
          const {data} = props ?? {};

          return  updateJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateJson>>, TError, {data: CommodityCreateInfoVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÆ°Ê†∏È©≥ÂõûÊåâÈíÆ
 */
export const commodityVertifyReject = (
    vertifyParamVO: VertifyParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardVertifyLog/commodityVertifyFailed`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: vertifyParamVO
    },
      );
    }
  


    export type CommodityVertifyRejectMutationResult = NonNullable<Awaited<ReturnType<typeof commodityVertifyReject>>>
    export type CommodityVertifyRejectMutationBody = VertifyParamVO
    export type CommodityVertifyRejectMutationError = ErrorType<void>

    export const useCommodityVertifyReject = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commodityVertifyReject>>, TError,{data: VertifyParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commodityVertifyReject>>, {data: VertifyParamVO}> = (props) => {
          const {data} = props ?? {};

          return  commodityVertifyReject(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof commodityVertifyReject>>, TError, {data: VertifyParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÆ°Ê†∏ÈÄöËøáÊåâÈíÆ
 */
export const commodityVertifyPass = (
    vertifyParamVO: VertifyParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardVertifyLog/commodityVertifyPass`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: vertifyParamVO
    },
      );
    }
  


    export type CommodityVertifyPassMutationResult = NonNullable<Awaited<ReturnType<typeof commodityVertifyPass>>>
    export type CommodityVertifyPassMutationBody = VertifyParamVO
    export type CommodityVertifyPassMutationError = ErrorType<void>

    export const useCommodityVertifyPass = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commodityVertifyPass>>, TError,{data: VertifyParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commodityVertifyPass>>, {data: VertifyParamVO}> = (props) => {
          const {data} = props ?? {};

          return  commodityVertifyPass(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof commodityVertifyPass>>, TError, {data: VertifyParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âä†ËΩΩÊ†áÂìÅÂÆ°Ê†∏ËÆ∞ÂΩï
 */
export const loadVertifyLog = (
    params?: LoadVertifyLogParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListCommodityStandardVertifyLogVO>(
      {url: `/boss/manage/platform/commodityStandardVertifyLog/loadVertifyLog`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLoadVertifyLogQueryKey = (params?: LoadVertifyLogParams,) => [`/boss/manage/platform/commodityStandardVertifyLog/loadVertifyLog`, ...(params ? [params]: [])];

    
export type LoadVertifyLogQueryResult = NonNullable<Awaited<ReturnType<typeof loadVertifyLog>>>
export type LoadVertifyLogQueryError = ErrorType<void>

export const useLoadVertifyLog = <TData = Awaited<ReturnType<typeof loadVertifyLog>>, TError = ErrorType<void>>(
 params?: LoadVertifyLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loadVertifyLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoadVertifyLogQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof loadVertifyLog>>> = ({ signal }) => loadVertifyLog(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof loadVertifyLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Êü•ÁúãÊãíÁªùÂéüÂõ†
 */
export const vertifyRejectReason = (
    params?: VertifyRejectReasonParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/commodityStandardVertifyLog/vertifyRejectReason`, method: 'get',
        params, signal
    },
      );
    }
  

export const getVertifyRejectReasonQueryKey = (params?: VertifyRejectReasonParams,) => [`/boss/manage/platform/commodityStandardVertifyLog/vertifyRejectReason`, ...(params ? [params]: [])];

    
export type VertifyRejectReasonQueryResult = NonNullable<Awaited<ReturnType<typeof vertifyRejectReason>>>
export type VertifyRejectReasonQueryError = ErrorType<void>

export const useVertifyRejectReason = <TData = Awaited<ReturnType<typeof vertifyRejectReason>>, TError = ErrorType<void>>(
 params?: VertifyRejectReasonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof vertifyRejectReason>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVertifyRejectReasonQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof vertifyRejectReason>>> = ({ signal }) => vertifyRejectReason(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof vertifyRejectReason>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÊü•ËØ¢ÂïÜÂìÅÂÆ°Ê†∏ÂàóË°®
 */
export const getVertifyLogListJson = (
    commodityVertifyLogQueryRequest: CommodityVertifyLogQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodityVertifyLogDto>(
      {url: `/boss/platform/commodityVertifyLogBoss/getCommodityVertifyLogListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityVertifyLogQueryRequest
    },
      );
    }
  


    export type GetVertifyLogListJsonMutationResult = NonNullable<Awaited<ReturnType<typeof getVertifyLogListJson>>>
    export type GetVertifyLogListJsonMutationBody = CommodityVertifyLogQueryRequest
    export type GetVertifyLogListJsonMutationError = ErrorType<void>

    export const useGetVertifyLogListJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getVertifyLogListJson>>, TError,{data: CommodityVertifyLogQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getVertifyLogListJson>>, {data: CommodityVertifyLogQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getVertifyLogListJson(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getVertifyLogListJson>>, TError, {data: CommodityVertifyLogQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âä†ËΩΩÂïÜÂìÅÂÆ°Ê†∏ËÆ∞ÂΩï
 */
export const loadProductVertifyLog = (
    params?: LoadProductVertifyLogParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListCommodityVertifyLogVO>(
      {url: `/boss/platform/commodityVertifyLogBoss/loadProductVertifyLog`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLoadProductVertifyLogQueryKey = (params?: LoadProductVertifyLogParams,) => [`/boss/platform/commodityVertifyLogBoss/loadProductVertifyLog`, ...(params ? [params]: [])];

    
export type LoadProductVertifyLogQueryResult = NonNullable<Awaited<ReturnType<typeof loadProductVertifyLog>>>
export type LoadProductVertifyLogQueryError = ErrorType<void>

export const useLoadProductVertifyLog = <TData = Awaited<ReturnType<typeof loadProductVertifyLog>>, TError = ErrorType<void>>(
 params?: LoadProductVertifyLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loadProductVertifyLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoadProductVertifyLogQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof loadProductVertifyLog>>> = ({ signal }) => loadProductVertifyLog(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof loadProductVertifyLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂÆ°Ê†∏ËÆ∞ÂΩïÊü•Áúã
 */
export const lookAuditLog = (
    params?: LookAuditLogParams,
 signal?: AbortSignal
) => {
      return customInstance<Result>(
      {url: `/boss/platform/commodityVertifyLogBoss/lookAuditLog`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLookAuditLogQueryKey = (params?: LookAuditLogParams,) => [`/boss/platform/commodityVertifyLogBoss/lookAuditLog`, ...(params ? [params]: [])];

    
export type LookAuditLogQueryResult = NonNullable<Awaited<ReturnType<typeof lookAuditLog>>>
export type LookAuditLogQueryError = ErrorType<void>

export const useLookAuditLog = <TData = Awaited<ReturnType<typeof lookAuditLog>>, TError = ErrorType<void>>(
 params?: LookAuditLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof lookAuditLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLookAuditLogQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof lookAuditLog>>> = ({ signal }) => lookAuditLog(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof lookAuditLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Êü•Áúã
 */
export const productVertifyLook = (
    params?: ProductVertifyLookParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultCommodityValueInfoVO>(
      {url: `/boss/platform/commodityVertifyLogBoss/productVertifyLook`, method: 'get',
        params, signal
    },
      );
    }
  

export const getProductVertifyLookQueryKey = (params?: ProductVertifyLookParams,) => [`/boss/platform/commodityVertifyLogBoss/productVertifyLook`, ...(params ? [params]: [])];

    
export type ProductVertifyLookQueryResult = NonNullable<Awaited<ReturnType<typeof productVertifyLook>>>
export type ProductVertifyLookQueryError = ErrorType<void>

export const useProductVertifyLook = <TData = Awaited<ReturnType<typeof productVertifyLook>>, TError = ErrorType<void>>(
 params?: ProductVertifyLookParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productVertifyLook>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductVertifyLookQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof productVertifyLook>>> = ({ signal }) => productVertifyLook(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof productVertifyLook>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂïÜÂìÅÂÆ°Ê†∏ÈÄöËøáÊåâÈíÆ
 */
export const productVertifyPass = (
    commodityVertifyParamVO: CommodityVertifyParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/commodityVertifyLogBoss/productVertifyPass`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityVertifyParamVO
    },
      );
    }
  


    export type ProductVertifyPassMutationResult = NonNullable<Awaited<ReturnType<typeof productVertifyPass>>>
    export type ProductVertifyPassMutationBody = CommodityVertifyParamVO
    export type ProductVertifyPassMutationError = ErrorType<void>

    export const useProductVertifyPass = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productVertifyPass>>, TError,{data: CommodityVertifyParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productVertifyPass>>, {data: CommodityVertifyParamVO}> = (props) => {
          const {data} = props ?? {};

          return  productVertifyPass(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof productVertifyPass>>, TError, {data: CommodityVertifyParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂïÜÂìÅÂÆ°Ê†∏È©≥ÂõûÊåâÈíÆ
 */
export const productVertifyReject = (
    commodityVertifyParamVO: CommodityVertifyParamVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/commodityVertifyLogBoss/productVertifyReject`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityVertifyParamVO
    },
      );
    }
  


    export type ProductVertifyRejectMutationResult = NonNullable<Awaited<ReturnType<typeof productVertifyReject>>>
    export type ProductVertifyRejectMutationBody = CommodityVertifyParamVO
    export type ProductVertifyRejectMutationError = ErrorType<void>

    export const useProductVertifyReject = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productVertifyReject>>, TError,{data: CommodityVertifyParamVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productVertifyReject>>, {data: CommodityVertifyParamVO}> = (props) => {
          const {data} = props ?? {};

          return  productVertifyReject(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof productVertifyReject>>, TError, {data: CommodityVertifyParamVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âà†Èô§
 */
export const deleteByIds = (
    cmsContentInfoDeleteReq: CmsContentInfoDeleteReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/contentInfo/cmsContentDeleteByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoDeleteReq
    },
      );
    }
  


    export type DeleteByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteByIds>>>
    export type DeleteByIdsMutationBody = CmsContentInfoDeleteReq
    export type DeleteByIdsMutationError = ErrorType<void>

    export const useDeleteByIds = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteByIds>>, TError,{data: CmsContentInfoDeleteReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteByIds>>, {data: CmsContentInfoDeleteReq}> = (props) => {
          const {data} = props ?? {};

          return  deleteByIds(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteByIds>>, TError, {data: CmsContentInfoDeleteReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âçï‰ΩìÊü•Áúã
 */
export const getById1 = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeGetById`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type GetById1MutationResult = NonNullable<Awaited<ReturnType<typeof getById1>>>
    export type GetById1MutationBody = CmsContentInfoReq
    export type GetById1MutationError = ErrorType<void>

    export const useGetById1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getById1>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getById1>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  getById1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getById1>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const queryPageList = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultIwubidaPageResultCMSÂÜÖÂÆπÂÆû‰Ωì>(
      {url: `/boss/platform/contentInfo/cmsContentQueryPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type QueryPageListMutationResult = NonNullable<Awaited<ReturnType<typeof queryPageList>>>
    export type QueryPageListMutationBody = CmsContentInfoReq
    export type QueryPageListMutationError = ErrorType<void>

    export const useQueryPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryPageList>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryPageList>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  queryPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryPageList>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∏∏ËßÅÈóÆÈ¢òÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const queryProblemPageList = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultIwubidaPageResultCMSÂÜÖÂÆπÊãìÂ±ïÂÆû‰Ωì>(
      {url: `/boss/platform/contentInfo/cmsContentQueryProblemPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type QueryProblemPageListMutationResult = NonNullable<Awaited<ReturnType<typeof queryProblemPageList>>>
    export type QueryProblemPageListMutationBody = CmsContentInfoReq
    export type QueryProblemPageListMutationError = ErrorType<void>

    export const useQueryProblemPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryProblemPageList>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryProblemPageList>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  queryProblemPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryProblemPageList>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êñ∞Â¢û‰øùÂ≠ò
 */
export const save1 = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSÂÜÖÂÆπÂÆû‰Ωì>(
      {url: `/boss/platform/contentInfo/cmsContentSave`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type Save1MutationResult = NonNullable<Awaited<ReturnType<typeof save1>>>
    export type Save1MutationBody = CmsContentInfoReq
    export type Save1MutationError = ErrorType<void>

    export const useSave1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof save1>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof save1>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  save1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof save1>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰∏äÁßª‰∏ãÁßª
 */
export const cmsContentUpOrDownByIds = (
    cmsMoveUpAndDownReq: CmsMoveUpAndDownReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/contentInfo/cmsContentUpOrDownByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsMoveUpAndDownReq
    },
      );
    }
  


    export type CmsContentUpOrDownByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof cmsContentUpOrDownByIds>>>
    export type CmsContentUpOrDownByIdsMutationBody = CmsMoveUpAndDownReq
    export type CmsContentUpOrDownByIdsMutationError = ErrorType<void>

    export const useCmsContentUpOrDownByIds = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cmsContentUpOrDownByIds>>, TError,{data: CmsMoveUpAndDownReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cmsContentUpOrDownByIds>>, {data: CmsMoveUpAndDownReq}> = (props) => {
          const {data} = props ?? {};

          return  cmsContentUpOrDownByIds(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof cmsContentUpOrDownByIds>>, TError, {data: CmsMoveUpAndDownReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êõ¥Êñ∞‰øùÂ≠ò
 */
export const updateById = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSÂÜÖÂÆπÂÆû‰Ωì>(
      {url: `/boss/platform/contentInfo/cmsContentUpdateById`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type UpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateById>>>
    export type UpdateByIdMutationBody = CmsContentInfoReq
    export type UpdateByIdMutationError = ErrorType<void>

    export const useUpdateById = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateById>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateById>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  updateById(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateById>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅË¥¶ÈÄöÂàùÂÆ°ÂÆ°Ê†∏
 */
export const enterpriseAccountAudit = (
    enterpriseAccountAuditRequest: EnterpriseAccountAuditRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/enterpriseAccount/enterpriseAccountAudit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseAccountAuditRequest
    },
      );
    }
  


    export type EnterpriseAccountAuditMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseAccountAudit>>>
    export type EnterpriseAccountAuditMutationBody = EnterpriseAccountAuditRequest
    export type EnterpriseAccountAuditMutationError = ErrorType<void>

    export const useEnterpriseAccountAudit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseAccountAudit>>, TError,{data: EnterpriseAccountAuditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseAccountAudit>>, {data: EnterpriseAccountAuditRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseAccountAudit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseAccountAudit>>, TError, {data: EnterpriseAccountAuditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅË¥¶ÈÄöÁî≥ËØ∑ËÆ∞ÂΩï
 */
export const enterpriseAccountAuditList = (
    enterpriseAccountAuditPageRequest: EnterpriseAccountAuditPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseAccountAuditListVo>(
      {url: `/boss/member/enterpriseAccount/enterpriseAccountAuditList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseAccountAuditPageRequest
    },
      );
    }
  


    export type EnterpriseAccountAuditListMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseAccountAuditList>>>
    export type EnterpriseAccountAuditListMutationBody = EnterpriseAccountAuditPageRequest
    export type EnterpriseAccountAuditListMutationError = ErrorType<void>

    export const useEnterpriseAccountAuditList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseAccountAuditList>>, TError,{data: EnterpriseAccountAuditPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseAccountAuditList>>, {data: EnterpriseAccountAuditPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseAccountAuditList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseAccountAuditList>>, TError, {data: EnterpriseAccountAuditPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅË¥¶ÈÄöÁ¶ÅÁî®/ÂêØÁî®
 */
export const enterpriseAccountDisable = (
    enterpriseAccountDisableRequest: EnterpriseAccountDisableRequest,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/member/enterpriseAccount/enterpriseAccountDisable`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseAccountDisableRequest
    },
      );
    }
  


    export type EnterpriseAccountDisableMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseAccountDisable>>>
    export type EnterpriseAccountDisableMutationBody = EnterpriseAccountDisableRequest
    export type EnterpriseAccountDisableMutationError = ErrorType<void>

    export const useEnterpriseAccountDisable = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseAccountDisable>>, TError,{data: EnterpriseAccountDisableRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseAccountDisable>>, {data: EnterpriseAccountDisableRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseAccountDisable(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseAccountDisable>>, TError, {data: EnterpriseAccountDisableRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅË¥¶ÈÄöË¥¶Âè∑ÁÆ°ÁêÜÂàóË°®
 */
export const enterpriseAccountListPage = (
    enterpriseAccountListRequest: EnterpriseAccountListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseAccountPageVo>(
      {url: `/boss/member/enterpriseAccount/enterpriseAccountListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseAccountListRequest
    },
      );
    }
  


    export type EnterpriseAccountListPageMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseAccountListPage>>>
    export type EnterpriseAccountListPageMutationBody = EnterpriseAccountListRequest
    export type EnterpriseAccountListPageMutationError = ErrorType<void>

    export const useEnterpriseAccountListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseAccountListPage>>, TError,{data: EnterpriseAccountListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseAccountListPage>>, {data: EnterpriseAccountListRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseAccountListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseAccountListPage>>, TError, {data: EnterpriseAccountListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅË¥¶ÈÄöÂàùÂÆ°ÂÆ°Ê†∏Êü•ÁúãËØ¶ÊÉÖ
 */
export const enterpriseAccountShowInfo = (
    id: number,
 signal?: AbortSignal
) => {
      return customInstance<ResultEnterpriseShowInfoDto>(
      {url: `/boss/member/enterpriseAccount/enterpriseAccountShowInfo/${id}`, method: 'get', signal
    },
      );
    }
  

export const getEnterpriseAccountShowInfoQueryKey = (id: number,) => [`/boss/member/enterpriseAccount/enterpriseAccountShowInfo/${id}`];

    
export type EnterpriseAccountShowInfoQueryResult = NonNullable<Awaited<ReturnType<typeof enterpriseAccountShowInfo>>>
export type EnterpriseAccountShowInfoQueryError = ErrorType<void>

export const useEnterpriseAccountShowInfo = <TData = Awaited<ReturnType<typeof enterpriseAccountShowInfo>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof enterpriseAccountShowInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnterpriseAccountShowInfoQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof enterpriseAccountShowInfo>>> = ({ signal }) => enterpriseAccountShowInfo(id, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof enterpriseAccountShowInfo>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ‰∫§ÊòìÂêàÂêåÂàóË°® ÁÇπÂØπÁÇπÂêàÂêåÂàóË°®(Êü•ÁúãÂíå‰∏ãËΩΩÂú∞ÂùÄ:pdfUrl)
 */
export const enterpriseContractListPage = (
    enterpriseContractPageRequest: EnterpriseContractPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseContractPageVo>(
      {url: `/boss/member/enterpriseContract/enterpriseContractListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseContractPageRequest
    },
      );
    }
  


    export type EnterpriseContractListPageMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseContractListPage>>>
    export type EnterpriseContractListPageMutationBody = EnterpriseContractPageRequest
    export type EnterpriseContractListPageMutationError = ErrorType<void>

    export const useEnterpriseContractListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseContractListPage>>, TError,{data: EnterpriseContractPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseContractListPage>>, {data: EnterpriseContractPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseContractListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseContractListPage>>, TError, {data: EnterpriseContractPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÖ•È©ª‰ºÅ‰∏öÂàóË°® Êñ∞Â¢û‰ºÅ‰∏ö(‰π∞ÂÆ∂)
 */
export const enterpriseBuyerRegister = (
    enterpriseBuyerRegisterRequest: EnterpriseBuyerRegisterRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/enterprise/enterpriseBuyerRegister`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseBuyerRegisterRequest
    },
      );
    }
  


    export type EnterpriseBuyerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseBuyerRegister>>>
    export type EnterpriseBuyerRegisterMutationBody = EnterpriseBuyerRegisterRequest
    export type EnterpriseBuyerRegisterMutationError = ErrorType<void>

    export const useEnterpriseBuyerRegister = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseBuyerRegister>>, TError,{data: EnterpriseBuyerRegisterRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseBuyerRegister>>, {data: EnterpriseBuyerRegisterRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseBuyerRegister(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseBuyerRegister>>, TError, {data: EnterpriseBuyerRegisterRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÁ¶ÅÁî®/ÂêØÁî®
 */
export const enterpriseDisable = (
    enterpriseDisableRequest: EnterpriseDisableRequest,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/member/enterprise/enterpriseDisable`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseDisableRequest
    },
      );
    }
  


    export type EnterpriseDisableMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseDisable>>>
    export type EnterpriseDisableMutationBody = EnterpriseDisableRequest
    export type EnterpriseDisableMutationError = ErrorType<void>

    export const useEnterpriseDisable = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseDisable>>, TError,{data: EnterpriseDisableRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseDisable>>, {data: EnterpriseDisableRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseDisable(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseDisable>>, TError, {data: EnterpriseDisableRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÖ•È©ª‰ºÅ‰∏öÂàóË°®
 */
export const enterpriseListPage = (
    enterpriseListRequest: EnterpriseListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterprise>(
      {url: `/boss/member/enterprise/enterpriseListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseListRequest
    },
      );
    }
  


    export type EnterpriseListPageMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseListPage>>>
    export type EnterpriseListPageMutationBody = EnterpriseListRequest
    export type EnterpriseListPageMutationError = ErrorType<void>

    export const useEnterpriseListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseListPage>>, TError,{data: EnterpriseListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseListPage>>, {data: EnterpriseListRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseListPage>>, TError, {data: EnterpriseListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÂàóË°®Êü•ËØ¢ boss‰ΩøÁî®,‰º†‰ºÅ‰∏öÂêçÁß∞Êü•ËØ¢ÊúâÊïàÁöÑ‰ºÅ‰∏öÂíå‰æõÂ∫îÂïÜ
 */
export const enterpriseSearch = (
    enterpriseSearchRequest: EnterpriseSearchRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterprise>(
      {url: `/boss/member/enterprise/enterpriseSearch`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseSearchRequest
    },
      );
    }
  


    export type EnterpriseSearchMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseSearch>>>
    export type EnterpriseSearchMutationBody = EnterpriseSearchRequest
    export type EnterpriseSearchMutationError = ErrorType<void>

    export const useEnterpriseSearch = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseSearch>>, TError,{data: EnterpriseSearchRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseSearch>>, {data: EnterpriseSearchRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseSearch(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseSearch>>, TError, {data: EnterpriseSearchRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÖ•È©ª‰ºÅ‰∏öËØ¶ÊÉÖ
 */
export const enterpriseShowInfo = (
    id: number,
 ) => {
      return customInstance<ResultEnterpriseDto>(
      {url: `/boss/member/enterprise/enterpriseShowInfo/${id}`, method: 'post'
    },
      );
    }
  

export const getEnterpriseShowInfoQueryKey = (id: number,) => [`/boss/member/enterprise/enterpriseShowInfo/${id}`];

    
export type EnterpriseShowInfoQueryResult = NonNullable<Awaited<ReturnType<typeof enterpriseShowInfo>>>
export type EnterpriseShowInfoQueryError = ErrorType<void>

export const useEnterpriseShowInfo = <TData = Awaited<ReturnType<typeof enterpriseShowInfo>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof enterpriseShowInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnterpriseShowInfoQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof enterpriseShowInfo>>> = () => enterpriseShowInfo(id, );


  

  const query = useQuery<Awaited<ReturnType<typeof enterpriseShowInfo>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁîµÂ≠êÁ≠æÊ∏†ÈÅìÁÆ°ÁêÜ
 */
export const enterpriseSignChannelManagementPageList = (
    enterpriseSignChannelManagementListRequest: EnterpriseSignChannelManagementListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseSignChannelManagementPageVo>(
      {url: `/boss/member/enterprise/enterpriseSignChannelManagementPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseSignChannelManagementListRequest
    },
      );
    }
  


    export type EnterpriseSignChannelManagementPageListMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseSignChannelManagementPageList>>>
    export type EnterpriseSignChannelManagementPageListMutationBody = EnterpriseSignChannelManagementListRequest
    export type EnterpriseSignChannelManagementPageListMutationError = ErrorType<void>

    export const useEnterpriseSignChannelManagementPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseSignChannelManagementPageList>>, TError,{data: EnterpriseSignChannelManagementListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseSignChannelManagementPageList>>, {data: EnterpriseSignChannelManagementListRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseSignChannelManagementPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseSignChannelManagementPageList>>, TError, {data: EnterpriseSignChannelManagementListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁîµÂ≠êÁ≠æÂºÄÈÄöÂàóË°®(Ê∏†ÈÅìÈªòËÆ§ÂÄº:ÂêõÂ≠êÁ≠æ)
 */
export const enterpriseSignPageList = (
    signEnterpriseListRequest: SignEnterpriseListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterprise>(
      {url: `/boss/member/enterprise/enterpriseSignPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: signEnterpriseListRequest
    },
      );
    }
  


    export type EnterpriseSignPageListMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseSignPageList>>>
    export type EnterpriseSignPageListMutationBody = SignEnterpriseListRequest
    export type EnterpriseSignPageListMutationError = ErrorType<void>

    export const useEnterpriseSignPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseSignPageList>>, TError,{data: SignEnterpriseListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseSignPageList>>, {data: SignEnterpriseListRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseSignPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseSignPageList>>, TError, {data: SignEnterpriseListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏ö/‰æõÂ∫îÂïÜÂÆ°Ê†∏
 */
export const enterpriseTempAudit = (
    enterpriseAuditRequest: EnterpriseAuditRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/enterpriseTemp/enterpriseTempAudit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseAuditRequest
    },
      );
    }
  


    export type EnterpriseTempAuditMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseTempAudit>>>
    export type EnterpriseTempAuditMutationBody = EnterpriseAuditRequest
    export type EnterpriseTempAuditMutationError = ErrorType<void>

    export const useEnterpriseTempAudit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseTempAudit>>, TError,{data: EnterpriseAuditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseTempAudit>>, {data: EnterpriseAuditRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseTempAudit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseTempAudit>>, TError, {data: EnterpriseAuditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÁî≥ËØ∑ÂàóË°®
 */
export const enterpriseTempBuyerListPage = (
    enterpriseTempAuditPageRequest: EnterpriseTempAuditPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseTemp>(
      {url: `/boss/member/enterpriseTemp/enterpriseTempBuyerListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseTempAuditPageRequest
    },
      );
    }
  


    export type EnterpriseTempBuyerListPageMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseTempBuyerListPage>>>
    export type EnterpriseTempBuyerListPageMutationBody = EnterpriseTempAuditPageRequest
    export type EnterpriseTempBuyerListPageMutationError = ErrorType<void>

    export const useEnterpriseTempBuyerListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseTempBuyerListPage>>, TError,{data: EnterpriseTempAuditPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseTempBuyerListPage>>, {data: EnterpriseTempAuditPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseTempBuyerListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseTempBuyerListPage>>, TError, {data: EnterpriseTempAuditPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰æõÂ∫îÂïÜ‰ºÅ‰∏öÁî≥ËØ∑ÂàóË°®
 */
export const enterpriseTempSellerListPage = (
    enterpriseTempAuditPageRequest: EnterpriseTempAuditPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultEnterpriseTemp>(
      {url: `/boss/member/enterpriseTemp/enterpriseTempSellerListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enterpriseTempAuditPageRequest
    },
      );
    }
  


    export type EnterpriseTempSellerListPageMutationResult = NonNullable<Awaited<ReturnType<typeof enterpriseTempSellerListPage>>>
    export type EnterpriseTempSellerListPageMutationBody = EnterpriseTempAuditPageRequest
    export type EnterpriseTempSellerListPageMutationError = ErrorType<void>

    export const useEnterpriseTempSellerListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof enterpriseTempSellerListPage>>, TError,{data: EnterpriseTempAuditPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof enterpriseTempSellerListPage>>, {data: EnterpriseTempAuditPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  enterpriseTempSellerListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof enterpriseTempSellerListPage>>, TError, {data: EnterpriseTempAuditPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂÆ°Ê†∏‰ºÅ‰∏öÊü•ÁúãËØ¶ÊÉÖ
 */
export const enterpriseTempShowInfo = (
    id: number,
 signal?: AbortSignal
) => {
      return customInstance<ResultEnterpriseShowInfoDto>(
      {url: `/boss/member/enterpriseTemp/enterpriseTempShowInfo/${id}`, method: 'get', signal
    },
      );
    }
  

export const getEnterpriseTempShowInfoQueryKey = (id: number,) => [`/boss/member/enterpriseTemp/enterpriseTempShowInfo/${id}`];

    
export type EnterpriseTempShowInfoQueryResult = NonNullable<Awaited<ReturnType<typeof enterpriseTempShowInfo>>>
export type EnterpriseTempShowInfoQueryError = ErrorType<void>

export const useEnterpriseTempShowInfo = <TData = Awaited<ReturnType<typeof enterpriseTempShowInfo>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof enterpriseTempShowInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnterpriseTempShowInfoQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof enterpriseTempShowInfo>>> = ({ signal }) => enterpriseTempShowInfo(id, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof enterpriseTempShowInfo>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂØºÂá∫
 */
export const export1 = (
    params?: Export1Params,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/manage/platform/feedbackProblem/feedbackProblemExport`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExport1QueryKey = (params?: Export1Params,) => [`/boss/manage/platform/feedbackProblem/feedbackProblemExport`, ...(params ? [params]: [])];

    
export type Export1QueryResult = NonNullable<Awaited<ReturnType<typeof export1>>>
export type Export1QueryError = ErrorType<unknown>

export const useExport1 = <TData = Awaited<ReturnType<typeof export1>>, TError = ErrorType<unknown>>(
 params?: Export1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof export1>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExport1QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof export1>>> = ({ signal }) => export1(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof export1>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const queryPageList1 = (
    bossCommonQuery: BossCommonQuery,
 ) => {
      return customInstance<ResultIwubidaPageResultFeedbackProblem>(
      {url: `/boss/manage/platform/feedbackProblem/feedbackProblemPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bossCommonQuery
    },
      );
    }
  


    export type QueryPageList1MutationResult = NonNullable<Awaited<ReturnType<typeof queryPageList1>>>
    export type QueryPageList1MutationBody = BossCommonQuery
    export type QueryPageList1MutationError = ErrorType<void>

    export const useQueryPageList1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryPageList1>>, TError,{data: BossCommonQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryPageList1>>, {data: BossCommonQuery}> = (props) => {
          const {data} = props ?? {};

          return  queryPageList1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryPageList1>>, TError, {data: BossCommonQuery}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÈÄöÁî®ÂØºÂÖ•Ê®°Áâà‰∏ãËΩΩ
 * @summary ÈÄöÁî®ÂØºÂÖ•Ê®°Áâà‰∏ãËΩΩ
 */
export const templateDown = (
    params: TemplateDownParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/file/templateDown`, method: 'get',
        params, signal
    },
      );
    }
  

export const getTemplateDownQueryKey = (params: TemplateDownParams,) => [`/boss/file/templateDown`, ...(params ? [params]: [])];

    
export type TemplateDownQueryResult = NonNullable<Awaited<ReturnType<typeof templateDown>>>
export type TemplateDownQueryError = ErrorType<unknown>

export const useTemplateDown = <TData = Awaited<ReturnType<typeof templateDown>>, TError = ErrorType<unknown>>(
 params: TemplateDownParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof templateDown>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTemplateDownQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof templateDown>>> = ({ signal }) => templateDown(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof templateDown>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÈÄöÁî®ÂØºÂÖ•Êï∞ÊçÆËß£Êûê
 * @summary ÈÄöÁî®ÂØºÂÖ•Êï∞ÊçÆËß£Êûê
 */
export const templateUpload = (
    templateUploadBody: Blob,
    params: TemplateUploadParams,
 ) => {
      return customInstance<ResultObject>(
      {url: `/boss/file/templateUpload`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: templateUploadBody,
        params
    },
      );
    }
  


    export type TemplateUploadMutationResult = NonNullable<Awaited<ReturnType<typeof templateUpload>>>
    export type TemplateUploadMutationBody = Blob
    export type TemplateUploadMutationError = ErrorType<void>

    export const useTemplateUpload = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof templateUpload>>, TError,{data: Blob;params: TemplateUploadParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof templateUpload>>, {data: Blob;params: TemplateUploadParams}> = (props) => {
          const {data,params} = props ?? {};

          return  templateUpload(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof templateUpload>>, TError, {data: Blob;params: TemplateUploadParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÈÖçÁΩÆÂàóË°®
 */
export const homeCategoryList = (
    homeCategoryConfigListRequest: HomeCategoryConfigListRequest,
 ) => {
      return customInstance<JsonListResultCategoryLayoutExtVO>(
      {url: `/boss/home/category/homeCategoryList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: homeCategoryConfigListRequest
    },
      );
    }
  


    export type HomeCategoryListMutationResult = NonNullable<Awaited<ReturnType<typeof homeCategoryList>>>
    export type HomeCategoryListMutationBody = HomeCategoryConfigListRequest
    export type HomeCategoryListMutationError = ErrorType<void>

    export const useHomeCategoryList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof homeCategoryList>>, TError,{data: HomeCategoryConfigListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof homeCategoryList>>, {data: HomeCategoryConfigListRequest}> = (props) => {
          const {data} = props ?? {};

          return  homeCategoryList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof homeCategoryList>>, TError, {data: HomeCategoryConfigListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÊ†ë
 */
export const homeCategoryTree = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultListHomeCategoryTreeVO>(
      {url: `/boss/home/category/homeCategoryTree`, method: 'get', signal
    },
      );
    }
  

export const getHomeCategoryTreeQueryKey = () => [`/boss/home/category/homeCategoryTree`];

    
export type HomeCategoryTreeQueryResult = NonNullable<Awaited<ReturnType<typeof homeCategoryTree>>>
export type HomeCategoryTreeQueryError = ErrorType<void>

export const useHomeCategoryTree = <TData = Awaited<ReturnType<typeof homeCategoryTree>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof homeCategoryTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHomeCategoryTreeQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeCategoryTree>>> = ({ signal }) => homeCategoryTree(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof homeCategoryTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ª‰øùÂ≠òÁªëÂÆöÁ±ªÁõÆ
 */
export const saveBindCategory = (
    saveBindCategoryRequest: SaveBindCategoryRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/saveBindCategory`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: saveBindCategoryRequest
    },
      );
    }
  


    export type SaveBindCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof saveBindCategory>>>
    export type SaveBindCategoryMutationBody = SaveBindCategoryRequest
    export type SaveBindCategoryMutationError = ErrorType<void>

    export const useSaveBindCategory = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveBindCategory>>, TError,{data: SaveBindCategoryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveBindCategory>>, {data: SaveBindCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveBindCategory(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveBindCategory>>, TError, {data: SaveBindCategoryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ª‰øùÂ≠òÈÖçÁΩÆ
 */
export const saveCategoryLayout = (
    bossCategoryLayoutRequest: BossCategoryLayoutRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/saveCategoryLayout`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bossCategoryLayoutRequest
    },
      );
    }
  


    export type SaveCategoryLayoutMutationResult = NonNullable<Awaited<ReturnType<typeof saveCategoryLayout>>>
    export type SaveCategoryLayoutMutationBody = BossCategoryLayoutRequest
    export type SaveCategoryLayoutMutationError = ErrorType<void>

    export const useSaveCategoryLayout = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveCategoryLayout>>, TError,{data: BossCategoryLayoutRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveCategoryLayout>>, {data: BossCategoryLayoutRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveCategoryLayout(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveCategoryLayout>>, TError, {data: BossCategoryLayoutRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÊéíÂ∫è(‰∏ãÁßª)
 */
export const homeCategorySortDown = (
    params?: HomeCategorySortDownParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/sortDown`, method: 'get',
        params, signal
    },
      );
    }
  

export const getHomeCategorySortDownQueryKey = (params?: HomeCategorySortDownParams,) => [`/boss/home/category/sortDown`, ...(params ? [params]: [])];

    
export type HomeCategorySortDownQueryResult = NonNullable<Awaited<ReturnType<typeof homeCategorySortDown>>>
export type HomeCategorySortDownQueryError = ErrorType<void>

export const useHomeCategorySortDown = <TData = Awaited<ReturnType<typeof homeCategorySortDown>>, TError = ErrorType<void>>(
 params?: HomeCategorySortDownParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof homeCategorySortDown>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHomeCategorySortDownQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeCategorySortDown>>> = ({ signal }) => homeCategorySortDown(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof homeCategorySortDown>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÊéíÂ∫è(ÁΩÆÈ°∂)
 */
export const homeCategorySortTop = (
    params?: HomeCategorySortTopParams,
 signal?: AbortSignal
) => {
      return customInstance<JsonResult>(
      {url: `/boss/home/category/sortTop`, method: 'get',
        params, signal
    },
      );
    }
  

export const getHomeCategorySortTopQueryKey = (params?: HomeCategorySortTopParams,) => [`/boss/home/category/sortTop`, ...(params ? [params]: [])];

    
export type HomeCategorySortTopQueryResult = NonNullable<Awaited<ReturnType<typeof homeCategorySortTop>>>
export type HomeCategorySortTopQueryError = ErrorType<void>

export const useHomeCategorySortTop = <TData = Awaited<ReturnType<typeof homeCategorySortTop>>, TError = ErrorType<void>>(
 params?: HomeCategorySortTopParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof homeCategorySortTop>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHomeCategorySortTopQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeCategorySortTop>>> = ({ signal }) => homeCategorySortTop(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof homeCategorySortTop>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÊéíÂ∫è(‰∏äÁßª)
 */
export const homeCategorySortUp = (
    params?: HomeCategorySortUpParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/sortUp`, method: 'get',
        params, signal
    },
      );
    }
  

export const getHomeCategorySortUpQueryKey = (params?: HomeCategorySortUpParams,) => [`/boss/home/category/sortUp`, ...(params ? [params]: [])];

    
export type HomeCategorySortUpQueryResult = NonNullable<Awaited<ReturnType<typeof homeCategorySortUp>>>
export type HomeCategorySortUpQueryError = ErrorType<void>

export const useHomeCategorySortUp = <TData = Awaited<ReturnType<typeof homeCategorySortUp>>, TError = ErrorType<void>>(
 params?: HomeCategorySortUpParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof homeCategorySortUp>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHomeCategorySortUpQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof homeCategorySortUp>>> = ({ signal }) => homeCategorySortUp(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof homeCategorySortUp>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÈÖçÁΩÆÂêØÁî®
 */
export const startHomeCategory = (
    params?: StartHomeCategoryParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/startHomeCategory`, method: 'get',
        params, signal
    },
      );
    }
  

export const getStartHomeCategoryQueryKey = (params?: StartHomeCategoryParams,) => [`/boss/home/category/startHomeCategory`, ...(params ? [params]: [])];

    
export type StartHomeCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof startHomeCategory>>>
export type StartHomeCategoryQueryError = ErrorType<void>

export const useStartHomeCategory = <TData = Awaited<ReturnType<typeof startHomeCategory>>, TError = ErrorType<void>>(
 params?: StartHomeCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof startHomeCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStartHomeCategoryQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof startHomeCategory>>> = ({ signal }) => startHomeCategory(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof startHomeCategory>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÈÖçÁΩÆÂÅúÁî®
 */
export const stopHomeCategory = (
    params?: StopHomeCategoryParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/home/category/stopHomeCategory`, method: 'get',
        params, signal
    },
      );
    }
  

export const getStopHomeCategoryQueryKey = (params?: StopHomeCategoryParams,) => [`/boss/home/category/stopHomeCategory`, ...(params ? [params]: [])];

    
export type StopHomeCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof stopHomeCategory>>>
export type StopHomeCategoryQueryError = ErrorType<void>

export const useStopHomeCategory = <TData = Awaited<ReturnType<typeof stopHomeCategory>>, TError = ErrorType<void>>(
 params?: StopHomeCategoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof stopHomeCategory>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStopHomeCategoryQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof stopHomeCategory>>> = ({ signal }) => stopHomeCategory(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof stopHomeCategory>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÁÉ≠Èó®ÂàÜÁ±ªÁªëÂÆöÁ±ªÁõÆÈ°µÈù¢Êï∞ÊçÆ
 */
export const toBindCategoryPage = (
    params?: ToBindCategoryPageParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBindCategoryPageVO>(
      {url: `/boss/home/category/toBindCategoryPage`, method: 'get',
        params, signal
    },
      );
    }
  

export const getToBindCategoryPageQueryKey = (params?: ToBindCategoryPageParams,) => [`/boss/home/category/toBindCategoryPage`, ...(params ? [params]: [])];

    
export type ToBindCategoryPageQueryResult = NonNullable<Awaited<ReturnType<typeof toBindCategoryPage>>>
export type ToBindCategoryPageQueryError = ErrorType<void>

export const useToBindCategoryPage = <TData = Awaited<ReturnType<typeof toBindCategoryPage>>, TError = ErrorType<void>>(
 params?: ToBindCategoryPageParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof toBindCategoryPage>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getToBindCategoryPageQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof toBindCategoryPage>>> = ({ signal }) => toBindCategoryPage(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof toBindCategoryPage>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËØ¢‰ª∑ÂçïËØ¶ÊÉÖ(‰º†id)
 */
export const inquiryInfo = (
    id: number,
 ) => {
      return customInstance<ResultInquiryManagerInfoDto>(
      {url: `/boss/member/inquiry/inquiryInfo/${id}`, method: 'post'
    },
      );
    }
  


    export type InquiryInfoMutationResult = NonNullable<Awaited<ReturnType<typeof inquiryInfo>>>
    
    export type InquiryInfoMutationError = ErrorType<void>

    export const useInquiryInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inquiryInfo>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inquiryInfo>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  inquiryInfo(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof inquiryInfo>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ËØ¢‰ª∑ÂçïÂàóË°®ÂØºÂá∫
 */
export const inquiryPageExport = (
    params?: InquiryPageExportParams,
 signal?: AbortSignal
) => {
      return customInstance<FileSystemResource>(
      {url: `/boss/member/inquiry/inquiryPageExport`, method: 'get',
        params, signal
    },
      );
    }
  

export const getInquiryPageExportQueryKey = (params?: InquiryPageExportParams,) => [`/boss/member/inquiry/inquiryPageExport`, ...(params ? [params]: [])];

    
export type InquiryPageExportQueryResult = NonNullable<Awaited<ReturnType<typeof inquiryPageExport>>>
export type InquiryPageExportQueryError = ErrorType<void>

export const useInquiryPageExport = <TData = Awaited<ReturnType<typeof inquiryPageExport>>, TError = ErrorType<void>>(
 params?: InquiryPageExportParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof inquiryPageExport>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryPageExportQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof inquiryPageExport>>> = ({ signal }) => inquiryPageExport(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof inquiryPageExport>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËØ¢‰ª∑ÂçïÂàóË°®
 */
export const inquiryPageList = (
    inquiryPageRequest: InquiryPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultInquiryInfoDto>(
      {url: `/boss/member/inquiry/inquiryPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: inquiryPageRequest
    },
      );
    }
  


    export type InquiryPageListMutationResult = NonNullable<Awaited<ReturnType<typeof inquiryPageList>>>
    export type InquiryPageListMutationBody = InquiryPageRequest
    export type InquiryPageListMutationError = ErrorType<void>

    export const useInquiryPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inquiryPageList>>, TError,{data: InquiryPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inquiryPageList>>, {data: InquiryPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  inquiryPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof inquiryPageList>>, TError, {data: InquiryPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary test
 */
export const test = (
    
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/member/inquiry/test`, method: 'get', signal
    },
      );
    }
  

export const getTestQueryKey = () => [`/boss/member/inquiry/test`];

    
export type TestQueryResult = NonNullable<Awaited<ReturnType<typeof test>>>
export type TestQueryError = ErrorType<unknown>

export const useTest = <TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof test>>> = ({ signal }) => test(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof test>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂèëÁ•®ËÆ∞ÂΩï-ÂàÜÈ°µÊü•ËØ¢
 */
export const invoiceRecordPageQuery = (
    invoiceRecordPageQueryRequest: InvoiceRecordPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultInvoiceRecord>(
      {url: `/boss/payment/invoiceRecord/invoiceRecordPageQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: invoiceRecordPageQueryRequest
    },
      );
    }
  


    export type InvoiceRecordPageQueryMutationResult = NonNullable<Awaited<ReturnType<typeof invoiceRecordPageQuery>>>
    export type InvoiceRecordPageQueryMutationBody = InvoiceRecordPageQueryRequest
    export type InvoiceRecordPageQueryMutationError = ErrorType<void>

    export const useInvoiceRecordPageQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invoiceRecordPageQuery>>, TError,{data: InvoiceRecordPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof invoiceRecordPageQuery>>, {data: InvoiceRecordPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  invoiceRecordPageQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof invoiceRecordPageQuery>>, TError, {data: InvoiceRecordPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈïøÂçè,ÈïøÊúüÂêà‰ΩúÂÆ°Ê†∏
 */
export const longAgreementAudit = (
    longAgreementAuditRequest: LongAgreementAuditRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/longAgreement/longAgreementAudit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: longAgreementAuditRequest
    },
      );
    }
  


    export type LongAgreementAuditMutationResult = NonNullable<Awaited<ReturnType<typeof longAgreementAudit>>>
    export type LongAgreementAuditMutationBody = LongAgreementAuditRequest
    export type LongAgreementAuditMutationError = ErrorType<void>

    export const useLongAgreementAudit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof longAgreementAudit>>, TError,{data: LongAgreementAuditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof longAgreementAudit>>, {data: LongAgreementAuditRequest}> = (props) => {
          const {data} = props ?? {};

          return  longAgreementAudit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof longAgreementAudit>>, TError, {data: LongAgreementAuditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈïøÂçè ÈïøÊúüÂêà‰ΩúËØ¶ÊÉÖ
 */
export const longAgreementInfo = (
    id: number,
 ) => {
      return customInstance<ResultLongAgreementVo>(
      {url: `/boss/member/longAgreement/longAgreementInfo/${id}`, method: 'post'
    },
      );
    }
  


    export type LongAgreementInfoMutationResult = NonNullable<Awaited<ReturnType<typeof longAgreementInfo>>>
    
    export type LongAgreementInfoMutationError = ErrorType<void>

    export const useLongAgreementInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof longAgreementInfo>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof longAgreementInfo>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  longAgreementInfo(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof longAgreementInfo>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÈïøÂçè,ÈïøÊúüÂêà‰ΩúÂàóË°®
 */
export const longAgreementPageList = (
    longAgreementPageRequest: LongAgreementPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultLongAgreementDto>(
      {url: `/boss/member/longAgreement/longAgreementPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: longAgreementPageRequest
    },
      );
    }
  


    export type LongAgreementPageListMutationResult = NonNullable<Awaited<ReturnType<typeof longAgreementPageList>>>
    export type LongAgreementPageListMutationBody = LongAgreementPageRequest
    export type LongAgreementPageListMutationError = ErrorType<void>

    export const useLongAgreementPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof longAgreementPageList>>, TError,{data: LongAgreementPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof longAgreementPageList>>, {data: LongAgreementPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  longAgreementPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof longAgreementPageList>>, TError, {data: LongAgreementPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÁî≥ËØ∑ÂàóË°®-Êñ∞Â¢û‰ºÅ‰∏ö-Ë∂ÖÁÆ°ÂàóË°®| ‰ºÅ‰∏öÂëòÂ∑•,ÂÖ≥ËÅîÁé∞Êúâ(Êú™ÂÖ≥ËÅî‰ªª‰Ωï‰ºÅ‰∏öÁöÑ‰ºöÂëò)
 */
export const memberAdminList = (
    memberAdminListPageRequest: MemberAdminListPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultMember>(
      {url: `/boss/member/member/memberAdminList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberAdminListPageRequest
    },
      );
    }
  


    export type MemberAdminListMutationResult = NonNullable<Awaited<ReturnType<typeof memberAdminList>>>
    export type MemberAdminListMutationBody = MemberAdminListPageRequest
    export type MemberAdminListMutationError = ErrorType<void>

    export const useMemberAdminList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberAdminList>>, TError,{data: MemberAdminListPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberAdminList>>, {data: MemberAdminListPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberAdminList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberAdminList>>, TError, {data: MemberAdminListPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºöÂëòÁ¶ÅÁî®/ÂêØÁî®
 */
export const memberDisableJson = (
    id: number,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/member/member/memberDisableJson/${id}`, method: 'post'
    },
      );
    }
  


    export type MemberDisableJsonMutationResult = NonNullable<Awaited<ReturnType<typeof memberDisableJson>>>
    
    export type MemberDisableJsonMutationError = ErrorType<void>

    export const useMemberDisableJson = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberDisableJson>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberDisableJson>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  memberDisableJson(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberDisableJson>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÂëòÂ∑•ÁÆ°ÁêÜ ÂëòÂ∑•Êñ∞Â¢û
 */
export const memberEmployeeAdd = (
    memberEmployeeAddRequest: MemberEmployeeAddRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/member/memberEmployeeAdd`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberEmployeeAddRequest
    },
      );
    }
  


    export type MemberEmployeeAddMutationResult = NonNullable<Awaited<ReturnType<typeof memberEmployeeAdd>>>
    export type MemberEmployeeAddMutationBody = MemberEmployeeAddRequest
    export type MemberEmployeeAddMutationError = ErrorType<void>

    export const useMemberEmployeeAdd = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberEmployeeAdd>>, TError,{data: MemberEmployeeAddRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberEmployeeAdd>>, {data: MemberEmployeeAddRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberEmployeeAdd(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberEmployeeAdd>>, TError, {data: MemberEmployeeAddRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÂëòÂ∑•ÁÆ°ÁêÜ ÂëòÂ∑•-ÂÖ≥ËÅîÁé∞ÊúâË¥¶Âè∑
 */
export const memberEmployeeAssociate = (
    memberEmployeeAssociateRequest: MemberEmployeeAssociateRequest,
 ) => {
      return customInstance<Result>(
      {url: `/boss/member/member/memberEmployeeAssociate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberEmployeeAssociateRequest
    },
      );
    }
  


    export type MemberEmployeeAssociateMutationResult = NonNullable<Awaited<ReturnType<typeof memberEmployeeAssociate>>>
    export type MemberEmployeeAssociateMutationBody = MemberEmployeeAssociateRequest
    export type MemberEmployeeAssociateMutationError = ErrorType<void>

    export const useMemberEmployeeAssociate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberEmployeeAssociate>>, TError,{data: MemberEmployeeAssociateRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberEmployeeAssociate>>, {data: MemberEmployeeAssociateRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberEmployeeAssociate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberEmployeeAssociate>>, TError, {data: MemberEmployeeAssociateRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÂëòÂ∑•ÁÆ°ÁêÜÂàóË°®
 */
export const memberEmployeeList = (
    memberEmployeePageRequest: MemberEmployeePageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultMemberEmployeePageVo>(
      {url: `/boss/member/member/memberEmployeeList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberEmployeePageRequest
    },
      );
    }
  


    export type MemberEmployeeListMutationResult = NonNullable<Awaited<ReturnType<typeof memberEmployeeList>>>
    export type MemberEmployeeListMutationBody = MemberEmployeePageRequest
    export type MemberEmployeeListMutationError = ErrorType<void>

    export const useMemberEmployeeList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberEmployeeList>>, TError,{data: MemberEmployeePageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberEmployeeList>>, {data: MemberEmployeePageRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberEmployeeList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberEmployeeList>>, TError, {data: MemberEmployeePageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºöÂëòÂàóË°®
 */
export const memberPageList = (
    memberListRequest: MemberListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultMemberListVo>(
      {url: `/boss/member/member/memberPageList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberListRequest
    },
      );
    }
  


    export type MemberPageListMutationResult = NonNullable<Awaited<ReturnType<typeof memberPageList>>>
    export type MemberPageListMutationBody = MemberListRequest
    export type MemberPageListMutationError = ErrorType<void>

    export const useMemberPageList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberPageList>>, TError,{data: MemberListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberPageList>>, {data: MemberListRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberPageList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberPageList>>, TError, {data: MemberListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ºÅ‰∏öÂëòÂ∑•ÁÆ°ÁêÜ ÂëòÂ∑•ËßíËâ≤Á±ªÂûã
 */
export const memberRoleType = (
    memberRoleTypeRequest: MemberRoleTypeRequest,
 ) => {
      return customInstance<ResultListMemberRoleTypeVo>(
      {url: `/boss/member/member/memberRoleType`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: memberRoleTypeRequest
    },
      );
    }
  


    export type MemberRoleTypeMutationResult = NonNullable<Awaited<ReturnType<typeof memberRoleType>>>
    export type MemberRoleTypeMutationBody = MemberRoleTypeRequest
    export type MemberRoleTypeMutationError = ErrorType<void>

    export const useMemberRoleType = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberRoleType>>, TError,{data: MemberRoleTypeRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberRoleType>>, {data: MemberRoleTypeRequest}> = (props) => {
          const {data} = props ?? {};

          return  memberRoleType(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberRoleType>>, TError, {data: MemberRoleTypeRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂëòÂ∑•Ëß£Èô§ÁªëÂÆö
 */
export const memberUnbind = (
    id: number,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/member/member/memberUnbind/${id}`, method: 'post'
    },
      );
    }
  


    export type MemberUnbindMutationResult = NonNullable<Awaited<ReturnType<typeof memberUnbind>>>
    
    export type MemberUnbindMutationError = ErrorType<void>

    export const useMemberUnbind = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof memberUnbind>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof memberUnbind>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  memberUnbind(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof memberUnbind>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ªòÊ¨æÂçïÊü•ËØ¢-ÂàÜÈ°µÊü•ËØ¢
 */
export const paymentOrderPageQuery = (
    paymentOrderPageQueryRequest: PaymentOrderPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultPaymentOrder>(
      {url: `/boss/payment/paymentOrder/paymentOrderPageQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: paymentOrderPageQueryRequest
    },
      );
    }
  


    export type PaymentOrderPageQueryMutationResult = NonNullable<Awaited<ReturnType<typeof paymentOrderPageQuery>>>
    export type PaymentOrderPageQueryMutationBody = PaymentOrderPageQueryRequest
    export type PaymentOrderPageQueryMutationError = ErrorType<void>

    export const usePaymentOrderPageQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentOrderPageQuery>>, TError,{data: PaymentOrderPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentOrderPageQuery>>, {data: PaymentOrderPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  paymentOrderPageQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof paymentOrderPageQuery>>, TError, {data: PaymentOrderPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰ª∑Ê†ºË°åÊÉÖÊ®°Êùø‰∏ãËΩΩ
 */
export const downloadTemplate = (
    
 ) => {
      return customInstance<void>(
      {url: `/boss/priceQuotations/priceQuotation/downloadTemplate`, method: 'post'
    },
      );
    }
  


    export type DownloadTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof downloadTemplate>>>
    
    export type DownloadTemplateMutationError = ErrorType<unknown>

    export const useDownloadTemplate = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof downloadTemplate>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof downloadTemplate>>, TVariables> = () => {
          

          return  downloadTemplate()
        }

        

      return useMutation<Awaited<ReturnType<typeof downloadTemplate>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂØºÂÖ•
 */
export const importFile = (
    importFileBody: Blob,
 ) => {
      return customInstance<JsonResult>(
      {url: `/boss/priceQuotations/priceQuotation/importJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: importFileBody
    },
      );
    }
  


    export type ImportFileMutationResult = NonNullable<Awaited<ReturnType<typeof importFile>>>
    export type ImportFileMutationBody = Blob
    export type ImportFileMutationError = ErrorType<void>

    export const useImportFile = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importFile>>, TError,{data: Blob}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importFile>>, {data: Blob}> = (props) => {
          const {data} = props ?? {};

          return  importFile(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof importFile>>, TError, {data: Blob}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂàÜÈ°µÂ§öÊù°‰ª∂Êü•ËØ¢
 */
export const list1 = (
    bossCommonQuery0: BossCommonQuery0,
 ) => {
      return customInstance<ResultIwubidaPageResultPriceQuotation>(
      {url: `/boss/priceQuotations/priceQuotation/listJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bossCommonQuery0
    },
      );
    }
  


    export type List1MutationResult = NonNullable<Awaited<ReturnType<typeof list1>>>
    export type List1MutationBody = BossCommonQuery0
    export type List1MutationError = ErrorType<void>

    export const useList1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof list1>>, TError,{data: BossCommonQuery0}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof list1>>, {data: BossCommonQuery0}> = (props) => {
          const {data} = props ?? {};

          return  list1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof list1>>, TError, {data: BossCommonQuery0}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âà†Èô§
 */
export const deleteByIds1 = (
    bossCommonQuery: BossCommonQuery,
 ) => {
      return customInstance<Result>(
      {url: `/boss/priceQuotations/priceQuotation/priceQuotationDeleteByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bossCommonQuery
    },
      );
    }
  


    export type DeleteByIds1MutationResult = NonNullable<Awaited<ReturnType<typeof deleteByIds1>>>
    export type DeleteByIds1MutationBody = BossCommonQuery
    export type DeleteByIds1MutationError = ErrorType<void>

    export const useDeleteByIds1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteByIds1>>, TError,{data: BossCommonQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteByIds1>>, {data: BossCommonQuery}> = (props) => {
          const {data} = props ?? {};

          return  deleteByIds1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteByIds1>>, TError, {data: BossCommonQuery}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁºñËæë
 */
export const update1 = (
    priceQuotationUpdateReq: PriceQuotationUpdateReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/priceQuotations/priceQuotation/saveJson`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: priceQuotationUpdateReq
    },
      );
    }
  


    export type Update1MutationResult = NonNullable<Awaited<ReturnType<typeof update1>>>
    export type Update1MutationBody = PriceQuotationUpdateReq
    export type Update1MutationError = ErrorType<void>

    export const useUpdate1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update1>>, TError,{data: PriceQuotationUpdateReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof update1>>, {data: PriceQuotationUpdateReq}> = (props) => {
          const {data} = props ?? {};

          return  update1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof update1>>, TError, {data: PriceQuotationUpdateReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®ÂÆ°Ê†∏
 */
export const storeQualificationAudit = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/category/audit/storeQualificationAudit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type StoreQualificationAuditMutationResult = NonNullable<Awaited<ReturnType<typeof storeQualificationAudit>>>
    export type StoreQualificationAuditMutationBody = DmsApiToken
    export type StoreQualificationAuditMutationError = ErrorType<void>

    export const useStoreQualificationAudit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storeQualificationAudit>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storeQualificationAudit>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  storeQualificationAudit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof storeQualificationAudit>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®Áî≥ËØ∑ÂàóË°®
 */
export const storeQualificationAuditPage = (
    basicPageQuery: BasicPageQuery,
 ) => {
      return customInstance<ResultPageInfoStoreQualificationAuditPageResultDto>(
      {url: `/boss/store/qualification/category/audit/storeQualificationAuditPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicPageQuery
    },
      );
    }
  


    export type StoreQualificationAuditPageMutationResult = NonNullable<Awaited<ReturnType<typeof storeQualificationAuditPage>>>
    export type StoreQualificationAuditPageMutationBody = BasicPageQuery
    export type StoreQualificationAuditPageMutationError = ErrorType<void>

    export const useStoreQualificationAuditPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storeQualificationAuditPage>>, TError,{data: BasicPageQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storeQualificationAuditPage>>, {data: BasicPageQuery}> = (props) => {
          const {data} = props ?? {};

          return  storeQualificationAuditPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof storeQualificationAuditPage>>, TError, {data: BasicPageQuery}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®Êü•Áúã
 */
export const storeQualificationAuditView = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultStoreQualificationAuditViewResultDto>(
      {url: `/boss/store/qualification/category/audit/storeQualificationAuditView`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type StoreQualificationAuditViewMutationResult = NonNullable<Awaited<ReturnType<typeof storeQualificationAuditView>>>
    export type StoreQualificationAuditViewMutationBody = DmsApiToken
    export type StoreQualificationAuditViewMutationError = ErrorType<void>

    export const useStoreQualificationAuditView = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storeQualificationAuditView>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storeQualificationAuditView>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  storeQualificationAuditView(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof storeQualificationAuditView>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®ÂàÜÁ±ªÊñ∞Â¢û
 */
export const qualificationCategoryAdd = (
    qualificationCategoryAddRequest: QualificationCategoryAddRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/category/qualificationCategoryAdd`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationCategoryAddRequest
    },
      );
    }
  


    export type QualificationCategoryAddMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationCategoryAdd>>>
    export type QualificationCategoryAddMutationBody = QualificationCategoryAddRequest
    export type QualificationCategoryAddMutationError = ErrorType<void>

    export const useQualificationCategoryAdd = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationCategoryAdd>>, TError,{data: QualificationCategoryAddRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationCategoryAdd>>, {data: QualificationCategoryAddRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationCategoryAdd(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationCategoryAdd>>, TError, {data: QualificationCategoryAddRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®ÂàÜÁ±ª‰øÆÊîπ
 */
export const qualificationCategoryEdit = (
    qualificationCategoryEditRequest: QualificationCategoryEditRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/category/qualificationCategoryEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationCategoryEditRequest
    },
      );
    }
  


    export type QualificationCategoryEditMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationCategoryEdit>>>
    export type QualificationCategoryEditMutationBody = QualificationCategoryEditRequest
    export type QualificationCategoryEditMutationError = ErrorType<void>

    export const useQualificationCategoryEdit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationCategoryEdit>>, TError,{data: QualificationCategoryEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationCategoryEdit>>, {data: QualificationCategoryEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationCategoryEdit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationCategoryEdit>>, TError, {data: QualificationCategoryEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ËµÑË¥®ÂàÜÁ±ªÂàóË°®Êü•ËØ¢
 */
export const qualificationCategoryList = (
    qualificationCategoryListRequest: QualificationCategoryListRequest,
 ) => {
      return customInstance<ResultPageInfoQualificationCategoryDto>(
      {url: `/boss/store/qualification/category/qualificationCategoryList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationCategoryListRequest
    },
      );
    }
  


    export type QualificationCategoryListMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationCategoryList>>>
    export type QualificationCategoryListMutationBody = QualificationCategoryListRequest
    export type QualificationCategoryListMutationError = ErrorType<void>

    export const useQualificationCategoryList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationCategoryList>>, TError,{data: QualificationCategoryListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationCategoryList>>, {data: QualificationCategoryListRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationCategoryList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationCategoryList>>, TError, {data: QualificationCategoryListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁâπÊÆäËµÑË¥®ÂàÜÁ±ªÂà†Èô§
 */
export const qualificationCategoryRemove = (
    qualificationCategoryRemoveRequest: QualificationCategoryRemoveRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/category/qualificationCategoryRemove`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationCategoryRemoveRequest
    },
      );
    }
  


    export type QualificationCategoryRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationCategoryRemove>>>
    export type QualificationCategoryRemoveMutationBody = QualificationCategoryRemoveRequest
    export type QualificationCategoryRemoveMutationError = ErrorType<void>

    export const useQualificationCategoryRemove = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationCategoryRemove>>, TError,{data: QualificationCategoryRemoveRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationCategoryRemove>>, {data: QualificationCategoryRemoveRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationCategoryRemove(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationCategoryRemove>>, TError, {data: QualificationCategoryRemoveRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êñ∞Â¢ûËµÑË¥®
 */
export const qualificationAdd = (
    qualificationAddRequest: QualificationAddRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/qualificationAdd`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationAddRequest
    },
      );
    }
  


    export type QualificationAddMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationAdd>>>
    export type QualificationAddMutationBody = QualificationAddRequest
    export type QualificationAddMutationError = ErrorType<void>

    export const useQualificationAdd = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationAdd>>, TError,{data: QualificationAddRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationAdd>>, {data: QualificationAddRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationAdd(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationAdd>>, TError, {data: QualificationAddRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁºñËæëËµÑË¥®
 */
export const qualificationEdit = (
    qualificationEditRequest: QualificationEditRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/qualificationEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationEditRequest
    },
      );
    }
  


    export type QualificationEditMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationEdit>>>
    export type QualificationEditMutationBody = QualificationEditRequest
    export type QualificationEditMutationError = ErrorType<void>

    export const useQualificationEdit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationEdit>>, TError,{data: QualificationEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationEdit>>, {data: QualificationEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationEdit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationEdit>>, TError, {data: QualificationEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ËµÑË¥®ÂàóË°®Êü•ËØ¢
 */
export const qualificationList = (
    qualificationListRequest: QualificationListRequest,
 ) => {
      return customInstance<ResultPageInfoQualificationDto>(
      {url: `/boss/store/qualification/qualificationList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationListRequest
    },
      );
    }
  

export const getQualificationListQueryKey = (qualificationListRequest: QualificationListRequest,) => [`/boss/store/qualification/qualificationList`, qualificationListRequest];

    
export type QualificationListQueryResult = NonNullable<Awaited<ReturnType<typeof qualificationList>>>
export type QualificationListQueryError = ErrorType<void>

export const useQualificationList = <TData = Awaited<ReturnType<typeof qualificationList>>, TError = ErrorType<void>>(
 qualificationListRequest: QualificationListRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof qualificationList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQualificationListQueryKey(qualificationListRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof qualificationList>>> = () => qualificationList(qualificationListRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof qualificationList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Âà†Èô§ËµÑË¥®
 */
export const qualificationRemove = (
    qualificationRemoveRequest: QualificationRemoveRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/qualification/qualificationRemove`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationRemoveRequest
    },
      );
    }
  


    export type QualificationRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof qualificationRemove>>>
    export type QualificationRemoveMutationBody = QualificationRemoveRequest
    export type QualificationRemoveMutationError = ErrorType<void>

    export const useQualificationRemove = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof qualificationRemove>>, TError,{data: QualificationRemoveRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof qualificationRemove>>, {data: QualificationRemoveRequest}> = (props) => {
          const {data} = props ?? {};

          return  qualificationRemove(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof qualificationRemove>>, TError, {data: QualificationRemoveRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êü•ÁúãËµÑË¥®
 */
export const qualificationView = (
    qualificationRemoveRequest: QualificationRemoveRequest,
 ) => {
      return customInstance<ResultExtendQualificationDto>(
      {url: `/boss/store/qualification/qualificationView`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: qualificationRemoveRequest
    },
      );
    }
  

export const getQualificationViewQueryKey = (qualificationRemoveRequest: QualificationRemoveRequest,) => [`/boss/store/qualification/qualificationView`, qualificationRemoveRequest];

    
export type QualificationViewQueryResult = NonNullable<Awaited<ReturnType<typeof qualificationView>>>
export type QualificationViewQueryError = ErrorType<void>

export const useQualificationView = <TData = Awaited<ReturnType<typeof qualificationView>>, TError = ErrorType<void>>(
 qualificationRemoveRequest: QualificationRemoveRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof qualificationView>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQualificationViewQueryKey(qualificationRemoveRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof qualificationView>>> = () => qualificationView(qualificationRemoveRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof qualificationView>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ËßíËâ≤ÂàóË°®
 */
export const rbacRoleList = (
    
 ) => {
      return customInstance<ResultListUcRbacRoleDto>(
      {url: `/boss/member/rbac/rbacRoleList`, method: 'post'
    },
      );
    }
  


    export type RbacRoleListMutationResult = NonNullable<Awaited<ReturnType<typeof rbacRoleList>>>
    
    export type RbacRoleListMutationError = ErrorType<void>

    export const useRbacRoleList = <TError = ErrorType<void>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rbacRoleList>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rbacRoleList>>, TVariables> = () => {
          

          return  rbacRoleList()
        }

        

      return useMutation<Awaited<ReturnType<typeof rbacRoleList>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÂõæÂΩ¢È™åËØÅÁ†Å
 */
export const captchaAdmin = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultCaptchaResponse>(
      {url: `/boss/portal/session/captcha`, method: 'get', signal
    },
      );
    }
  

export const getCaptchaAdminQueryKey = () => [`/boss/portal/session/captcha`];

    
export type CaptchaAdminQueryResult = NonNullable<Awaited<ReturnType<typeof captchaAdmin>>>
export type CaptchaAdminQueryError = ErrorType<void>

export const useCaptchaAdmin = <TData = Awaited<ReturnType<typeof captchaAdmin>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof captchaAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCaptchaAdminQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof captchaAdmin>>> = ({ signal }) => captchaAdmin(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof captchaAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂõæÂΩ¢È™åËØÅÁ†Å-È™åËØÅ
 */
export const captchaVertifyAdmin = (
    captchaValidRequest: CaptchaValidRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/portal/session/captchaVertify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: captchaValidRequest
    },
      );
    }
  


    export type CaptchaVertifyAdminMutationResult = NonNullable<Awaited<ReturnType<typeof captchaVertifyAdmin>>>
    export type CaptchaVertifyAdminMutationBody = CaptchaValidRequest
    export type CaptchaVertifyAdminMutationError = ErrorType<void>

    export const useCaptchaVertifyAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof captchaVertifyAdmin>>, TError,{data: CaptchaValidRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof captchaVertifyAdmin>>, {data: CaptchaValidRequest}> = (props) => {
          const {data} = props ?? {};

          return  captchaVertifyAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof captchaVertifyAdmin>>, TError, {data: CaptchaValidRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁôªÂΩï
 */
export const createAdmin = (
    sessionCreateRequest: SessionCreateRequest,
 ) => {
      return customInstance<ResultLoginInfoResponse>(
      {url: `/boss/portal/session/create`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sessionCreateRequest
    },
      );
    }
  


    export type CreateAdminMutationResult = NonNullable<Awaited<ReturnType<typeof createAdmin>>>
    export type CreateAdminMutationBody = SessionCreateRequest
    export type CreateAdminMutationError = ErrorType<void>

    export const useCreateAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdmin>>, TError,{data: SessionCreateRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdmin>>, {data: SessionCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createAdmin>>, TError, {data: SessionCreateRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂøòËÆ∞ÂØÜÁ†Å
 * @summary ÂøòËÆ∞ÂØÜÁ†Å 
 */
export const resetPasswordAdmin = (
    forgetPwdEditRequest: ForgetPwdEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/portal/session/resetPassword`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: forgetPwdEditRequest
    },
      );
    }
  


    export type ResetPasswordAdminMutationResult = NonNullable<Awaited<ReturnType<typeof resetPasswordAdmin>>>
    export type ResetPasswordAdminMutationBody = ForgetPwdEditRequest
    export type ResetPasswordAdminMutationError = ErrorType<void>

    export const useResetPasswordAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPasswordAdmin>>, TError,{data: ForgetPwdEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPasswordAdmin>>, {data: ForgetPwdEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  resetPasswordAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof resetPasswordAdmin>>, TError, {data: ForgetPwdEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Á¨¨‰∏ÄÊ¨°ÁôªÂΩïÈáçÁΩÆÁôªÂΩïÂØÜÁ†Å
 */
export const resetPwdAdmin = (
    resetLoginPwdRequest: ResetLoginPwdRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/portal/session/resetPwd`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resetLoginPwdRequest
    },
      );
    }
  


    export type ResetPwdAdminMutationResult = NonNullable<Awaited<ReturnType<typeof resetPwdAdmin>>>
    export type ResetPwdAdminMutationBody = ResetLoginPwdRequest
    export type ResetPwdAdminMutationError = ErrorType<void>

    export const useResetPwdAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPwdAdmin>>, TError,{data: ResetLoginPwdRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPwdAdmin>>, {data: ResetLoginPwdRequest}> = (props) => {
          const {data} = props ?? {};

          return  resetPwdAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof resetPwdAdmin>>, TError, {data: ResetLoginPwdRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÁü≠‰ø°È™åËØÅÁ†Å
 */
export const sendValidCodeAdmin = (
    smsSendCodeRequest: SmsSendCodeRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/portal/session/sendValidCode`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: smsSendCodeRequest
    },
      );
    }
  


    export type SendValidCodeAdminMutationResult = NonNullable<Awaited<ReturnType<typeof sendValidCodeAdmin>>>
    export type SendValidCodeAdminMutationBody = SmsSendCodeRequest
    export type SendValidCodeAdminMutationError = ErrorType<void>

    export const useSendValidCodeAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendValidCodeAdmin>>, TError,{data: SmsSendCodeRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendValidCodeAdmin>>, {data: SmsSendCodeRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendValidCodeAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof sendValidCodeAdmin>>, TError, {data: SmsSendCodeRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁªìÁÆóÂçïÊü•ËØ¢-ÂàÜÈ°µÊü•ËØ¢
 */
export const settleOrderPageQuery = (
    settleOrderPageQueryRequest: SettleOrderPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSettleOrder>(
      {url: `/boss/payment/settleOrder/settleOrderPageQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: settleOrderPageQueryRequest
    },
      );
    }
  


    export type SettleOrderPageQueryMutationResult = NonNullable<Awaited<ReturnType<typeof settleOrderPageQuery>>>
    export type SettleOrderPageQueryMutationBody = SettleOrderPageQueryRequest
    export type SettleOrderPageQueryMutationError = ErrorType<void>

    export const useSettleOrderPageQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof settleOrderPageQuery>>, TError,{data: SettleOrderPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof settleOrderPageQuery>>, {data: SettleOrderPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  settleOrderPageQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof settleOrderPageQuery>>, TError, {data: SettleOrderPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary bossÂïÜÂìÅÈÄªËæëÂà†Èô§
 */
export const bossCommodityDelete = (
    commodityBossStatusVO: CommodityBossStatusVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossCommodityDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityBossStatusVO
    },
      );
    }
  


    export type BossCommodityDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bossCommodityDelete>>>
    export type BossCommodityDeleteMutationBody = CommodityBossStatusVO
    export type BossCommodityDeleteMutationError = ErrorType<void>

    export const useBossCommodityDelete = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossCommodityDelete>>, TError,{data: CommodityBossStatusVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossCommodityDelete>>, {data: CommodityBossStatusVO}> = (props) => {
          const {data} = props ?? {};

          return  bossCommodityDelete(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bossCommodityDelete>>, TError, {data: CommodityBossStatusVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary bossÂïÜÂìÅ‰∏ä‰∏ãÊû∂ÂèäËøùËßÑÁä∂ÊÄÅ‰øÆÊîπ
 */
export const bossCommodityPublishStatusUpdate = (
    commodityBossStatusVO: CommodityBossStatusVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossCommodityPublishStatusUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityBossStatusVO
    },
      );
    }
  


    export type BossCommodityPublishStatusUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof bossCommodityPublishStatusUpdate>>>
    export type BossCommodityPublishStatusUpdateMutationBody = CommodityBossStatusVO
    export type BossCommodityPublishStatusUpdateMutationError = ErrorType<void>

    export const useBossCommodityPublishStatusUpdate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossCommodityPublishStatusUpdate>>, TError,{data: CommodityBossStatusVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossCommodityPublishStatusUpdate>>, {data: CommodityBossStatusVO}> = (props) => {
          const {data} = props ?? {};

          return  bossCommodityPublishStatusUpdate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bossCommodityPublishStatusUpdate>>, TError, {data: CommodityBossStatusVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êñ∞Â¢ûÂïÜÂìÅ
 */
export const bossCreateCommodity = (
    commodityBossCreateVOReq: CommodityBossCreateVOReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossCreateCommodity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityBossCreateVOReq
    },
      );
    }
  


    export type BossCreateCommodityMutationResult = NonNullable<Awaited<ReturnType<typeof bossCreateCommodity>>>
    export type BossCreateCommodityMutationBody = CommodityBossCreateVOReq
    export type BossCreateCommodityMutationError = ErrorType<void>

    export const useBossCreateCommodity = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossCreateCommodity>>, TError,{data: CommodityBossCreateVOReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossCreateCommodity>>, {data: CommodityBossCreateVOReq}> = (props) => {
          const {data} = props ?? {};

          return  bossCreateCommodity(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bossCreateCommodity>>, TError, {data: CommodityBossCreateVOReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁºñËæëÂïÜÂìÅ
 */
export const bossModifyCommodity = (
    commodityBossCreateVOReq: CommodityBossCreateVOReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossModifyCommodity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityBossCreateVOReq
    },
      );
    }
  


    export type BossModifyCommodityMutationResult = NonNullable<Awaited<ReturnType<typeof bossModifyCommodity>>>
    export type BossModifyCommodityMutationBody = CommodityBossCreateVOReq
    export type BossModifyCommodityMutationError = ErrorType<void>

    export const useBossModifyCommodity = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossModifyCommodity>>, TError,{data: CommodityBossCreateVOReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossModifyCommodity>>, {data: CommodityBossCreateVOReq}> = (props) => {
          const {data} = props ?? {};

          return  bossModifyCommodity(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bossModifyCommodity>>, TError, {data: CommodityBossCreateVOReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary bossÂïÜÂìÅÈ¢ÑËßà‰ø°ÊÅØÂ±ïÁ§∫
 */
export const bossPreviewCommodityShow = (
    
 ) => {
      return customInstance<ResultCommodityBossCreateVO>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossPreviewCommodityShow`, method: 'post'
    },
      );
    }
  


    export type BossPreviewCommodityShowMutationResult = NonNullable<Awaited<ReturnType<typeof bossPreviewCommodityShow>>>
    
    export type BossPreviewCommodityShowMutationError = ErrorType<void>

    export const useBossPreviewCommodityShow = <TError = ErrorType<void>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossPreviewCommodityShow>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossPreviewCommodityShow>>, TVariables> = () => {
          

          return  bossPreviewCommodityShow()
        }

        

      return useMutation<Awaited<ReturnType<typeof bossPreviewCommodityShow>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary bossÂïÜÂìÅÈ¢ÑËßà‰ø°ÊÅØÂ≠òÂÇ®
 */
export const bossPreviewCommodityStorage = (
    commodityBossCreateVOReq: CommodityBossCreateVOReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/bossPreviewCommodityStorage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: commodityBossCreateVOReq
    },
      );
    }
  


    export type BossPreviewCommodityStorageMutationResult = NonNullable<Awaited<ReturnType<typeof bossPreviewCommodityStorage>>>
    export type BossPreviewCommodityStorageMutationBody = CommodityBossCreateVOReq
    export type BossPreviewCommodityStorageMutationError = ErrorType<void>

    export const useBossPreviewCommodityStorage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bossPreviewCommodityStorage>>, TError,{data: CommodityBossCreateVOReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bossPreviewCommodityStorage>>, {data: CommodityBossCreateVOReq}> = (props) => {
          const {data} = props ?? {};

          return  bossPreviewCommodityStorage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof bossPreviewCommodityStorage>>, TError, {data: CommodityBossCreateVOReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂïÜÂìÅÊü•Áúã
 */
export const productVertifyLook1 = (
    params?: ProductVertifyLook1Params,
 signal?: AbortSignal
) => {
      return customInstance<ResultCommodityValueInfoVO>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/commodityLook`, method: 'get',
        params, signal
    },
      );
    }
  

export const getProductVertifyLook1QueryKey = (params?: ProductVertifyLook1Params,) => [`/boss/manage/platform/ShopCommodityManagerBoss/commodityLook`, ...(params ? [params]: [])];

    
export type ProductVertifyLook1QueryResult = NonNullable<Awaited<ReturnType<typeof productVertifyLook1>>>
export type ProductVertifyLook1QueryError = ErrorType<void>

export const useProductVertifyLook1 = <TData = Awaited<ReturnType<typeof productVertifyLook1>>, TError = ErrorType<void>>(
 params?: ProductVertifyLook1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productVertifyLook1>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductVertifyLook1QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof productVertifyLook1>>> = ({ signal }) => productVertifyLook1(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof productVertifyLook1>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Â∫óÈì∫ÂïÜÂìÅÂØºÂá∫
 */
export const afterSalesExport1 = (
    params?: AfterSalesExport1Params,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getAfterSalesExport1QueryKey = (params?: AfterSalesExport1Params,) => [`/boss/manage/platform/ShopCommodityManagerBoss/export`, ...(params ? [params]: [])];

    
export type AfterSalesExport1QueryResult = NonNullable<Awaited<ReturnType<typeof afterSalesExport1>>>
export type AfterSalesExport1QueryError = ErrorType<unknown>

export const useAfterSalesExport1 = <TData = Awaited<ReturnType<typeof afterSalesExport1>>, TError = ErrorType<unknown>>(
 params?: AfterSalesExport1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof afterSalesExport1>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAfterSalesExport1QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof afterSalesExport1>>> = ({ signal }) => afterSalesExport1(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof afterSalesExport1>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ‰æõÂ∫îÂïÜÂïÜÂìÅÁöÑcopy
 */
export const fromStore2NewStore = (
    copyCommodityVO: CopyCommodityVO,
 ) => {
      return customInstance<Result>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/fromStore2NewStore`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: copyCommodityVO
    },
      );
    }
  


    export type FromStore2NewStoreMutationResult = NonNullable<Awaited<ReturnType<typeof fromStore2NewStore>>>
    export type FromStore2NewStoreMutationBody = CopyCommodityVO
    export type FromStore2NewStoreMutationError = ErrorType<void>

    export const useFromStore2NewStore = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fromStore2NewStore>>, TError,{data: CopyCommodityVO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fromStore2NewStore>>, {data: CopyCommodityVO}> = (props) => {
          const {data} = props ?? {};

          return  fromStore2NewStore(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof fromStore2NewStore>>, TError, {data: CopyCommodityVO}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫ÂïÜÂìÅÂàóË°®ÂàÜÈ°µÊü•ËØ¢
 */
export const getShopCommodityListPage = (
    shopCommodityQueryRequest: ShopCommodityQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultCommodity>(
      {url: `/boss/manage/platform/ShopCommodityManagerBoss/getShopCommodityListPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: shopCommodityQueryRequest
    },
      );
    }
  


    export type GetShopCommodityListPageMutationResult = NonNullable<Awaited<ReturnType<typeof getShopCommodityListPage>>>
    export type GetShopCommodityListPageMutationBody = ShopCommodityQueryRequest
    export type GetShopCommodityListPageMutationError = ErrorType<void>

    export const useGetShopCommodityListPage = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getShopCommodityListPage>>, TError,{data: ShopCommodityQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getShopCommodityListPage>>, {data: ShopCommodityQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getShopCommodityListPage(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getShopCommodityListPage>>, TError, {data: ShopCommodityQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êñ∞Â¢ûËá™Ëê•Â∫óÈì∫
 */
export const add = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/apply/add`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type AddMutationResult = NonNullable<Awaited<ReturnType<typeof add>>>
    export type AddMutationBody = DmsApiToken
    export type AddMutationError = ErrorType<void>

    export const useAdd = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof add>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof add>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  add(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof add>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫ÂÆ°Ê†∏
 */
export const audit = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/apply/audit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type AuditMutationResult = NonNullable<Awaited<ReturnType<typeof audit>>>
    export type AuditMutationBody = DmsApiToken
    export type AuditMutationError = ErrorType<void>

    export const useAudit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof audit>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof audit>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  audit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof audit>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êü•ËØ¢ÂÆ°Ê†∏Â∫óÈì∫ËØ¶ÊÉÖ
 */
export const auditView = (
    params: AuditViewParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultStoreInfo>(
      {url: `/boss/store/apply/auditView`, method: 'get',
        params, signal
    },
      );
    }
  

export const getAuditViewQueryKey = (params: AuditViewParams,) => [`/boss/store/apply/auditView`, ...(params ? [params]: [])];

    
export type AuditViewQueryResult = NonNullable<Awaited<ReturnType<typeof auditView>>>
export type AuditViewQueryError = ErrorType<void>

export const useAuditView = <TData = Awaited<ReturnType<typeof auditView>>, TError = ErrorType<void>>(
 params: AuditViewParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof auditView>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuditViewQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof auditView>>> = ({ signal }) => auditView(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof auditView>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Â∫óÈì∫Áî≥ËØ∑ÂàóË°®
 */
export const listQuery = (
    basicPageQuery: BasicPageQuery,
 ) => {
      return customInstance<ResultJsonListResultStoreInfo>(
      {url: `/boss/store/apply/listQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicPageQuery
    },
      );
    }
  


    export type ListQueryMutationResult = NonNullable<Awaited<ReturnType<typeof listQuery>>>
    export type ListQueryMutationBody = BasicPageQuery
    export type ListQueryMutationError = ErrorType<void>

    export const useListQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listQuery>>, TError,{data: BasicPageQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listQuery>>, {data: BasicPageQuery}> = (props) => {
          const {data} = props ?? {};

          return  listQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listQuery>>, TError, {data: BasicPageQuery}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫ÂêØÁî®„ÄÅÁ¶ÅÁî®
 */
export const able = (
    storeAbleRequest: StoreAbleRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/store/storeAble`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storeAbleRequest
    },
      );
    }
  


    export type AbleMutationResult = NonNullable<Awaited<ReturnType<typeof able>>>
    export type AbleMutationBody = StoreAbleRequest
    export type AbleMutationError = ErrorType<void>

    export const useAble = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof able>>, TError,{data: StoreAbleRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof able>>, {data: StoreAbleRequest}> = (props) => {
          const {data} = props ?? {};

          return  able(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof able>>, TError, {data: StoreAbleRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫ÂàÜÁ±ªÊü•ËØ¢
 */
export const getCategories = (
    storeEditRequest: StoreEditRequest,
 ) => {
      return customInstance<ResultListCommodityCategoryInfo>(
      {url: `/boss/store/store/storeGetCategories`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storeEditRequest
    },
      );
    }
  


    export type GetCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
    export type GetCategoriesMutationBody = StoreEditRequest
    export type GetCategoriesMutationError = ErrorType<void>

    export const useGetCategories = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCategories>>, TError,{data: StoreEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCategories>>, {data: StoreEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  getCategories(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getCategories>>, TError, {data: StoreEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂàóË°®Êü•ËØ¢
 */
export const storeListQuery = (
    storeListRequest: StoreListRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultStoreResultInfo>(
      {url: `/boss/store/store/storeListQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storeListRequest
    },
      );
    }
  

export const getStoreListQueryQueryKey = (storeListRequest: StoreListRequest,) => [`/boss/store/store/storeListQuery`, storeListRequest];

    
export type StoreListQueryQueryResult = NonNullable<Awaited<ReturnType<typeof storeListQuery>>>
export type StoreListQueryQueryError = ErrorType<void>

export const useStoreListQuery = <TData = Awaited<ReturnType<typeof storeListQuery>>, TError = ErrorType<void>>(
 storeListRequest: StoreListRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storeListQuery>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStoreListQueryQueryKey(storeListRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof storeListQuery>>> = () => storeListQuery(storeListRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof storeListQuery>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Â∫óÈì∫ËµÑË¥®ÂàóË°®
 */
export const storeQualificationAuditPage1 = (
    basicPageQuery: BasicPageQuery,
 ) => {
      return customInstance<ResultPageInfoStoreQualificationAuditPageResultDto>(
      {url: `/boss/store/store/storeQualificationList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicPageQuery
    },
      );
    }
  


    export type StoreQualificationAuditPage1MutationResult = NonNullable<Awaited<ReturnType<typeof storeQualificationAuditPage1>>>
    export type StoreQualificationAuditPage1MutationBody = BasicPageQuery
    export type StoreQualificationAuditPage1MutationError = ErrorType<void>

    export const useStoreQualificationAuditPage1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storeQualificationAuditPage1>>, TError,{data: BasicPageQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storeQualificationAuditPage1>>, {data: BasicPageQuery}> = (props) => {
          const {data} = props ?? {};

          return  storeQualificationAuditPage1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof storeQualificationAuditPage1>>, TError, {data: BasicPageQuery}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫ËµÑË¥®Êü•Áúã
 */
export const storeQualificationAuditView1 = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultStoreQualificationAuditViewResultDto>(
      {url: `/boss/store/store/storeQualificationView`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type StoreQualificationAuditView1MutationResult = NonNullable<Awaited<ReturnType<typeof storeQualificationAuditView1>>>
    export type StoreQualificationAuditView1MutationBody = DmsApiToken
    export type StoreQualificationAuditView1MutationError = ErrorType<void>

    export const useStoreQualificationAuditView1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storeQualificationAuditView1>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storeQualificationAuditView1>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  storeQualificationAuditView1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof storeQualificationAuditView1>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Â∫óÈì∫È¢ÑËßà
 */
export const view = (
    params: ViewParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultStoreInfo>(
      {url: `/boss/store/store/view`, method: 'get',
        params, signal
    },
      );
    }
  

export const getViewQueryKey = (params: ViewParams,) => [`/boss/store/store/view`, ...(params ? [params]: [])];

    
export type ViewQueryResult = NonNullable<Awaited<ReturnType<typeof view>>>
export type ViewQueryError = ErrorType<void>

export const useView = <TData = Awaited<ReturnType<typeof view>>, TError = ErrorType<void>>(
 params: ViewParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof view>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViewQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof view>>> = ({ signal }) => view(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof view>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary ÂàÜÈ°µÊü•ËØ¢Â∫óÈì∫ÂïÜÂìÅ
 */
export const getCommodity = (
    storeApplyCommodityListRequest: StoreApplyCommodityListRequest,
 ) => {
      return customInstance<ResultPageInfoCommodityInfo>(
      {url: `/boss/store/popular/getCommodity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storeApplyCommodityListRequest
    },
      );
    }
  


    export type GetCommodityMutationResult = NonNullable<Awaited<ReturnType<typeof getCommodity>>>
    export type GetCommodityMutationBody = StoreApplyCommodityListRequest
    export type GetCommodityMutationError = ErrorType<void>

    export const useGetCommodity = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCommodity>>, TError,{data: StoreApplyCommodityListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCommodity>>, {data: StoreApplyCommodityListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getCommodity(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getCommodity>>, TError, {data: StoreApplyCommodityListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÂàÜÈ°µÊü•ËØ¢Â∫óÈì∫
 */
export const getStore = (
    storePopularListRequest: StorePopularListRequest,
 ) => {
      return customInstance<ResultPageInfoStoreInfo>(
      {url: `/boss/store/popular/getStore`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storePopularListRequest
    },
      );
    }
  


    export type GetStoreMutationResult = NonNullable<Awaited<ReturnType<typeof getStore>>>
    export type GetStoreMutationBody = StorePopularListRequest
    export type GetStoreMutationError = ErrorType<void>

    export const useGetStore = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStore>>, TError,{data: StorePopularListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStore>>, {data: StorePopularListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getStore(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getStore>>, TError, {data: StorePopularListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®Â∫óÈì∫ÈÖçÁΩÆÊü•ËØ¢
 */
export const getStoreLayout = (
    
 ) => {
      return customInstance<ResultListStoreInfo>(
      {url: `/boss/store/popular/getStoreLayout`, method: 'post'
    },
      );
    }
  


    export type GetStoreLayoutMutationResult = NonNullable<Awaited<ReturnType<typeof getStoreLayout>>>
    
    export type GetStoreLayoutMutationError = ErrorType<void>

    export const useGetStoreLayout = <TError = ErrorType<void>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStoreLayout>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStoreLayout>>, TVariables> = () => {
          

          return  getStoreLayout()
        }

        

      return useMutation<Awaited<ReturnType<typeof getStoreLayout>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÁÉ≠Èó®Â∫óÈì∫ÁºñËæë
 */
export const add1 = (
    storePopularRequest: StorePopularRequest,
 ) => {
      return customInstance<ResultVoid>(
      {url: `/boss/store/popular/saveUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: storePopularRequest
    },
      );
    }
  


    export type Add1MutationResult = NonNullable<Awaited<ReturnType<typeof add1>>>
    export type Add1MutationBody = StorePopularRequest
    export type Add1MutationError = ErrorType<void>

    export const useAdd1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof add1>>, TError,{data: StorePopularRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof add1>>, {data: StorePopularRequest}> = (props) => {
          const {data} = props ?? {};

          return  add1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof add1>>, TError, {data: StorePopularRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂàùÂßãÂØÜÁ†ÅËÆæÁΩÆ
 * @summary ÂàùÂßãÂØÜÁ†ÅËÆæÁΩÆ
 */
export const initPassword = (
    sysAccountPasswordEditRequest: SysAccountPasswordEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysAccount/main/initPass`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAccountPasswordEditRequest
    },
      );
    }
  


    export type InitPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof initPassword>>>
    export type InitPasswordMutationBody = SysAccountPasswordEditRequest
    export type InitPasswordMutationError = ErrorType<void>

    export const useInitPassword = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initPassword>>, TError,{data: SysAccountPasswordEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initPassword>>, {data: SysAccountPasswordEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  initPassword(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof initPassword>>, TError, {data: SysAccountPasswordEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢ 
 */
export const querySysAccount = (
    sysAccountQueryRequest: SysAccountQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysAccountResponse>(
      {url: `/boss/sysAccount/main/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAccountQueryRequest
    },
      );
    }
  

export const getQuerySysAccountQueryKey = (sysAccountQueryRequest: SysAccountQueryRequest,) => [`/boss/sysAccount/main/query`, sysAccountQueryRequest];

    
export type QuerySysAccountQueryResult = NonNullable<Awaited<ReturnType<typeof querySysAccount>>>
export type QuerySysAccountQueryError = ErrorType<void>

export const useQuerySysAccount = <TData = Awaited<ReturnType<typeof querySysAccount>>, TError = ErrorType<void>>(
 sysAccountQueryRequest: SysAccountQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysAccount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysAccountQueryKey(sysAccountQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysAccount>>> = () => querySysAccount(sysAccountQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysAccount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ê†πÊçÆËèúÂçï Êü•ËØ¢ÂΩìÂâçÁôªÈôÜË¥¶Âè∑Âú®ËèúÂçï‰∏ãÈù¢ ÁöÑÂ≠óÊÆµÊùÉÈôê
 * @summary Ê†πÊçÆËèúÂçï Êü•ËØ¢ÂΩìÂâçÁôªÈôÜË¥¶Âè∑Âú®ËèúÂçï‰∏ãÈù¢ ÁöÑÂ≠óÊÆµÊùÉÈôê 
 */
export const queryColumnByMenu = (
    params: QueryColumnByMenuParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysRoleColumnMenuResponse>(
      {url: `/boss/sysAccount/main/queryColumnMenu`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryColumnByMenuQueryKey = (params: QueryColumnByMenuParams,) => [`/boss/sysAccount/main/queryColumnMenu`, ...(params ? [params]: [])];

    
export type QueryColumnByMenuQueryResult = NonNullable<Awaited<ReturnType<typeof queryColumnByMenu>>>
export type QueryColumnByMenuQueryError = ErrorType<void>

export const useQueryColumnByMenu = <TData = Awaited<ReturnType<typeof queryColumnByMenu>>, TError = ErrorType<void>>(
 params: QueryColumnByMenuParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryColumnByMenu>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryColumnByMenuQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryColumnByMenu>>> = ({ signal }) => queryColumnByMenu(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryColumnByMenu>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ë¥¶Êà∑ ÂÖ≥ËÅîÂæóËßíËâ≤ (ÂåÖÂê´Â≤ó‰ΩçÂÖ≥ËÅîÂæóËßíËâ≤)
 * @summary Ë¥¶Êà∑ ÂÖ≥ËÅîÂæóËßíËâ≤ (ÂåÖÂê´Â≤ó‰ΩçÂÖ≥ËÅîÂæóËßíËâ≤) 
 */
export const queryRolesSysAccount = (
    params?: QueryRolesSysAccountParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAccountRoleRelationResponse>(
      {url: `/boss/sysAccount/main/queryRoles`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryRolesSysAccountQueryKey = (params?: QueryRolesSysAccountParams,) => [`/boss/sysAccount/main/queryRoles`, ...(params ? [params]: [])];

    
export type QueryRolesSysAccountQueryResult = NonNullable<Awaited<ReturnType<typeof queryRolesSysAccount>>>
export type QueryRolesSysAccountQueryError = ErrorType<void>

export const useQueryRolesSysAccount = <TData = Awaited<ReturnType<typeof queryRolesSysAccount>>, TError = ErrorType<void>>(
 params?: QueryRolesSysAccountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryRolesSysAccount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryRolesSysAccountQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryRolesSysAccount>>> = ({ signal }) => queryRolesSysAccount(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryRolesSysAccount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÈáçÁΩÆÂØÜÁ†Å
 * @summary ÈáçÁΩÆÂØÜÁ†Å
 */
export const resetPassword = (
    params: ResetPasswordParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysAccount/main/reset`, method: 'get',
        params, signal
    },
      );
    }
  

export const getResetPasswordQueryKey = (params: ResetPasswordParams,) => [`/boss/sysAccount/main/reset`, ...(params ? [params]: [])];

    
export type ResetPasswordQueryResult = NonNullable<Awaited<ReturnType<typeof resetPassword>>>
export type ResetPasswordQueryError = ErrorType<void>

export const useResetPassword = <TData = Awaited<ReturnType<typeof resetPassword>>, TError = ErrorType<void>>(
 params: ResetPasswordParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof resetPassword>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResetPasswordQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof resetPassword>>> = ({ signal }) => resetPassword(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof resetPassword>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Áä∂ÊÄÅÂ§ÑÁêÜ 
 * @summary Áä∂ÊÄÅÂ§ÑÁêÜ  
 */
export const updateStatusSysAccount = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysAccount/main/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type UpdateStatusSysAccountMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusSysAccount>>>
    export type UpdateStatusSysAccountMutationBody = BaseIdsRequest
    export type UpdateStatusSysAccountMutationError = ErrorType<void>

    export const useUpdateStatusSysAccount = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusSysAccount>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusSysAccount>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusSysAccount(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusSysAccount>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * userId
 * @summary ÂëòÂ∑•Ë¥¶Êà∑ËßíËâ≤ ÂÖ≥ËÅî Êü•ËØ¢
 */
export const queryByUserId = (
    params?: QueryByUserIdParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAccountRoleRelationResponse>(
      {url: `/boss/accountRole/queryByUserId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryByUserIdQueryKey = (params?: QueryByUserIdParams,) => [`/boss/accountRole/queryByUserId`, ...(params ? [params]: [])];

    
export type QueryByUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof queryByUserId>>>
export type QueryByUserIdQueryError = ErrorType<void>

export const useQueryByUserId = <TData = Awaited<ReturnType<typeof queryByUserId>>, TError = ErrorType<void>>(
 params?: QueryByUserIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryByUserId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryByUserIdQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryByUserId>>> = ({ signal }) => queryByUserId(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryByUserId>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰º†ÂÖ•sysAccountRoleRelationEditRequest
 * @summary ÂëòÂ∑•Ë¥¶Êà∑ËßíËâ≤ÂÖ≥ËÅî ‰øùÂ≠ò/‰øÆÊîπ
 */
export const saveOrUpdateSysAccountRoleRelation = (
    sysAccountRoleRelationEditRequest: SysAccountRoleRelationEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/accountRole/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAccountRoleRelationEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysAccountRoleRelationMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysAccountRoleRelation>>>
    export type SaveOrUpdateSysAccountRoleRelationMutationBody = SysAccountRoleRelationEditRequest
    export type SaveOrUpdateSysAccountRoleRelationMutationError = ErrorType<void>

    export const useSaveOrUpdateSysAccountRoleRelation = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysAccountRoleRelation>>, TError,{data: SysAccountRoleRelationEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysAccountRoleRelation>>, {data: SysAccountRoleRelationEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysAccountRoleRelation(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysAccountRoleRelation>>, TError, {data: SysAccountRoleRelationEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary AppÂÆ¢Êà∑Á´ØÁâàÊú¨ÂçáÁ∫ßÁÆ°ÁêÜ  Êï∞ÊçÆÂà†Èô§
 */
export const deleteSysAppVersion = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/app_version/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type DeleteSysAppVersionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysAppVersion>>>
    export type DeleteSysAppVersionMutationBody = BaseIdsRequest
    export type DeleteSysAppVersionMutationError = ErrorType<void>

    export const useDeleteSysAppVersion = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysAppVersion>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysAppVersion>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysAppVersion(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysAppVersion>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ËØ¶ÊÉÖ AppÂÆ¢Êà∑Á´ØÁâàÊú¨ÂçáÁ∫ßÁÆ°ÁêÜ
 */
export const detailSysAppVersion = (
    params: DetailSysAppVersionParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysAppVersionResponse>(
      {url: `/boss/sys/app_version/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailSysAppVersionQueryKey = (params: DetailSysAppVersionParams,) => [`/boss/sys/app_version/detail`, ...(params ? [params]: [])];

    
export type DetailSysAppVersionQueryResult = NonNullable<Awaited<ReturnType<typeof detailSysAppVersion>>>
export type DetailSysAppVersionQueryError = ErrorType<void>

export const useDetailSysAppVersion = <TData = Awaited<ReturnType<typeof detailSysAppVersion>>, TError = ErrorType<void>>(
 params: DetailSysAppVersionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailSysAppVersion>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailSysAppVersionQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailSysAppVersion>>> = ({ signal }) => detailSysAppVersion(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailSysAppVersion>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary AppÂÆ¢Êà∑Á´ØÁâàÊú¨ÂçáÁ∫ßÁÆ°ÁêÜ  Êü•ËØ¢
 */
export const querySysAppVersion = (
    sysAppVersionQueryRequest: SysAppVersionQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysAppVersionResponse>(
      {url: `/boss/sys/app_version/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAppVersionQueryRequest
    },
      );
    }
  

export const getQuerySysAppVersionQueryKey = (sysAppVersionQueryRequest: SysAppVersionQueryRequest,) => [`/boss/sys/app_version/query`, sysAppVersionQueryRequest];

    
export type QuerySysAppVersionQueryResult = NonNullable<Awaited<ReturnType<typeof querySysAppVersion>>>
export type QuerySysAppVersionQueryError = ErrorType<void>

export const useQuerySysAppVersion = <TData = Awaited<ReturnType<typeof querySysAppVersion>>, TError = ErrorType<void>>(
 sysAppVersionQueryRequest: SysAppVersionQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysAppVersion>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysAppVersionQueryKey(sysAppVersionQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysAppVersion>>> = () => querySysAppVersion(sysAppVersionQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysAppVersion>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary AppÂÆ¢Êà∑Á´ØÁâàÊú¨ÂçáÁ∫ßÁÆ°ÁêÜ Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysAppVersion = (
    sysAppVersionEditRequest: SysAppVersionEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/app_version/save_update`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAppVersionEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysAppVersionMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysAppVersion>>>
    export type SaveOrUpdateSysAppVersionMutationBody = SysAppVersionEditRequest
    export type SaveOrUpdateSysAppVersionMutationError = ErrorType<void>

    export const useSaveOrUpdateSysAppVersion = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysAppVersion>>, TError,{data: SysAppVersionEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysAppVersion>>, {data: SysAppVersionEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysAppVersion(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysAppVersion>>, TError, {data: SysAppVersionEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Áä∂ÊÄÅÂ§ÑÁêÜ
 */
export const updateStatusSysAppVersion = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/app_version/update_status`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type UpdateStatusSysAppVersionMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusSysAppVersion>>>
    export type UpdateStatusSysAppVersionMutationBody = BaseIdsRequest
    export type UpdateStatusSysAppVersionMutationError = ErrorType<void>

    export const useUpdateStatusSysAppVersion = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusSysAppVersion>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusSysAppVersion>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusSysAppVersion(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusSysAppVersion>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ë°åÊîøÂå∫Âüü‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary Ë°åÊîøÂå∫Âüü‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEdit = (
    sysAreaAddOrEditRequest: SysAreaAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/areaMain/area/addOrEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAreaAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEdit>>>
    export type AddOrEditMutationBody = SysAreaAddOrEditRequest
    export type AddOrEditMutationError = ErrorType<void>

    export const useAddOrEdit = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEdit>>, TError,{data: SysAreaAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEdit>>, {data: SysAreaAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEdit(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEdit>>, TError, {data: SysAreaAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÊâπÈáèÊõ¥Êñ∞Ë°åÊîøÂå∫ÂüüÁä∂ÊÄÅ
 * @summary ÊâπÈáèÊõ¥Êñ∞Ë°åÊîøÂå∫ÂüüÁä∂ÊÄÅ
 */
export const batchUpdateStatus = (
    sysAreaBatchUpdateStatusRequest: SysAreaBatchUpdateStatusRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/areaMain/area/batchUpdateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAreaBatchUpdateStatusRequest
    },
      );
    }
  


    export type BatchUpdateStatusMutationResult = NonNullable<Awaited<ReturnType<typeof batchUpdateStatus>>>
    export type BatchUpdateStatusMutationBody = SysAreaBatchUpdateStatusRequest
    export type BatchUpdateStatusMutationError = ErrorType<void>

    export const useBatchUpdateStatus = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchUpdateStatus>>, TError,{data: SysAreaBatchUpdateStatusRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchUpdateStatus>>, {data: SysAreaBatchUpdateStatusRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchUpdateStatus(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchUpdateStatus>>, TError, {data: SysAreaBatchUpdateStatusRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÂ∏ÇÂàóË°®
 */
export const citys = (
    params: CitysParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeResponse>(
      {url: `/boss/areaMain/area/citys`, method: 'get',
        params, signal
    },
      );
    }
  

export const getCitysQueryKey = (params: CitysParams,) => [`/boss/areaMain/area/citys`, ...(params ? [params]: [])];

    
export type CitysQueryResult = NonNullable<Awaited<ReturnType<typeof citys>>>
export type CitysQueryError = ErrorType<void>

export const useCitys = <TData = Awaited<ReturnType<typeof citys>>, TError = ErrorType<void>>(
 params: CitysParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof citys>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCitysQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof citys>>> = ({ signal }) => citys(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof citys>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÂå∫ÂéøÂàóË°®
 */
export const districts = (
    params: DistrictsParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeResponse>(
      {url: `/boss/areaMain/area/districts`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDistrictsQueryKey = (params: DistrictsParams,) => [`/boss/areaMain/area/districts`, ...(params ? [params]: [])];

    
export type DistrictsQueryResult = NonNullable<Awaited<ReturnType<typeof districts>>>
export type DistrictsQueryError = ErrorType<void>

export const useDistricts = <TData = Awaited<ReturnType<typeof districts>>, TError = ErrorType<void>>(
 params: DistrictsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof districts>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDistrictsQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof districts>>> = ({ signal }) => districts(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof districts>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ëé∑ÊâÄÊúâÂüéÂ∏Ç
 * @summary Ëé∑ÊâÄÊúâÂüéÂ∏Ç
 */
export const getAllCity = (
    apiToken: ApiToken,
    params?: GetAllCityParams,
 ) => {
      return customInstance<ResultListSysAmapAreaCodeResponse>(
      {url: `/boss/areaMain/area/getAllCity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: apiToken,
        params
    },
      );
    }
  


    export type GetAllCityMutationResult = NonNullable<Awaited<ReturnType<typeof getAllCity>>>
    export type GetAllCityMutationBody = ApiToken
    export type GetAllCityMutationError = ErrorType<void>

    export const useGetAllCity = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAllCity>>, TError,{data: ApiToken;params?: GetAllCityParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getAllCity>>, {data: ApiToken;params?: GetAllCityParams}> = (props) => {
          const {data,params} = props ?? {};

          return  getAllCity(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getAllCity>>, TError, {data: ApiToken;params?: GetAllCityParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ê†πÊçÆ‰∏äÁ∫ßIDÔºåÊü•ËØ¢‰∏ãÁ∫ßÂàóË°®
 * @summary Ê†πÊçÆ‰∏äÁ∫ßIDÔºåÊü•ËØ¢‰∏ãÁ∫ßÂàóË°®
 */
export const areaMainListSon = (
    sysAreaQuerySonRequest: SysAreaQuerySonRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysAreaResponse>(
      {url: `/boss/areaMain/area/listSon`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysAreaQuerySonRequest
    },
      );
    }
  

export const getAreaMainListSonQueryKey = (sysAreaQuerySonRequest: SysAreaQuerySonRequest,) => [`/boss/areaMain/area/listSon`, sysAreaQuerySonRequest];

    
export type AreaMainListSonQueryResult = NonNullable<Awaited<ReturnType<typeof areaMainListSon>>>
export type AreaMainListSonQueryError = ErrorType<void>

export const useAreaMainListSon = <TData = Awaited<ReturnType<typeof areaMainListSon>>, TError = ErrorType<void>>(
 sysAreaQuerySonRequest: SysAreaQuerySonRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof areaMainListSon>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAreaMainListSonQueryKey(sysAreaQuerySonRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof areaMainListSon>>> = () => areaMainListSon(sysAreaQuerySonRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof areaMainListSon>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÁúÅÂàóË°®
 */
export const provinces = (
    params?: ProvincesParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeResponse>(
      {url: `/boss/areaMain/area/provinces`, method: 'get',
        params, signal
    },
      );
    }
  

export const getProvincesQueryKey = (params?: ProvincesParams,) => [`/boss/areaMain/area/provinces`, ...(params ? [params]: [])];

    
export type ProvincesQueryResult = NonNullable<Awaited<ReturnType<typeof provinces>>>
export type ProvincesQueryError = ErrorType<void>

export const useProvinces = <TData = Awaited<ReturnType<typeof provinces>>, TError = ErrorType<void>>(
 params?: ProvincesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof provinces>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProvincesQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof provinces>>> = ({ signal }) => provinces(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof provinces>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂçéÂåóÂú∞Âå∫„ÄÅ‰∏úÂåóÂú∞Âå∫„ÄÅÂçé‰∏úÂú∞Âå∫„ÄÅÂçé‰∏≠Âú∞Âå∫„ÄÅÂçéÂçóÂú∞Âå∫„ÄÅË•øÂçóÂú∞Âå∫„ÄÅË•øÂåóÂú∞Âå∫„ÄÅÊ∏ØÊæ≥Âè∞Âú∞Âå∫
 * @summary Ë°åÊîøÂ§ßÂå∫:ÁúÅ„ÄÅÂ∏Ç„ÄÅÂå∫Ê†ëÂàóË°®
 */
export const getAreaRegionTree = (
    params?: GetAreaRegionTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAreaRegionResponse>(
      {url: `/boss/areaMain/area/region/tree`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAreaRegionTreeQueryKey = (params?: GetAreaRegionTreeParams,) => [`/boss/areaMain/area/region/tree`, ...(params ? [params]: [])];

    
export type GetAreaRegionTreeQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaRegionTree>>>
export type GetAreaRegionTreeQueryError = ErrorType<void>

export const useGetAreaRegionTree = <TData = Awaited<ReturnType<typeof getAreaRegionTree>>, TError = ErrorType<void>>(
 params?: GetAreaRegionTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaRegionTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaRegionTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaRegionTree>>> = ({ signal }) => getAreaRegionTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getAreaRegionTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñË°óÈÅìÂàóË°®
 */
export const findStreetByDistrictCode = (
    params: FindStreetByDistrictCodeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeResponse>(
      {url: `/boss/areaMain/area/streets`, method: 'get',
        params, signal
    },
      );
    }
  

export const getFindStreetByDistrictCodeQueryKey = (params: FindStreetByDistrictCodeParams,) => [`/boss/areaMain/area/streets`, ...(params ? [params]: [])];

    
export type FindStreetByDistrictCodeQueryResult = NonNullable<Awaited<ReturnType<typeof findStreetByDistrictCode>>>
export type FindStreetByDistrictCodeQueryError = ErrorType<void>

export const useFindStreetByDistrictCode = <TData = Awaited<ReturnType<typeof findStreetByDistrictCode>>, TError = ErrorType<void>>(
 params: FindStreetByDistrictCodeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findStreetByDistrictCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindStreetByDistrictCodeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof findStreetByDistrictCode>>> = ({ signal }) => findStreetByDistrictCode(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof findStreetByDistrictCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÁúÅ„ÄÅÂ∏Ç„ÄÅÂå∫Ê†ëÂàóË°®
 */
export const getAreaTree = (
    params?: GetAreaTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeTreeResponse>(
      {url: `/boss/areaMain/area/tree`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAreaTreeQueryKey = (params?: GetAreaTreeParams,) => [`/boss/areaMain/area/tree`, ...(params ? [params]: [])];

    
export type GetAreaTreeQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaTree>>>
export type GetAreaTreeQueryError = ErrorType<void>

export const useGetAreaTree = <TData = Awaited<ReturnType<typeof getAreaTree>>, TError = ErrorType<void>>(
 params?: GetAreaTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaTree>>> = ({ signal }) => getAreaTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getAreaTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ê†πÊçÆÁà∂Á∫ßCODEËé∑ÂèñÂå∫Âüü
 */
export const getAreaTreeByParentCode = (
    params: GetAreaTreeByParentCodeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysAmapAreaCodeTreeResponse>(
      {url: `/boss/areaMain/area/tree/parentcode`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetAreaTreeByParentCodeQueryKey = (params: GetAreaTreeByParentCodeParams,) => [`/boss/areaMain/area/tree/parentcode`, ...(params ? [params]: [])];

    
export type GetAreaTreeByParentCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAreaTreeByParentCode>>>
export type GetAreaTreeByParentCodeQueryError = ErrorType<void>

export const useGetAreaTreeByParentCode = <TData = Awaited<ReturnType<typeof getAreaTreeByParentCode>>, TError = ErrorType<void>>(
 params: GetAreaTreeByParentCodeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAreaTreeByParentCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaTreeByParentCodeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaTreeByParentCode>>> = ({ signal }) => getAreaTreeByParentCode(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getAreaTreeByParentCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰º†ÂÖ•id
 * @summary ËØ¶ÊÉÖ
 */
export const detailSysBusinessLog = (
    params: DetailSysBusinessLogParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysBusinessLogResponse>(
      {url: `/boss/sys/businessLog/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailSysBusinessLogQueryKey = (params: DetailSysBusinessLogParams,) => [`/boss/sys/businessLog/detail`, ...(params ? [params]: [])];

    
export type DetailSysBusinessLogQueryResult = NonNullable<Awaited<ReturnType<typeof detailSysBusinessLog>>>
export type DetailSysBusinessLogQueryError = ErrorType<void>

export const useDetailSysBusinessLog = <TData = Awaited<ReturnType<typeof detailSysBusinessLog>>, TError = ErrorType<void>>(
 params: DetailSysBusinessLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailSysBusinessLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailSysBusinessLogQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailSysBusinessLog>>> = ({ signal }) => detailSysBusinessLog(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailSysBusinessLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂØºÂá∫Ê∏ÖÂçï
 * @summary ÂØºÂá∫Ê∏ÖÂçï
 */
export const exportInfoSysBusinessLog = (
    params?: ExportInfoSysBusinessLogParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/sys/businessLog/exportInfo`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportInfoSysBusinessLogQueryKey = (params?: ExportInfoSysBusinessLogParams,) => [`/boss/sys/businessLog/exportInfo`, ...(params ? [params]: [])];

    
export type ExportInfoSysBusinessLogQueryResult = NonNullable<Awaited<ReturnType<typeof exportInfoSysBusinessLog>>>
export type ExportInfoSysBusinessLogQueryError = ErrorType<unknown>

export const useExportInfoSysBusinessLog = <TData = Awaited<ReturnType<typeof exportInfoSysBusinessLog>>, TError = ErrorType<unknown>>(
 params?: ExportInfoSysBusinessLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportInfoSysBusinessLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportInfoSysBusinessLogQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportInfoSysBusinessLog>>> = ({ signal }) => exportInfoSysBusinessLog(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportInfoSysBusinessLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰º†ÂÖ•SysBusinessLogQueryRequest
 * @summary Á≥ªÁªü‰∏öÂä°Êìç‰ΩúÊó•ÂøóË°®,ÂàÜÈ°µÊü•ËØ¢
 */
export const listPageSysBusinessLog = (
    sysBusinessLogQueryRequest: SysBusinessLogQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysBusinessLogResponse>(
      {url: `/boss/sys/businessLog/sysBusinessLog/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBusinessLogQueryRequest
    },
      );
    }
  

export const getListPageSysBusinessLogQueryKey = (sysBusinessLogQueryRequest: SysBusinessLogQueryRequest,) => [`/boss/sys/businessLog/sysBusinessLog/listPage`, sysBusinessLogQueryRequest];

    
export type ListPageSysBusinessLogQueryResult = NonNullable<Awaited<ReturnType<typeof listPageSysBusinessLog>>>
export type ListPageSysBusinessLogQueryError = ErrorType<void>

export const useListPageSysBusinessLog = <TData = Awaited<ReturnType<typeof listPageSysBusinessLog>>, TError = ErrorType<void>>(
 sysBusinessLogQueryRequest: SysBusinessLogQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listPageSysBusinessLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPageSysBusinessLogQueryKey(sysBusinessLogQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPageSysBusinessLog>>> = () => listPageSysBusinessLog(sysBusinessLogQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof listPageSysBusinessLog>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditDb = (
    sysDbConnectionEditRequest: SysDbConnectionEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/db/addOrEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDbConnectionEditRequest
    },
      );
    }
  


    export type AddOrEditDbMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditDb>>>
    export type AddOrEditDbMutationBody = SysDbConnectionEditRequest
    export type AddOrEditDbMutationError = ErrorType<void>

    export const useAddOrEditDb = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditDb>>, TError,{data: SysDbConnectionEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditDb>>, {data: SysDbConnectionEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditDb(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditDb>>, TError, {data: SysDbConnectionEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÂà†Èô§
 * @summary Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÂà†Èô§
 */
export const deleteDb = (
    sysDbConnectionDeleteRequest: SysDbConnectionDeleteRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/db/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDbConnectionDeleteRequest
    },
      );
    }
  


    export type DeleteDbMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDb>>>
    export type DeleteDbMutationBody = SysDbConnectionDeleteRequest
    export type DeleteDbMutationError = ErrorType<void>

    export const useDeleteDb = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDb>>, TError,{data: SysDbConnectionDeleteRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDb>>, {data: SysDbConnectionDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteDb(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteDb>>, TError, {data: SysDbConnectionDeleteRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êï∞ÊçÆÂ∫ìË°®Â≠óÊÆµ‰ø°ÊÅØÂàóË°®
 * @summary Êï∞ÊçÆÂ∫ìË°®Â≠óÊÆµ‰ø°ÊÅØÂàóË°®
 */
export const getTableColumnInfos = (
    sysTableColumnInfoQueryRequest: SysTableColumnInfoQueryRequest,
 ) => {
      return customInstance<ResultListSysTableColumnInfoResponse>(
      {url: `/boss/sys/db/getTableColumnInfos`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysTableColumnInfoQueryRequest
    },
      );
    }
  


    export type GetTableColumnInfosMutationResult = NonNullable<Awaited<ReturnType<typeof getTableColumnInfos>>>
    export type GetTableColumnInfosMutationBody = SysTableColumnInfoQueryRequest
    export type GetTableColumnInfosMutationError = ErrorType<void>

    export const useGetTableColumnInfos = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTableColumnInfos>>, TError,{data: SysTableColumnInfoQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getTableColumnInfos>>, {data: SysTableColumnInfoQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getTableColumnInfos(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getTableColumnInfos>>, TError, {data: SysTableColumnInfoQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êï∞ÊçÆÂ∫ìË°®‰ø°ÊÅØÂàóË°®
 * @summary Êï∞ÊçÆÂ∫ìË°®‰ø°ÊÅØÂàóË°®
 */
export const getTableInfos = (
    sysTableInfoQueryRequest: SysTableInfoQueryRequest,
 ) => {
      return customInstance<ResultListSysTableInfoResponse>(
      {url: `/boss/sys/db/getTableInfos`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysTableInfoQueryRequest
    },
      );
    }
  


    export type GetTableInfosMutationResult = NonNullable<Awaited<ReturnType<typeof getTableInfos>>>
    export type GetTableInfosMutationBody = SysTableInfoQueryRequest
    export type GetTableInfosMutationError = ErrorType<void>

    export const useGetTableInfos = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTableInfos>>, TError,{data: SysTableInfoQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getTableInfos>>, {data: SysTableInfoQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getTableInfos(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getTableInfos>>, TError, {data: SysTableInfoQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÂàóË°®
 * @summary Êï∞ÊçÆÂ∫ìËøûÊé•‰ø°ÊÅØÂàóË°®
 */
export const listPageDb = (
    sysDbConnectionQueryRequest: SysDbConnectionQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysDbConnectionResponse>(
      {url: `/boss/sys/db/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDbConnectionQueryRequest
    },
      );
    }
  


    export type ListPageDbMutationResult = NonNullable<Awaited<ReturnType<typeof listPageDb>>>
    export type ListPageDbMutationBody = SysDbConnectionQueryRequest
    export type ListPageDbMutationError = ErrorType<void>

    export const useListPageDb = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listPageDb>>, TError,{data: SysDbConnectionQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listPageDb>>, {data: SysDbConnectionQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  listPageDb(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listPageDb>>, TError, {data: SysDbConnectionQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØï
 * @summary Êï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØï
 */
export const testConnection = (
    sysDbConnectionTestRequest: SysDbConnectionTestRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/db/testConnection`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDbConnectionTestRequest
    },
      );
    }
  


    export type TestConnectionMutationResult = NonNullable<Awaited<ReturnType<typeof testConnection>>>
    export type TestConnectionMutationBody = SysDbConnectionTestRequest
    export type TestConnectionMutationError = ErrorType<void>

    export const useTestConnection = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testConnection>>, TError,{data: SysDbConnectionTestRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testConnection>>, {data: SysDbConnectionTestRequest}> = (props) => {
          const {data} = props ?? {};

          return  testConnection(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof testConnection>>, TError, {data: SysDbConnectionTestRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÊâπÈáèÊõ¥Êñ∞Â≠óÂÖ∏Áä∂ÊÄÅ
 * @summary ÊâπÈáèÊõ¥Êñ∞Â≠óÂÖ∏Áä∂ÊÄÅ
 */
export const batchUpdateStatusDic = (
    sysDictBatchUpdateStatusRequest: SysDictBatchUpdateStatusRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDict/batchUpdateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDictBatchUpdateStatusRequest
    },
      );
    }
  


    export type BatchUpdateStatusDicMutationResult = NonNullable<Awaited<ReturnType<typeof batchUpdateStatusDic>>>
    export type BatchUpdateStatusDicMutationBody = SysDictBatchUpdateStatusRequest
    export type BatchUpdateStatusDicMutationError = ErrorType<void>

    export const useBatchUpdateStatusDic = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchUpdateStatusDic>>, TError,{data: SysDictBatchUpdateStatusRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchUpdateStatusDic>>, {data: SysDictBatchUpdateStatusRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchUpdateStatusDic(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchUpdateStatusDic>>, TError, {data: SysDictBatchUpdateStatusRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Ëé∑ÂèñÊâÄÊúâÈ°∂Á∫ß‰∏öÂä°ÁªÑ‰ª∂Â≠óÂÖ∏
 */
export const listCompentDic = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysDictResponse>(
      {url: `/boss/sysDict/listAllCompent`, method: 'get', signal
    },
      );
    }
  

export const getListCompentDicQueryKey = () => [`/boss/sysDict/listAllCompent`];

    
export type ListCompentDicQueryResult = NonNullable<Awaited<ReturnType<typeof listCompentDic>>>
export type ListCompentDicQueryError = ErrorType<void>

export const useListCompentDic = <TData = Awaited<ReturnType<typeof listCompentDic>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listCompentDic>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListCompentDicQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCompentDic>>> = ({ signal }) => listCompentDic(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listCompentDic>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Ëé∑ÂèñÂçïÊçÆÁºñÁ†ÅÁªÑ‰ª∂Â≠óÂÖ∏
 */
export const listBillCodeCompentDic = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysDictResponse>(
      {url: `/boss/sysDict/listBillCodeCompent`, method: 'get', signal
    },
      );
    }
  

export const getListBillCodeCompentDicQueryKey = () => [`/boss/sysDict/listBillCodeCompent`];

    
export type ListBillCodeCompentDicQueryResult = NonNullable<Awaited<ReturnType<typeof listBillCodeCompentDic>>>
export type ListBillCodeCompentDicQueryError = ErrorType<void>

export const useListBillCodeCompentDic = <TData = Awaited<ReturnType<typeof listBillCodeCompentDic>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listBillCodeCompentDic>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListBillCodeCompentDicQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listBillCodeCompentDic>>> = ({ signal }) => listBillCodeCompentDic(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listBillCodeCompentDic>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ê†πÊçÆ‰∏äÁ∫ßÂ≠óÂÖ∏IDÔºåÊü•ËØ¢‰∏ãÁ∫ßÂàóË°®
 * @summary Ê†πÊçÆ‰∏äÁ∫ßÂ≠óÂÖ∏IDÔºåÊü•ËØ¢‰∏ãÁ∫ßÂàóË°®
 */
export const dictMainListSon = (
    sysDictQuerySonRequest: SysDictQuerySonRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysDictSonResponse>(
      {url: `/boss/sysDict/listSon`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDictQuerySonRequest
    },
      );
    }
  

export const getDictMainListSonQueryKey = (sysDictQuerySonRequest: SysDictQuerySonRequest,) => [`/boss/sysDict/listSon`, sysDictQuerySonRequest];

    
export type DictMainListSonQueryResult = NonNullable<Awaited<ReturnType<typeof dictMainListSon>>>
export type DictMainListSonQueryError = ErrorType<void>

export const useDictMainListSon = <TData = Awaited<ReturnType<typeof dictMainListSon>>, TError = ErrorType<void>>(
 sysDictQuerySonRequest: SysDictQuerySonRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof dictMainListSon>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDictMainListSonQueryKey(sysDictQuerySonRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof dictMainListSon>>> = () => dictMainListSon(sysDictQuerySonRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof dictMainListSon>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÁªÑ‰ª∂Â≠óÂÖ∏Ê†ë
 * @summary ÁªÑ‰ª∂Â≠óÂÖ∏Ê†ë
 */
export const listSysDictTree = (
    params?: ListSysDictTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysDictTreeResponse>(
      {url: `/boss/sysDict/listSysDictTree`, method: 'get',
        params, signal
    },
      );
    }
  

export const getListSysDictTreeQueryKey = (params?: ListSysDictTreeParams,) => [`/boss/sysDict/listSysDictTree`, ...(params ? [params]: [])];

    
export type ListSysDictTreeQueryResult = NonNullable<Awaited<ReturnType<typeof listSysDictTree>>>
export type ListSysDictTreeQueryError = ErrorType<void>

export const useListSysDictTree = <TData = Awaited<ReturnType<typeof listSysDictTree>>, TError = ErrorType<void>>(
 params?: ListSysDictTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSysDictTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSysDictTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listSysDictTree>>> = ({ signal }) => listSysDictTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listSysDictTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * SysDictClassfiyQuerySonRequest
 * @summary Ê†πÊçÆcodeÊï∞ÁªÑ„ÄÅÂ≠óÂÖ∏ÂàÜÁ±ªËé∑ÂèñÁªÑ‰ª∂Â≠óÂÖ∏ÂÄºlistÔºà‰∏ç‰º†ÂÄºËé∑ÂèñÊâÄÊúâÂ≠óÂÖ∏ÂÄºÔºâ
 */
export const selectByClassifyDic = (
    sysDictClassfiyQuerySonRequest: SysDictClassfiyQuerySonRequest,
 ) => {
      return customInstance<ResultListSysDictResponse>(
      {url: `/boss/sysDict/selectByClassify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDictClassfiyQuerySonRequest
    },
      );
    }
  

export const getSelectByClassifyDicQueryKey = (sysDictClassfiyQuerySonRequest: SysDictClassfiyQuerySonRequest,) => [`/boss/sysDict/selectByClassify`, sysDictClassfiyQuerySonRequest];

    
export type SelectByClassifyDicQueryResult = NonNullable<Awaited<ReturnType<typeof selectByClassifyDic>>>
export type SelectByClassifyDicQueryError = ErrorType<void>

export const useSelectByClassifyDic = <TData = Awaited<ReturnType<typeof selectByClassifyDic>>, TError = ErrorType<void>>(
 sysDictClassfiyQuerySonRequest: SysDictClassfiyQuerySonRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof selectByClassifyDic>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectByClassifyDicQueryKey(sysDictClassfiyQuerySonRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof selectByClassifyDic>>> = () => selectByClassifyDic(sysDictClassfiyQuerySonRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof selectByClassifyDic>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰º†ÂÖ•SysDictQueryRequest
 * @summary Ê†πÊçÆcodeËé∑ÂèñÁªÑ‰ª∂Â≠óÂÖ∏ÂÄºlistÔºà‰∏ç‰º†ÂÄºËé∑ÂèñÊâÄÊúâÂ≠óÂÖ∏ÂÄºÔºâ
 */
export const selectByCodeDic = (
    sysDictQueryRequest: SysDictQueryRequest,
 ) => {
      return customInstance<ResultListSysDictResponse>(
      {url: `/boss/sysDict/selectByCode`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDictQueryRequest
    },
      );
    }
  

export const getSelectByCodeDicQueryKey = (sysDictQueryRequest: SysDictQueryRequest,) => [`/boss/sysDict/selectByCode`, sysDictQueryRequest];

    
export type SelectByCodeDicQueryResult = NonNullable<Awaited<ReturnType<typeof selectByCodeDic>>>
export type SelectByCodeDicQueryError = ErrorType<void>

export const useSelectByCodeDic = <TData = Awaited<ReturnType<typeof selectByCodeDic>>, TError = ErrorType<void>>(
 sysDictQueryRequest: SysDictQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof selectByCodeDic>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectByCodeDicQueryKey(sysDictQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof selectByCodeDic>>> = () => selectByCodeDic(sysDictQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof selectByCodeDic>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ê∑ªÂä†„ÄÅÁºñËæëÂ≠óÂÖ∏
 * @summary Ê∑ªÂä†„ÄÅÁºñËæëÂ≠óÂÖ∏
 */
export const addOrEditDic = (
    sysDictAddOrEditRequest: SysDictAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDict/sysDict/addOrEdit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDictAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditDicMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditDic>>>
    export type AddOrEditDicMutationBody = SysDictAddOrEditRequest
    export type AddOrEditDicMutationError = ErrorType<void>

    export const useAddOrEditDic = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditDic>>, TError,{data: SysDictAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditDic>>, {data: SysDictAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditDic(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditDic>>, TError, {data: SysDictAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Â≠óÂÖ∏Êï∞ÊçÆnacosÂêåÊ≠•ËäÇÁÇπÊõ¥Êñ∞
 * @summary Â≠óÂÖ∏Êï∞ÊçÆnacosÂêåÊ≠•ËäÇÁÇπÊõ¥Êñ∞
 */
export const updateDictAsyncToNacos = (
    apiToken: ApiToken,
    params?: UpdateDictAsyncToNacosParams,
 ) => {
      return customInstance<void>(
      {url: `/boss/sysDict/updateDictAsyncToNacos`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: apiToken,
        params
    },
      );
    }
  


    export type UpdateDictAsyncToNacosMutationResult = NonNullable<Awaited<ReturnType<typeof updateDictAsyncToNacos>>>
    export type UpdateDictAsyncToNacosMutationBody = ApiToken
    export type UpdateDictAsyncToNacosMutationError = ErrorType<unknown>

    export const useUpdateDictAsyncToNacos = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDictAsyncToNacos>>, TError,{data: ApiToken;params?: UpdateDictAsyncToNacosParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDictAsyncToNacos>>, {data: ApiToken;params?: UpdateDictAsyncToNacosParams}> = (props) => {
          const {data,params} = props ?? {};

          return  updateDictAsyncToNacos(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateDictAsyncToNacos>>, TError, {data: ApiToken;params?: UpdateDictAsyncToNacosParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•SysDynamicDemoFormValue
 * @summary ËØ¶ÊÉÖ
 */
export const detailSysDynamicDemoFormValue = (
    sysDynamicDemoFormValueDetailRequest: SysDynamicDemoFormValueDetailRequest,
 ) => {
      return customInstance<ResultSysDynamicDemoFormValueResponse>(
      {url: `/boss/sysDynamicDemoFormValue/main/detail`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicDemoFormValueDetailRequest
    },
      );
    }
  


    export type DetailSysDynamicDemoFormValueMutationResult = NonNullable<Awaited<ReturnType<typeof detailSysDynamicDemoFormValue>>>
    export type DetailSysDynamicDemoFormValueMutationBody = SysDynamicDemoFormValueDetailRequest
    export type DetailSysDynamicDemoFormValueMutationError = ErrorType<void>

    export const useDetailSysDynamicDemoFormValue = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof detailSysDynamicDemoFormValue>>, TError,{data: SysDynamicDemoFormValueDetailRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof detailSysDynamicDemoFormValue>>, {data: SysDynamicDemoFormValueDetailRequest}> = (props) => {
          const {data} = props ?? {};

          return  detailSysDynamicDemoFormValue(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof detailSysDynamicDemoFormValue>>, TError, {data: SysDynamicDemoFormValueDetailRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysDynamicDemoFormValue = (
    sysDynamicDemoFormValueEditRequest: SysDynamicDemoFormValueEditRequest,
 ) => {
      return customInstance<ResultLong>(
      {url: `/boss/sysDynamicDemoFormValue/main/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicDemoFormValueEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysDynamicDemoFormValueMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysDynamicDemoFormValue>>>
    export type SaveOrUpdateSysDynamicDemoFormValueMutationBody = SysDynamicDemoFormValueEditRequest
    export type SaveOrUpdateSysDynamicDemoFormValueMutationError = ErrorType<void>

    export const useSaveOrUpdateSysDynamicDemoFormValue = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysDynamicDemoFormValue>>, TError,{data: SysDynamicDemoFormValueEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysDynamicDemoFormValue>>, {data: SysDynamicDemoFormValueEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysDynamicDemoFormValue(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysDynamicDemoFormValue>>, TError, {data: SysDynamicDemoFormValueEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÊâπÈáèÊõ¥Êñ∞Áä∂ÊÄÅ
 * @deprecated
 * @summary ÊâπÈáèÊõ¥Êñ∞Áä∂ÊÄÅ
 */
export const batchUpdateStatusDynamic = (
    sysDynamicBatchUpdateStatusRequest: SysDynamicBatchUpdateStatusRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicExcel/sysDynamicExcel/batchUpdateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicBatchUpdateStatusRequest
    },
      );
    }
  


    export type BatchUpdateStatusDynamicMutationResult = NonNullable<Awaited<ReturnType<typeof batchUpdateStatusDynamic>>>
    export type BatchUpdateStatusDynamicMutationBody = SysDynamicBatchUpdateStatusRequest
    export type BatchUpdateStatusDynamicMutationError = ErrorType<void>

    export const useBatchUpdateStatusDynamic = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchUpdateStatusDynamic>>, TError,{data: SysDynamicBatchUpdateStatusRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchUpdateStatusDynamic>>, {data: SysDynamicBatchUpdateStatusRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchUpdateStatusDynamic(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchUpdateStatusDynamic>>, TError, {data: SysDynamicBatchUpdateStatusRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËØ¶ÊÉÖ(id)
 * @deprecated
 * @summary ËØ¶ÊÉÖ(id)
 */
export const detailDynamic = (
    params: DetailDynamicParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicExcelResponse>(
      {url: `/boss/sysDynamicExcel/sysDynamicExcel/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailDynamicQueryKey = (params: DetailDynamicParams,) => [`/boss/sysDynamicExcel/sysDynamicExcel/detail`, ...(params ? [params]: [])];

    
export type DetailDynamicQueryResult = NonNullable<Awaited<ReturnType<typeof detailDynamic>>>
export type DetailDynamicQueryError = ErrorType<void>

export const useDetailDynamic = <TData = Awaited<ReturnType<typeof detailDynamic>>, TError = ErrorType<void>>(
 params: DetailDynamicParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailDynamic>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailDynamicQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailDynamic>>> = ({ signal }) => detailDynamic(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailDynamic>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËØ¶ÊÉÖ(code)
 * @deprecated
 * @summary ËØ¶ÊÉÖ(code)
 */
export const detailByCode = (
    params: DetailByCodeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicExcelResponse>(
      {url: `/boss/sysDynamicExcel/sysDynamicExcel/detailByCode`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailByCodeQueryKey = (params: DetailByCodeParams,) => [`/boss/sysDynamicExcel/sysDynamicExcel/detailByCode`, ...(params ? [params]: [])];

    
export type DetailByCodeQueryResult = NonNullable<Awaited<ReturnType<typeof detailByCode>>>
export type DetailByCodeQueryError = ErrorType<void>

export const useDetailByCode = <TData = Awaited<ReturnType<typeof detailByCode>>, TError = ErrorType<void>>(
 params: DetailByCodeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailByCode>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailByCodeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailByCode>>> = ({ signal }) => detailByCode(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailByCode>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂàÜÈ°µÂàóË°®
 * @deprecated
 * @summary ÂàÜÈ°µÂàóË°®
 */
export const listPageDynamic = (
    sysDynamicExcelQueryRequest: SysDynamicExcelQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysDynamicExcelPageResponse>(
      {url: `/boss/sysDynamicExcel/sysDynamicExcel/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicExcelQueryRequest
    },
      );
    }
  


    export type ListPageDynamicMutationResult = NonNullable<Awaited<ReturnType<typeof listPageDynamic>>>
    export type ListPageDynamicMutationBody = SysDynamicExcelQueryRequest
    export type ListPageDynamicMutationError = ErrorType<void>

    export const useListPageDynamic = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listPageDynamic>>, TError,{data: SysDynamicExcelQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listPageDynamic>>, {data: SysDynamicExcelQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  listPageDynamic(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listPageDynamic>>, TError, {data: SysDynamicExcelQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @deprecated
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateDynamic = (
    sysDynamicExcelEditRequest: SysDynamicExcelEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicExcel/sysDynamicExcel/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicExcelEditRequest
    },
      );
    }
  


    export type SaveOrUpdateDynamicMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateDynamic>>>
    export type SaveOrUpdateDynamicMutationBody = SysDynamicExcelEditRequest
    export type SaveOrUpdateDynamicMutationError = ErrorType<void>

    export const useSaveOrUpdateDynamic = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateDynamic>>, TError,{data: SysDynamicExcelEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateDynamic>>, {data: SysDynamicExcelEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateDynamic(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateDynamic>>, TError, {data: SysDynamicExcelEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Âà†Èô§
 * @deprecated
 * @summary Âà†Èô§
 */
export const deleteDynamicForm = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormInstance/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type DeleteDynamicFormMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDynamicForm>>>
    export type DeleteDynamicFormMutationBody = SysBaseIdsRequest
    export type DeleteDynamicFormMutationError = ErrorType<void>

    export const useDeleteDynamicForm = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDynamicForm>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDynamicForm>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteDynamicForm(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteDynamicForm>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËØ¶ÊÉÖ
 * @deprecated
 * @summary ËØ¶ÊÉÖ
 */
export const detailDynamicForm = (
    params: DetailDynamicFormParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicFormInstanceDetailResponse>(
      {url: `/boss/sysDynamicFormInstance/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailDynamicFormQueryKey = (params: DetailDynamicFormParams,) => [`/boss/sysDynamicFormInstance/detail`, ...(params ? [params]: [])];

    
export type DetailDynamicFormQueryResult = NonNullable<Awaited<ReturnType<typeof detailDynamicForm>>>
export type DetailDynamicFormQueryError = ErrorType<void>

export const useDetailDynamicForm = <TData = Awaited<ReturnType<typeof detailDynamicForm>>, TError = ErrorType<void>>(
 params: DetailDynamicFormParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailDynamicForm>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailDynamicFormQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailDynamicForm>>> = ({ signal }) => detailDynamicForm(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailDynamicForm>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @deprecated
 * @summary ËØ¶ÊÉÖ(Ê†πÊçÆÂ≠óÂÖ∏code)
 */
export const detailByCodeDynamicForm = (
    params: DetailByCodeDynamicFormParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicFormInstanceDetailResponse>(
      {url: `/boss/sysDynamicFormInstance/detailByCode`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailByCodeDynamicFormQueryKey = (params: DetailByCodeDynamicFormParams,) => [`/boss/sysDynamicFormInstance/detailByCode`, ...(params ? [params]: [])];

    
export type DetailByCodeDynamicFormQueryResult = NonNullable<Awaited<ReturnType<typeof detailByCodeDynamicForm>>>
export type DetailByCodeDynamicFormQueryError = ErrorType<void>

export const useDetailByCodeDynamicForm = <TData = Awaited<ReturnType<typeof detailByCodeDynamicForm>>, TError = ErrorType<void>>(
 params: DetailByCodeDynamicFormParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailByCodeDynamicForm>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailByCodeDynamicFormQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailByCodeDynamicForm>>> = ({ signal }) => detailByCodeDynamicForm(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailByCodeDynamicForm>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÁºñËæë
 * @deprecated
 * @summary ÁºñËæë
 */
export const editDynamicForm = (
    sysDynamicFormInstanceEditRequest: SysDynamicFormInstanceEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormInstance/edit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormInstanceEditRequest
    },
      );
    }
  


    export type EditDynamicFormMutationResult = NonNullable<Awaited<ReturnType<typeof editDynamicForm>>>
    export type EditDynamicFormMutationBody = SysDynamicFormInstanceEditRequest
    export type EditDynamicFormMutationError = ErrorType<void>

    export const useEditDynamicForm = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editDynamicForm>>, TError,{data: SysDynamicFormInstanceEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editDynamicForm>>, {data: SysDynamicFormInstanceEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  editDynamicForm(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof editDynamicForm>>, TError, {data: SysDynamicFormInstanceEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @deprecated
 * @summary excelÊï∞ÊçÆÂØºÂá∫
 */
export const exportDataDynamicForm = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultMap>(
      {url: `/boss/sysDynamicFormInstance/exportData`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type ExportDataDynamicFormMutationResult = NonNullable<Awaited<ReturnType<typeof exportDataDynamicForm>>>
    export type ExportDataDynamicFormMutationBody = SysBaseIdsRequest
    export type ExportDataDynamicFormMutationError = ErrorType<void>

    export const useExportDataDynamicForm = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof exportDataDynamicForm>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof exportDataDynamicForm>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  exportDataDynamicForm(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof exportDataDynamicForm>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÊâìÂç∞html
 * @deprecated
 * @summary ÊâìÂç∞html
 */
export const printDynamicForm = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/sysDynamicFormInstance/print`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type PrintDynamicFormMutationResult = NonNullable<Awaited<ReturnType<typeof printDynamicForm>>>
    export type PrintDynamicFormMutationBody = SysBaseIdsRequest
    export type PrintDynamicFormMutationError = ErrorType<void>

    export const usePrintDynamicForm = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof printDynamicForm>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof printDynamicForm>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  printDynamicForm(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof printDynamicForm>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢
 */
export const queryDynamicForm = (
    sysDynamicFormInstanceQueryRequest: SysDynamicFormInstanceQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysDynamicFormInstancePageResponse>(
      {url: `/boss/sysDynamicFormInstance/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormInstanceQueryRequest
    },
      );
    }
  

export const getQueryDynamicFormQueryKey = (sysDynamicFormInstanceQueryRequest: SysDynamicFormInstanceQueryRequest,) => [`/boss/sysDynamicFormInstance/query`, sysDynamicFormInstanceQueryRequest];

    
export type QueryDynamicFormQueryResult = NonNullable<Awaited<ReturnType<typeof queryDynamicForm>>>
export type QueryDynamicFormQueryError = ErrorType<void>

export const useQueryDynamicForm = <TData = Awaited<ReturnType<typeof queryDynamicForm>>, TError = ErrorType<void>>(
 sysDynamicFormInstanceQueryRequest: SysDynamicFormInstanceQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDynamicForm>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDynamicFormQueryKey(sysDynamicFormInstanceQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDynamicForm>>> = () => queryDynamicForm(sysDynamicFormInstanceQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof queryDynamicForm>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰º†ÂÖ•ids
 * @deprecated
 * @summary ‰øÆÊîπÁä∂ÊÄÅ
 */
export const updateStatusDynamicForm = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormInstance/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type UpdateStatusDynamicFormMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusDynamicForm>>>
    export type UpdateStatusDynamicFormMutationBody = SysBaseIdsRequest
    export type UpdateStatusDynamicFormMutationError = ErrorType<void>

    export const useUpdateStatusDynamicForm = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusDynamicForm>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusDynamicForm>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusDynamicForm(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusDynamicForm>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏öÂä°ÊúÄÁªà‰ΩøÁî®Ê®°Áâà,‰∏öÂä°Ë∞ÉÁî®Ê≠§Êé•Âè£
 * @summary Ê®°ÁâàËé∑Âèñ(Â∑≤ÂèëÂ∏ÉÊ®°Áâà)
 */
export const detailByCodeV2DynamicForm = (
    params: DetailByCodeV2DynamicFormParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicFormInstanceV2DetailResponse>(
      {url: `/boss/sysDynamicFormInstance/v2/detailByCode`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailByCodeV2DynamicFormQueryKey = (params: DetailByCodeV2DynamicFormParams,) => [`/boss/sysDynamicFormInstance/v2/detailByCode`, ...(params ? [params]: [])];

    
export type DetailByCodeV2DynamicFormQueryResult = NonNullable<Awaited<ReturnType<typeof detailByCodeV2DynamicForm>>>
export type DetailByCodeV2DynamicFormQueryError = ErrorType<void>

export const useDetailByCodeV2DynamicForm = <TData = Awaited<ReturnType<typeof detailByCodeV2DynamicForm>>, TError = ErrorType<void>>(
 params: DetailByCodeV2DynamicFormParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailByCodeV2DynamicForm>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailByCodeV2DynamicFormQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailByCodeV2DynamicForm>>> = ({ signal }) => detailByCodeV2DynamicForm(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailByCodeV2DynamicForm>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Âà†Èô§
 * @summary Âà†Èô§
 */
export const deleteDynamicFromModel = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormModel/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type DeleteDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDynamicFromModel>>>
    export type DeleteDynamicFromModelMutationBody = SysBaseIdsRequest
    export type DeleteDynamicFromModelMutationError = ErrorType<void>

    export const useDeleteDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDynamicFromModel>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDynamicFromModel>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteDynamicFromModel>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂèëÂ∏É
 * @summary ÂèëÂ∏É
 */
export const deployDynamicFromModel = (
    sysDynamicFormModelDeployEditRequest: SysDynamicFormModelDeployEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormModel/deploy`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormModelDeployEditRequest
    },
      );
    }
  


    export type DeployDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof deployDynamicFromModel>>>
    export type DeployDynamicFromModelMutationBody = SysDynamicFormModelDeployEditRequest
    export type DeployDynamicFromModelMutationError = ErrorType<void>

    export const useDeployDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deployDynamicFromModel>>, TError,{data: SysDynamicFormModelDeployEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deployDynamicFromModel>>, {data: SysDynamicFormModelDeployEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  deployDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deployDynamicFromModel>>, TError, {data: SysDynamicFormModelDeployEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËØ¶ÊÉÖ
 * @deprecated
 * @summary ËØ¶ÊÉÖ
 */
export const detailDynamicFromModel = (
    params: DetailDynamicFromModelParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicFormModelDetailResponse>(
      {url: `/boss/sysDynamicFormModel/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailDynamicFromModelQueryKey = (params: DetailDynamicFromModelParams,) => [`/boss/sysDynamicFormModel/detail`, ...(params ? [params]: [])];

    
export type DetailDynamicFromModelQueryResult = NonNullable<Awaited<ReturnType<typeof detailDynamicFromModel>>>
export type DetailDynamicFromModelQueryError = ErrorType<void>

export const useDetailDynamicFromModel = <TData = Awaited<ReturnType<typeof detailDynamicFromModel>>, TError = ErrorType<void>>(
 params: DetailDynamicFromModelParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailDynamicFromModel>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailDynamicFromModelQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailDynamicFromModel>>> = ({ signal }) => detailDynamicFromModel(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailDynamicFromModel>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary excelÊï∞ÊçÆÂØºÂá∫
 */
export const exportDataDynamicFromModel = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultMap>(
      {url: `/boss/sysDynamicFormModel/exportData`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type ExportDataDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof exportDataDynamicFromModel>>>
    export type ExportDataDynamicFromModelMutationBody = SysBaseIdsRequest
    export type ExportDataDynamicFromModelMutationError = ErrorType<void>

    export const useExportDataDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof exportDataDynamicFromModel>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof exportDataDynamicFromModel>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  exportDataDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof exportDataDynamicFromModel>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®‰∫éË°®ÂçïÊ®°ÁâàÁºñËæëÔºåÈÄâÊã©Ë°®Ê†ºÁªÑ‰ª∂
 * @summary Ëé∑ÂèñË°®Ê†ºÊ®°ÁâàÂàóË°®
 */
export const getExcelList = (
    apiToken: ApiToken,
 ) => {
      return customInstance<ResultListIdNameResponse>(
      {url: `/boss/sysDynamicFormModel/getExcelList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: apiToken
    },
      );
    }
  


    export type GetExcelListMutationResult = NonNullable<Awaited<ReturnType<typeof getExcelList>>>
    export type GetExcelListMutationBody = ApiToken
    export type GetExcelListMutationError = ErrorType<void>

    export const useGetExcelList = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getExcelList>>, TError,{data: ApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getExcelList>>, {data: ApiToken}> = (props) => {
          const {data} = props ?? {};

          return  getExcelList(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getExcelList>>, TError, {data: ApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÊâìÂç∞html
 * @summary ÊâìÂç∞html
 */
export const printDynamicFromModel = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultString>(
      {url: `/boss/sysDynamicFormModel/print`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type PrintDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof printDynamicFromModel>>>
    export type PrintDynamicFromModelMutationBody = SysBaseIdsRequest
    export type PrintDynamicFromModelMutationError = ErrorType<void>

    export const usePrintDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof printDynamicFromModel>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof printDynamicFromModel>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  printDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof printDynamicFromModel>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢
 */
export const queryDynamicFromModel = (
    sysDynamicFormModelQueryRequest: SysDynamicFormModelQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysDynamicFormModelPageResponse>(
      {url: `/boss/sysDynamicFormModel/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormModelQueryRequest
    },
      );
    }
  

export const getQueryDynamicFromModelQueryKey = (sysDynamicFormModelQueryRequest: SysDynamicFormModelQueryRequest,) => [`/boss/sysDynamicFormModel/query`, sysDynamicFormModelQueryRequest];

    
export type QueryDynamicFromModelQueryResult = NonNullable<Awaited<ReturnType<typeof queryDynamicFromModel>>>
export type QueryDynamicFromModelQueryError = ErrorType<void>

export const useQueryDynamicFromModel = <TData = Awaited<ReturnType<typeof queryDynamicFromModel>>, TError = ErrorType<void>>(
 sysDynamicFormModelQueryRequest: SysDynamicFormModelQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDynamicFromModel>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDynamicFromModelQueryKey(sysDynamicFormModelQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDynamicFromModel>>> = () => queryDynamicFromModel(sysDynamicFormModelQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof queryDynamicFromModel>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @deprecated
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateDynamicFromModel = (
    sysDynamicFormModelEditRequest: SysDynamicFormModelEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormModel/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormModelEditRequest
    },
      );
    }
  


    export type SaveOrUpdateDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModel>>>
    export type SaveOrUpdateDynamicFromModelMutationBody = SysDynamicFormModelEditRequest
    export type SaveOrUpdateDynamicFromModelMutationError = ErrorType<void>

    export const useSaveOrUpdateDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModel>>, TError,{data: SysDynamicFormModelEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModel>>, {data: SysDynamicFormModelEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModel>>, TError, {data: SysDynamicFormModelEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•ids
 * @summary ‰øÆÊîπÁä∂ÊÄÅ
 */
export const updateStatusDynamicFromModel = (
    sysBaseIdsRequest: SysBaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormModel/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysBaseIdsRequest
    },
      );
    }
  


    export type UpdateStatusDynamicFromModelMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusDynamicFromModel>>>
    export type UpdateStatusDynamicFromModelMutationBody = SysBaseIdsRequest
    export type UpdateStatusDynamicFromModelMutationError = ErrorType<void>

    export const useUpdateStatusDynamicFromModel = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusDynamicFromModel>>, TError,{data: SysBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusDynamicFromModel>>, {data: SysBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusDynamicFromModel(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusDynamicFromModel>>, TError, {data: SysBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËØ¶ÊÉÖ:v2
 * @summary ËØ¶ÊÉÖ:v2
 */
export const detailDynamicFromModelV2 = (
    params: DetailDynamicFromModelV2Params,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysDynamicFormModelDetailResponse>(
      {url: `/boss/sysDynamicFormModel/v2/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailDynamicFromModelV2QueryKey = (params: DetailDynamicFromModelV2Params,) => [`/boss/sysDynamicFormModel/v2/detail`, ...(params ? [params]: [])];

    
export type DetailDynamicFromModelV2QueryResult = NonNullable<Awaited<ReturnType<typeof detailDynamicFromModelV2>>>
export type DetailDynamicFromModelV2QueryError = ErrorType<void>

export const useDetailDynamicFromModelV2 = <TData = Awaited<ReturnType<typeof detailDynamicFromModelV2>>, TError = ErrorType<void>>(
 params: DetailDynamicFromModelV2Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailDynamicFromModelV2>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailDynamicFromModelV2QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailDynamicFromModelV2>>> = ({ signal }) => detailDynamicFromModelV2(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailDynamicFromModelV2>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ:v2
 * @summary Êñ∞Â¢û/‰øÆÊîπ:v2
 */
export const saveOrUpdateDynamicFromModelV2 = (
    sysDynamicFormModelEditRequest: SysDynamicFormModelEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysDynamicFormModel/v2/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysDynamicFormModelEditRequest
    },
      );
    }
  


    export type SaveOrUpdateDynamicFromModelV2MutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModelV2>>>
    export type SaveOrUpdateDynamicFromModelV2MutationBody = SysDynamicFormModelEditRequest
    export type SaveOrUpdateDynamicFromModelV2MutationError = ErrorType<void>

    export const useSaveOrUpdateDynamicFromModelV2 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModelV2>>, TError,{data: SysDynamicFormModelEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModelV2>>, {data: SysDynamicFormModelEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateDynamicFromModelV2(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateDynamicFromModelV2>>, TError, {data: SysDynamicFormModelEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Âà†Èô§
 * @summary Âà†Èô§
 */
export const deleteSysEmployee = (
    basicBaseIdsRequest: BasicBaseIdsRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/boss/sysEmployee/main/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicBaseIdsRequest
    },
      );
    }
  


    export type DeleteSysEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysEmployee>>>
    export type DeleteSysEmployeeMutationBody = BasicBaseIdsRequest
    export type DeleteSysEmployeeMutationError = ErrorType<void>

    export const useDeleteSysEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysEmployee>>, TError,{data: BasicBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysEmployee>>, {data: BasicBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysEmployee>>, TError, {data: BasicBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂØºÂá∫
 * @summary ÂØºÂá∫
 */
export const exportSysEmployee = (
    params?: ExportSysEmployeeParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/sysEmployee/main/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportSysEmployeeQueryKey = (params?: ExportSysEmployeeParams,) => [`/boss/sysEmployee/main/export`, ...(params ? [params]: [])];

    
export type ExportSysEmployeeQueryResult = NonNullable<Awaited<ReturnType<typeof exportSysEmployee>>>
export type ExportSysEmployeeQueryError = ErrorType<unknown>

export const useExportSysEmployee = <TData = Awaited<ReturnType<typeof exportSysEmployee>>, TError = ErrorType<unknown>>(
 params?: ExportSysEmployeeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportSysEmployee>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportSysEmployeeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportSysEmployee>>> = ({ signal }) => exportSysEmployee(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportSysEmployee>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êü•ËØ¢‰ΩøÁî®Ôºà‰ªÖÊü•ËØ¢ÊúâÊïàÊï∞ÊçÆÔºâÂàóË°®
 * @summary Êü•ËØ¢‰ΩøÁî®Ôºà‰ªÖÊü•ËØ¢ÊúâÊïàÊï∞ÊçÆÔºâÂàóË°®
 */
export const queryListSysEmployee = (
    sysEmployeeListQueryRequest: SysEmployeeListQueryRequest,
 ) => {
      return customInstance<SysEmployeeResponse[]>(
      {url: `/boss/sysEmployee/main/queryList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysEmployeeListQueryRequest
    },
      );
    }
  


    export type QueryListSysEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof queryListSysEmployee>>>
    export type QueryListSysEmployeeMutationBody = SysEmployeeListQueryRequest
    export type QueryListSysEmployeeMutationError = ErrorType<void>

    export const useQueryListSysEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryListSysEmployee>>, TError,{data: SysEmployeeListQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryListSysEmployee>>, {data: SysEmployeeListQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  queryListSysEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryListSysEmployee>>, TError, {data: SysEmployeeListQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êü•ËØ¢-ÂàóË°®
 * @summary Êü•ËØ¢-ÂàóË°®
 */
export const queryNoSqlSysEmployee = (
    sysEmployeeQueryNoSqlRequest: SysEmployeeQueryNoSqlRequest,
 ) => {
      return customInstance<IwubidaPageResultSysEmployeeResponse>(
      {url: `/boss/sysEmployee/main/queryNoSql`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysEmployeeQueryNoSqlRequest
    },
      );
    }
  


    export type QueryNoSqlSysEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof queryNoSqlSysEmployee>>>
    export type QueryNoSqlSysEmployeeMutationBody = SysEmployeeQueryNoSqlRequest
    export type QueryNoSqlSysEmployeeMutationError = ErrorType<void>

    export const useQueryNoSqlSysEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryNoSqlSysEmployee>>, TError,{data: SysEmployeeQueryNoSqlRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryNoSqlSysEmployee>>, {data: SysEmployeeQueryNoSqlRequest}> = (props) => {
          const {data} = props ?? {};

          return  queryNoSqlSysEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryNoSqlSysEmployee>>, TError, {data: SysEmployeeQueryNoSqlRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÈáçÁΩÆÂØÜÁ†Å
 * @summary ÈáçÁΩÆÂØÜÁ†Å
 */
export const reset = (
    params: ResetParams,
 signal?: AbortSignal
) => {
      return customInstance<boolean>(
      {url: `/boss/sysEmployee/main/reset`, method: 'get',
        params, signal
    },
      );
    }
  

export const getResetQueryKey = (params: ResetParams,) => [`/boss/sysEmployee/main/reset`, ...(params ? [params]: [])];

    
export type ResetQueryResult = NonNullable<Awaited<ReturnType<typeof reset>>>
export type ResetQueryError = ErrorType<void>

export const useReset = <TData = Awaited<ReturnType<typeof reset>>, TError = ErrorType<void>>(
 params: ResetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof reset>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResetQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof reset>>> = ({ signal }) => reset(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof reset>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateEmployee = (
    sysEmployeeEditRequest: SysEmployeeEditRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/boss/sysEmployee/main/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysEmployeeEditRequest
    },
      );
    }
  


    export type SaveOrUpdateEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateEmployee>>>
    export type SaveOrUpdateEmployeeMutationBody = SysEmployeeEditRequest
    export type SaveOrUpdateEmployeeMutationError = ErrorType<void>

    export const useSaveOrUpdateEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateEmployee>>, TError,{data: SysEmployeeEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateEmployee>>, {data: SysEmployeeEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateEmployee>>, TError, {data: SysEmployeeEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áä∂ÊÄÅ‰øÆÊîπ{normal:Âú®ËÅå/Ê≠£Â∏∏,exit:Á¶ªËÅå}
 * @summary Áä∂ÊÄÅ‰øÆÊîπ
 */
export const updateStatusSysEmployee = (
    basicBaseIdsRequest: BasicBaseIdsRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/boss/sysEmployee/main/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: basicBaseIdsRequest
    },
      );
    }
  


    export type UpdateStatusSysEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusSysEmployee>>>
    export type UpdateStatusSysEmployeeMutationBody = BasicBaseIdsRequest
    export type UpdateStatusSysEmployeeMutationError = ErrorType<void>

    export const useUpdateStatusSysEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusSysEmployee>>, TError,{data: BasicBaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusSysEmployee>>, {data: BasicBaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusSysEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusSysEmployee>>, TError, {data: BasicBaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂØºÂá∫ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ÂØºÂá∫ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditExportTemplate = (
    sysExcelTemplateExportAddOrEditRequest: SysExcelTemplateExportAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/excel/addOrEditExportTemplate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysExcelTemplateExportAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditExportTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditExportTemplate>>>
    export type AddOrEditExportTemplateMutationBody = SysExcelTemplateExportAddOrEditRequest
    export type AddOrEditExportTemplateMutationError = ErrorType<void>

    export const useAddOrEditExportTemplate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditExportTemplate>>, TError,{data: SysExcelTemplateExportAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditExportTemplate>>, {data: SysExcelTemplateExportAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditExportTemplate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditExportTemplate>>, TError, {data: SysExcelTemplateExportAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂØºÂÖ•ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ÂØºÂÖ•ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditImportTemplate = (
    sysExcelTemplateImportAddOrEditRequest: SysExcelTemplateImportAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/excel/addOrEditImportTemplate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysExcelTemplateImportAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditImportTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditImportTemplate>>>
    export type AddOrEditImportTemplateMutationBody = SysExcelTemplateImportAddOrEditRequest
    export type AddOrEditImportTemplateMutationError = ErrorType<void>

    export const useAddOrEditImportTemplate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditImportTemplate>>, TError,{data: SysExcelTemplateImportAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditImportTemplate>>, {data: SysExcelTemplateImportAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditImportTemplate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditImportTemplate>>, TError, {data: SysExcelTemplateImportAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂØºÂá∫ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ÂØºÂá∫ÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditPrintTemplate = (
    sysExcelTemplatePrintAddOrEditRequest: SysExcelTemplatePrintAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/excel/addOrEditPrintTemplate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysExcelTemplatePrintAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditPrintTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditPrintTemplate>>>
    export type AddOrEditPrintTemplateMutationBody = SysExcelTemplatePrintAddOrEditRequest
    export type AddOrEditPrintTemplateMutationError = ErrorType<void>

    export const useAddOrEditPrintTemplate = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditPrintTemplate>>, TError,{data: SysExcelTemplatePrintAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditPrintTemplate>>, {data: SysExcelTemplatePrintAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditPrintTemplate(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditPrintTemplate>>, TError, {data: SysExcelTemplatePrintAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆÊâπÈáèÊõ¥ÊîπÁä∂ÊÄÅ
 * @summary ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆÊâπÈáèÊõ¥ÊîπÁä∂ÊÄÅ
 */
export const batchUpdateStatusExcelTemp = (
    sysExcelTemplateUpdateStatusRequest: SysExcelTemplateUpdateStatusRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/excel/batchUpdateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysExcelTemplateUpdateStatusRequest
    },
      );
    }
  


    export type BatchUpdateStatusExcelTempMutationResult = NonNullable<Awaited<ReturnType<typeof batchUpdateStatusExcelTemp>>>
    export type BatchUpdateStatusExcelTempMutationBody = SysExcelTemplateUpdateStatusRequest
    export type BatchUpdateStatusExcelTempMutationError = ErrorType<void>

    export const useBatchUpdateStatusExcelTemp = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchUpdateStatusExcelTemp>>, TError,{data: SysExcelTemplateUpdateStatusRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchUpdateStatusExcelTemp>>, {data: SysExcelTemplateUpdateStatusRequest}> = (props) => {
          const {data} = props ?? {};

          return  batchUpdateStatusExcelTemp(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof batchUpdateStatusExcelTemp>>, TError, {data: SysExcelTemplateUpdateStatusRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ê®°Áâà‰∏ãËΩΩ
 * @summary Ê®°Áâà‰∏ãËΩΩ
 */
export const downExcelTemplate = (
    params: DownExcelTemplateParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/sys/excel/downExcelTemplate`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDownExcelTemplateQueryKey = (params: DownExcelTemplateParams,) => [`/boss/sys/excel/downExcelTemplate`, ...(params ? [params]: [])];

    
export type DownExcelTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof downExcelTemplate>>>
export type DownExcelTemplateQueryError = ErrorType<unknown>

export const useDownExcelTemplate = <TData = Awaited<ReturnType<typeof downExcelTemplate>>, TError = ErrorType<unknown>>(
 params: DownExcelTemplateParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof downExcelTemplate>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownExcelTemplateQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof downExcelTemplate>>> = ({ signal }) => downExcelTemplate(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof downExcelTemplate>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆÂàÜÈ°µÂàóË°®
 * @summary ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆÂàÜÈ°µÂàóË°®
 */
export const listPageExcelTemp = (
    sysExcelTemplatePageQueryRequest: SysExcelTemplatePageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysExcelTemplateResponse>(
      {url: `/boss/sys/excel/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysExcelTemplatePageQueryRequest
    },
      );
    }
  

export const getListPageExcelTempQueryKey = (sysExcelTemplatePageQueryRequest: SysExcelTemplatePageQueryRequest,) => [`/boss/sys/excel/listPage`, sysExcelTemplatePageQueryRequest];

    
export type ListPageExcelTempQueryResult = NonNullable<Awaited<ReturnType<typeof listPageExcelTemp>>>
export type ListPageExcelTempQueryError = ErrorType<void>

export const useListPageExcelTemp = <TData = Awaited<ReturnType<typeof listPageExcelTemp>>, TError = ErrorType<void>>(
 sysExcelTemplatePageQueryRequest: SysExcelTemplatePageQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listPageExcelTemp>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPageExcelTempQueryKey(sysExcelTemplatePageQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPageExcelTemp>>> = () => listPageExcelTemp(sysExcelTemplatePageQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof listPageExcelTemp>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆËØ¶ÊÉÖ
 * @summary ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÊâìÂç∞ÈÖçÁΩÆËØ¶ÊÉÖ
 */
export const queryDetailInfoByIdExcelTemp = (
    params: QueryDetailInfoByIdExcelTempParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysExcelTemplateResponse>(
      {url: `/boss/sys/excel/queryDetailInfoById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryDetailInfoByIdExcelTempQueryKey = (params: QueryDetailInfoByIdExcelTempParams,) => [`/boss/sys/excel/queryDetailInfoById`, ...(params ? [params]: [])];

    
export type QueryDetailInfoByIdExcelTempQueryResult = NonNullable<Awaited<ReturnType<typeof queryDetailInfoByIdExcelTemp>>>
export type QueryDetailInfoByIdExcelTempQueryError = ErrorType<void>

export const useQueryDetailInfoByIdExcelTemp = <TData = Awaited<ReturnType<typeof queryDetailInfoByIdExcelTemp>>, TError = ErrorType<void>>(
 params: QueryDetailInfoByIdExcelTempParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDetailInfoByIdExcelTemp>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDetailInfoByIdExcelTempQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDetailInfoByIdExcelTemp>>> = ({ signal }) => queryDetailInfoByIdExcelTemp(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryDetailInfoByIdExcelTemp>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditConfigs = (
    sysFunAttributeAddOrEditRequest: SysFunAttributeAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/fun/addOrEditConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditConfigs>>>
    export type AddOrEditConfigsMutationBody = SysFunAttributeAddOrEditRequest
    export type AddOrEditConfigsMutationError = ErrorType<void>

    export const useAddOrEditConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditConfigs>>, TError,{data: SysFunAttributeAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditConfigs>>, {data: SysFunAttributeAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditConfigs>>, TError, {data: SysFunAttributeAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë 
 * @summary ‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë  
 */
export const addOrEditDetailConfigs = (
    sysFunAttributeDetailAddOrEditRequest: SysFunAttributeDetailAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/fun/detail/addOrEditDetailConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeDetailAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditDetailConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditDetailConfigs>>>
    export type AddOrEditDetailConfigsMutationBody = SysFunAttributeDetailAddOrEditRequest
    export type AddOrEditDetailConfigsMutationError = ErrorType<void>

    export const useAddOrEditDetailConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditDetailConfigs>>, TError,{data: SysFunAttributeDetailAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditDetailConfigs>>, {data: SysFunAttributeDetailAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditDetailConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditDetailConfigs>>, TError, {data: SysFunAttributeDetailAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 * @summary ‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 */
export const getDetailConfigs = (
    sysFunAttributeListRequest: SysFunAttributeListRequest,
 ) => {
      return customInstance<ResultSysFunAttributeDetailResponse>(
      {url: `/boss/sys/fun/detail/getDetailConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeListRequest
    },
      );
    }
  


    export type GetDetailConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof getDetailConfigs>>>
    export type GetDetailConfigsMutationBody = SysFunAttributeListRequest
    export type GetDetailConfigsMutationError = ErrorType<void>

    export const useGetDetailConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getDetailConfigs>>, TError,{data: SysFunAttributeListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getDetailConfigs>>, {data: SysFunAttributeListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getDetailConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getDetailConfigs>>, TError, {data: SysFunAttributeListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 * @summary ‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 */
export const getConfigs = (
    sysFunAttributeListRequest: SysFunAttributeListRequest,
 ) => {
      return customInstance<ResultSysFunAttributeResponse>(
      {url: `/boss/sys/fun/getConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeListRequest
    },
      );
    }
  


    export type GetConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof getConfigs>>>
    export type GetConfigsMutationBody = SysFunAttributeListRequest
    export type GetConfigsMutationError = ErrorType<void>

    export const useGetConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getConfigs>>, TError,{data: SysFunAttributeListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getConfigs>>, {data: SysFunAttributeListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getConfigs>>, TError, {data: SysFunAttributeListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªË°®Êü•ËØ¢ÊñπÊ°àÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ‰∏ªË°®Êü•ËØ¢ÊñπÊ°àÈÖçÁΩÆÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditQueryConfigs = (
    sysFunAttributeMainQueryAddRequest: SysFunAttributeMainQueryAddRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/fun/query/addOrEditConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeMainQueryAddRequest
    },
      );
    }
  


    export type AddOrEditQueryConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditQueryConfigs>>>
    export type AddOrEditQueryConfigsMutationBody = SysFunAttributeMainQueryAddRequest
    export type AddOrEditQueryConfigsMutationError = ErrorType<void>

    export const useAddOrEditQueryConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditQueryConfigs>>, TError,{data: SysFunAttributeMainQueryAddRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditQueryConfigs>>, {data: SysFunAttributeMainQueryAddRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditQueryConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditQueryConfigs>>, TError, {data: SysFunAttributeMainQueryAddRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªË°®Êü•ËØ¢ÊñπÊ°àÊü•ËØ¢
 * @summary ‰∏ªË°®Êü•ËØ¢ÊñπÊ°àÊü•ËØ¢
 */
export const getQueryConfigs = (
    sysFunAttributeListRequest: SysFunAttributeListRequest,
 ) => {
      return customInstance<ResultSysFunAttributeMainQueryResponse>(
      {url: `/boss/sys/fun/query/getQueryConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeListRequest
    },
      );
    }
  


    export type GetQueryConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof getQueryConfigs>>>
    export type GetQueryConfigsMutationBody = SysFunAttributeListRequest
    export type GetQueryConfigsMutationError = ErrorType<void>

    export const useGetQueryConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getQueryConfigs>>, TError,{data: SysFunAttributeListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getQueryConfigs>>, {data: SysFunAttributeListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getQueryConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getQueryConfigs>>, TError, {data: SysFunAttributeListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditQueryConfigs1 = (
    sysFunAttributeQueryUserAddOrEditRequest: SysFunAttributeQueryUserAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/user/fun/addOrEditQueryConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeQueryUserAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditQueryConfigs1MutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditQueryConfigs1>>>
    export type AddOrEditQueryConfigs1MutationBody = SysFunAttributeQueryUserAddOrEditRequest
    export type AddOrEditQueryConfigs1MutationError = ErrorType<void>

    export const useAddOrEditQueryConfigs1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditQueryConfigs1>>, TError,{data: SysFunAttributeQueryUserAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditQueryConfigs1>>, {data: SysFunAttributeQueryUserAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditQueryConfigs1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditQueryConfigs1>>, TError, {data: SysFunAttributeQueryUserAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂà†Èô§
 * @summary Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂà†Èô§
 */
export const deleteUserQueryConfigs = (
    sysFunAttributeQueryUserDeleteRequest: SysFunAttributeQueryUserDeleteRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/user/fun/deleteUserQueryConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeQueryUserDeleteRequest
    },
      );
    }
  


    export type DeleteUserQueryConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserQueryConfigs>>>
    export type DeleteUserQueryConfigsMutationBody = SysFunAttributeQueryUserDeleteRequest
    export type DeleteUserQueryConfigsMutationError = ErrorType<void>

    export const useDeleteUserQueryConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserQueryConfigs>>, TError,{data: SysFunAttributeQueryUserDeleteRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserQueryConfigs>>, {data: SysFunAttributeQueryUserDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteUserQueryConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteUserQueryConfigs>>, TError, {data: SysFunAttributeQueryUserDeleteRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 * @summary Áî®Êà∑‰∏ªÂ≠êË°®ÊòéÁªÜÂ≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 */
export const getDetailConfigs1 = (
    sysFunAttributeListRequest: SysFunAttributeListRequest,
 ) => {
      return customInstance<ResultSysFunAttributeDetailResponse>(
      {url: `/boss/user/fun/detail/getDetailConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeListRequest
    },
      );
    }
  


    export type GetDetailConfigs1MutationResult = NonNullable<Awaited<ReturnType<typeof getDetailConfigs1>>>
    export type GetDetailConfigs1MutationBody = SysFunAttributeListRequest
    export type GetDetailConfigs1MutationError = ErrorType<void>

    export const useGetDetailConfigs1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getDetailConfigs1>>, TError,{data: SysFunAttributeListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getDetailConfigs1>>, {data: SysFunAttributeListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getDetailConfigs1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getDetailConfigs1>>, TError, {data: SysFunAttributeListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 * @summary Áî®Êà∑‰∏ªË°®ÂàóË°®Â≠óÊÆµÈÖçÁΩÆÊü•ËØ¢
 */
export const getConfigs1 = (
    sysFunAttributeListRequest: SysFunAttributeListRequest,
 ) => {
      return customInstance<ResultSysFunAttributeResponse>(
      {url: `/boss/user/fun/getConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeListRequest
    },
      );
    }
  


    export type GetConfigs1MutationResult = NonNullable<Awaited<ReturnType<typeof getConfigs1>>>
    export type GetConfigs1MutationBody = SysFunAttributeListRequest
    export type GetConfigs1MutationError = ErrorType<void>

    export const useGetConfigs1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getConfigs1>>, TError,{data: SysFunAttributeListRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getConfigs1>>, {data: SysFunAttributeListRequest}> = (props) => {
          const {data} = props ?? {};

          return  getConfigs1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getConfigs1>>, TError, {data: SysFunAttributeListRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂàóË°®ÊòéÁªÜ
 * @summary Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂàóË°®ÊòéÁªÜ
 */
export const getUserQueryConfigs = (
    sysFunAttributeQueryUserQueryRequest: SysFunAttributeQueryUserQueryRequest,
 ) => {
      return customInstance<ResultListSysFunAttributeQueryUserConfigsResponse>(
      {url: `/boss/user/fun/getUserQueryConfigs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeQueryUserQueryRequest
    },
      );
    }
  


    export type GetUserQueryConfigsMutationResult = NonNullable<Awaited<ReturnType<typeof getUserQueryConfigs>>>
    export type GetUserQueryConfigsMutationBody = SysFunAttributeQueryUserQueryRequest
    export type GetUserQueryConfigsMutationError = ErrorType<void>

    export const useGetUserQueryConfigs = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getUserQueryConfigs>>, TError,{data: SysFunAttributeQueryUserQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getUserQueryConfigs>>, {data: SysFunAttributeQueryUserQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getUserQueryConfigs(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getUserQueryConfigs>>, TError, {data: SysFunAttributeQueryUserQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂàóË°®
 * @summary Áî®Êà∑Ëá™ÂÆö‰πâÊü•ËØ¢ÊñπÊ°àÂàóË°®
 */
export const getUserQuerySchemes = (
    sysFunAttributeQueryUserPlanQueryRequest: SysFunAttributeQueryUserPlanQueryRequest,
 ) => {
      return customInstance<ResultListSysFunAttributeQueryUserQueryResponse>(
      {url: `/boss/user/fun/getUserQuerySchemes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysFunAttributeQueryUserPlanQueryRequest
    },
      );
    }
  


    export type GetUserQuerySchemesMutationResult = NonNullable<Awaited<ReturnType<typeof getUserQuerySchemes>>>
    export type GetUserQuerySchemesMutationBody = SysFunAttributeQueryUserPlanQueryRequest
    export type GetUserQuerySchemesMutationError = ErrorType<void>

    export const useGetUserQuerySchemes = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getUserQuerySchemes>>, TError,{data: SysFunAttributeQueryUserPlanQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getUserQuerySchemes>>, {data: SysFunAttributeQueryUserPlanQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  getUserQuerySchemes(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof getUserQuerySchemes>>, TError, {data: SysFunAttributeQueryUserPlanQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Á≥ªÁªüÊó•ÂøóÂàÜÈ°µÂàóË°®
 * @deprecated
 * @summary Á≥ªÁªüÊó•ÂøóÂàÜÈ°µÂàóË°®
 */
export const listPageSysLog = (
    sysLogPageQueryRequest: SysLogPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysLogResponse>(
      {url: `/boss/sys/log/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysLogPageQueryRequest
    },
      );
    }
  


    export type ListPageSysLogMutationResult = NonNullable<Awaited<ReturnType<typeof listPageSysLog>>>
    export type ListPageSysLogMutationBody = SysLogPageQueryRequest
    export type ListPageSysLogMutationError = ErrorType<void>

    export const useListPageSysLog = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listPageSysLog>>, TError,{data: SysLogPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listPageSysLog>>, {data: SysLogPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  listPageSysLog(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listPageSysLog>>, TError, {data: SysLogPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Á≥ªÁªüÊó•ÂøóËØ¶ÊÉÖ
 * @deprecated
 * @summary Á≥ªÁªüÊó•ÂøóËØ¶ÊÉÖ
 */
export const queryDetailInfoByIdSysLog = (
    apiToken: ApiToken,
    params: QueryDetailInfoByIdSysLogParams,
 ) => {
      return customInstance<ResultSysLogResponse>(
      {url: `/boss/sys/log/queryDetailInfoById`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: apiToken,
        params
    },
      );
    }
  


    export type QueryDetailInfoByIdSysLogMutationResult = NonNullable<Awaited<ReturnType<typeof queryDetailInfoByIdSysLog>>>
    export type QueryDetailInfoByIdSysLogMutationBody = ApiToken
    export type QueryDetailInfoByIdSysLogMutationError = ErrorType<void>

    export const useQueryDetailInfoByIdSysLog = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryDetailInfoByIdSysLog>>, TError,{data: ApiToken;params: QueryDetailInfoByIdSysLogParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryDetailInfoByIdSysLog>>, {data: ApiToken;params: QueryDetailInfoByIdSysLogParams}> = (props) => {
          const {data,params} = props ?? {};

          return  queryDetailInfoByIdSysLog(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryDetailInfoByIdSysLog>>, TError, {data: ApiToken;params: QueryDetailInfoByIdSysLogParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÁªÑÁªáÊú∫ÊûÑÊ∑ªÂä†„ÄÅÁºñËæë
 * @summary ËèúÂçïÊ∑ªÂä†„ÄÅÁºñËæë
 */
export const addOrEditMenu = (
    sysMenuAddOrEditRequest: SysMenuAddOrEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/menu/addOrEditMenu`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysMenuAddOrEditRequest
    },
      );
    }
  


    export type AddOrEditMenuMutationResult = NonNullable<Awaited<ReturnType<typeof addOrEditMenu>>>
    export type AddOrEditMenuMutationBody = SysMenuAddOrEditRequest
    export type AddOrEditMenuMutationError = ErrorType<void>

    export const useAddOrEditMenu = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrEditMenu>>, TError,{data: SysMenuAddOrEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrEditMenu>>, {data: SysMenuAddOrEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  addOrEditMenu(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addOrEditMenu>>, TError, {data: SysMenuAddOrEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËèúÂçïÂà†Èô§
 * @summary ËèúÂçïÂà†Èô§
 */
export const deleteMenu = (
    sysMenuDeleteRequest: SysMenuDeleteRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sys/menu/deleteMenu`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysMenuDeleteRequest
    },
      );
    }
  


    export type DeleteMenuMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMenu>>>
    export type DeleteMenuMutationBody = SysMenuDeleteRequest
    export type DeleteMenuMutationError = ErrorType<void>

    export const useDeleteMenu = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMenu>>, TError,{data: SysMenuDeleteRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMenu>>, {data: SysMenuDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteMenu(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteMenu>>, TError, {data: SysMenuDeleteRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ê†πÊçÆmenuCodeÔºåmoduleCodeÊü•ËØ¢ÁïåÈù¢ÊåâÈíÆ
 * @summary Êü•ËØ¢ÁïåÈù¢ÊåâÈíÆ
 */
export const listButton = (
    params: ListButtonParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysMenuResponse>(
      {url: `/boss/sys/menu/listButton`, method: 'get',
        params, signal
    },
      );
    }
  

export const getListButtonQueryKey = (params: ListButtonParams,) => [`/boss/sys/menu/listButton`, ...(params ? [params]: [])];

    
export type ListButtonQueryResult = NonNullable<Awaited<ReturnType<typeof listButton>>>
export type ListButtonQueryError = ErrorType<void>

export const useListButton = <TData = Awaited<ReturnType<typeof listButton>>, TError = ErrorType<void>>(
 params: ListButtonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listButton>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListButtonQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listButton>>> = ({ signal }) => listButton(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listButton>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËèúÂçïÂàÜÈ°µÂàóË°®
 * @summary ËèúÂçïÂàÜÈ°µÂàóË°®
 */
export const listPageMenu = (
    sysMenuQueryPageRequest: SysMenuQueryPageRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysMenuResponse>(
      {url: `/boss/sys/menu/listPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysMenuQueryPageRequest
    },
      );
    }
  


    export type ListPageMenuMutationResult = NonNullable<Awaited<ReturnType<typeof listPageMenu>>>
    export type ListPageMenuMutationBody = SysMenuQueryPageRequest
    export type ListPageMenuMutationError = ErrorType<void>

    export const useListPageMenu = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listPageMenu>>, TError,{data: SysMenuQueryPageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listPageMenu>>, {data: SysMenuQueryPageRequest}> = (props) => {
          const {data} = props ?? {};

          return  listPageMenu(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof listPageMenu>>, TError, {data: SysMenuQueryPageRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ê†πÊçÆ‰∏äÁ∫ßËèúÂçïIDÔºåÊü•ËØ¢‰∏ãÁ∫ßËèúÂçïÂàóË°®
 * @summary Ê†πÊçÆ‰∏äÁ∫ßËèúÂçïIDÔºåÊü•ËØ¢‰∏ãÁ∫ßËèúÂçïÂàóË°®
 */
export const menuListSon = (
    sysMenuQuerySonRequest: SysMenuQuerySonRequest,
 ) => {
      return customInstance<ResultListSysMenuResponse>(
      {url: `/boss/sys/menu/listSon`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysMenuQuerySonRequest
    },
      );
    }
  

export const getMenuListSonQueryKey = (sysMenuQuerySonRequest: SysMenuQuerySonRequest,) => [`/boss/sys/menu/listSon`, sysMenuQuerySonRequest];

    
export type MenuListSonQueryResult = NonNullable<Awaited<ReturnType<typeof menuListSon>>>
export type MenuListSonQueryError = ErrorType<void>

export const useMenuListSon = <TData = Awaited<ReturnType<typeof menuListSon>>, TError = ErrorType<void>>(
 sysMenuQuerySonRequest: SysMenuQuerySonRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof menuListSon>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMenuListSonQueryKey(sysMenuQuerySonRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof menuListSon>>> = () => menuListSon(sysMenuQuerySonRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof menuListSon>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËèúÂçïÊ†ë
 * @summary ËèúÂçïÊ†ë
 */
export const listSysMenuTree = (
    params?: ListSysMenuTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysMenuTreeResponse>(
      {url: `/boss/sys/menu/listSysMenuTree`, method: 'get',
        params, signal
    },
      );
    }
  

export const getListSysMenuTreeQueryKey = (params?: ListSysMenuTreeParams,) => [`/boss/sys/menu/listSysMenuTree`, ...(params ? [params]: [])];

    
export type ListSysMenuTreeQueryResult = NonNullable<Awaited<ReturnType<typeof listSysMenuTree>>>
export type ListSysMenuTreeQueryError = ErrorType<void>

export const useListSysMenuTree = <TData = Awaited<ReturnType<typeof listSysMenuTree>>, TError = ErrorType<void>>(
 params?: ListSysMenuTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSysMenuTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSysMenuTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listSysMenuTree>>> = ({ signal }) => listSysMenuTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listSysMenuTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËèúÂçïÊ†ëÊåâÈíÆÊùÉÈôê‰∏ãÂèë
 * @summary ËèúÂçïÊ†ëÊåâÈíÆÊùÉÈôê‰∏ãÂèë
 */
export const listSysMenuTreeButton = (
    params?: ListSysMenuTreeButtonParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysMenuTreeResponse>(
      {url: `/boss/sys/menu/listSysMenuTreeButton`, method: 'get',
        params, signal
    },
      );
    }
  

export const getListSysMenuTreeButtonQueryKey = (params?: ListSysMenuTreeButtonParams,) => [`/boss/sys/menu/listSysMenuTreeButton`, ...(params ? [params]: [])];

    
export type ListSysMenuTreeButtonQueryResult = NonNullable<Awaited<ReturnType<typeof listSysMenuTreeButton>>>
export type ListSysMenuTreeButtonQueryError = ErrorType<void>

export const useListSysMenuTreeButton = <TData = Awaited<ReturnType<typeof listSysMenuTreeButton>>, TError = ErrorType<void>>(
 params?: ListSysMenuTreeButtonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSysMenuTreeButton>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSysMenuTreeButtonQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof listSysMenuTreeButton>>> = ({ signal }) => listSysMenuTreeButton(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof listSysMenuTreeButton>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êü•ËØ¢ËèúÂçïËØ¶ÊÉÖ
 * @summary Êü•ËØ¢ËèúÂçïËØ¶ÊÉÖ
 */
export const queryDetailInfoByIdMenu = (
    params: QueryDetailInfoByIdMenuParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysMenuResponse>(
      {url: `/boss/sys/menu/queryDetailInfoById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryDetailInfoByIdMenuQueryKey = (params: QueryDetailInfoByIdMenuParams,) => [`/boss/sys/menu/queryDetailInfoById`, ...(params ? [params]: [])];

    
export type QueryDetailInfoByIdMenuQueryResult = NonNullable<Awaited<ReturnType<typeof queryDetailInfoByIdMenu>>>
export type QueryDetailInfoByIdMenuQueryError = ErrorType<void>

export const useQueryDetailInfoByIdMenu = <TData = Awaited<ReturnType<typeof queryDetailInfoByIdMenu>>, TError = ErrorType<void>>(
 params: QueryDetailInfoByIdMenuParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDetailInfoByIdMenu>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDetailInfoByIdMenuQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDetailInfoByIdMenu>>> = ({ signal }) => queryDetailInfoByIdMenu(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryDetailInfoByIdMenu>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÊâÄÊúâÁªÑÁªáÁ±ªÂûã
 * @summary ÊâÄÊúâÁªÑÁªáÁ±ªÂûã 
 */
export const allOrgType = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysDictComponentResponse>(
      {url: `/boss/sysOrganization/main/alltype`, method: 'get', signal
    },
      );
    }
  

export const getAllOrgTypeQueryKey = () => [`/boss/sysOrganization/main/alltype`];

    
export type AllOrgTypeQueryResult = NonNullable<Awaited<ReturnType<typeof allOrgType>>>
export type AllOrgTypeQueryError = ErrorType<void>

export const useAllOrgType = <TData = Awaited<ReturnType<typeof allOrgType>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof allOrgType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAllOrgTypeQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof allOrgType>>> = ({ signal }) => allOrgType(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof allOrgType>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Âà†Èô§
 * @summary Âà†Èô§
 */
export const deleteSysOrganization = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOrganization/main/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type DeleteSysOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysOrganization>>>
    export type DeleteSysOrganizationMutationBody = BaseIdsRequest
    export type DeleteSysOrganizationMutationError = ErrorType<void>

    export const useDeleteSysOrganization = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysOrganization>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysOrganization>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysOrganization(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysOrganization>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•SysOrganization
 * @summary ËØ¶ÊÉÖ
 */
export const detailSysOrganization = (
    params: DetailSysOrganizationParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysOrganizationResponse>(
      {url: `/boss/sysOrganization/main/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailSysOrganizationQueryKey = (params: DetailSysOrganizationParams,) => [`/boss/sysOrganization/main/detail`, ...(params ? [params]: [])];

    
export type DetailSysOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof detailSysOrganization>>>
export type DetailSysOrganizationQueryError = ErrorType<void>

export const useDetailSysOrganization = <TData = Awaited<ReturnType<typeof detailSysOrganization>>, TError = ErrorType<void>>(
 params: DetailSysOrganizationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailSysOrganization>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailSysOrganizationQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailSysOrganization>>> = ({ signal }) => detailSysOrganization(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailSysOrganization>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂØºÂá∫
 * @summary ÂØºÂá∫
 */
export const exportSysOrganization = (
    params?: ExportSysOrganizationParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/sysOrganization/main/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportSysOrganizationQueryKey = (params?: ExportSysOrganizationParams,) => [`/boss/sysOrganization/main/export`, ...(params ? [params]: [])];

    
export type ExportSysOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof exportSysOrganization>>>
export type ExportSysOrganizationQueryError = ErrorType<unknown>

export const useExportSysOrganization = <TData = Awaited<ReturnType<typeof exportSysOrganization>>, TError = ErrorType<unknown>>(
 params?: ExportSysOrganizationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportSysOrganization>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportSysOrganizationQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportSysOrganization>>> = ({ signal }) => exportSysOrganization(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportSysOrganization>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÊâÄÊúâÁªÑÁªáÊú∫ÊûÑ- ‰∏ãÊãâÔºàÈÄâÊã©‰∏äÁ∫ßÔºâ
 * @summary ÊâÄÊúâÁªÑÁªáÊú∫ÊûÑ- ‰∏ãÊãâÔºàÈÄâÊã©‰∏äÁ∫ßÔºâ
 */
export const organizationListSysOrganization = (
    sysOrganizationQueryRequest: SysOrganizationQueryRequest,
 ) => {
      return customInstance<ResultListSysOrganizationResponse>(
      {url: `/boss/sysOrganization/main/organizationList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysOrganizationQueryRequest
    },
      );
    }
  

export const getOrganizationListSysOrganizationQueryKey = (sysOrganizationQueryRequest: SysOrganizationQueryRequest,) => [`/boss/sysOrganization/main/organizationList`, sysOrganizationQueryRequest];

    
export type OrganizationListSysOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof organizationListSysOrganization>>>
export type OrganizationListSysOrganizationQueryError = ErrorType<void>

export const useOrganizationListSysOrganization = <TData = Awaited<ReturnType<typeof organizationListSysOrganization>>, TError = ErrorType<void>>(
 sysOrganizationQueryRequest: SysOrganizationQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof organizationListSysOrganization>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationListSysOrganizationQueryKey(sysOrganizationQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationListSysOrganization>>> = () => organizationListSysOrganization(sysOrganizationQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof organizationListSysOrganization>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢ 
 */
export const querySysOrganization = (
    sysOrganizationQueryRequest: SysOrganizationQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysOrganizationResponse>(
      {url: `/boss/sysOrganization/main/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysOrganizationQueryRequest
    },
      );
    }
  

export const getQuerySysOrganizationQueryKey = (sysOrganizationQueryRequest: SysOrganizationQueryRequest,) => [`/boss/sysOrganization/main/query`, sysOrganizationQueryRequest];

    
export type QuerySysOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof querySysOrganization>>>
export type QuerySysOrganizationQueryError = ErrorType<void>

export const useQuerySysOrganization = <TData = Awaited<ReturnType<typeof querySysOrganization>>, TError = ErrorType<void>>(
 sysOrganizationQueryRequest: SysOrganizationQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysOrganization>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysOrganizationQueryKey(sysOrganizationQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysOrganization>>> = () => querySysOrganization(sysOrganizationQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysOrganization>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * sapÊï∞ÊçÆÂêåÊ≠•Âà∞Ëê•ÈîÄÂπ≥Âè∞
 * @summary sapÊï∞ÊçÆÂêåÊ≠•Âà∞Ëê•ÈîÄÂπ≥Âè∞
 */
export const synchPullToDmp = (
    sysSapToDmpRequest: SysSapToDmpRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOrganization/main/sap/synchPullToDmp`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysSapToDmpRequest
    },
      );
    }
  


    export type SynchPullToDmpMutationResult = NonNullable<Awaited<ReturnType<typeof synchPullToDmp>>>
    export type SynchPullToDmpMutationBody = SysSapToDmpRequest
    export type SynchPullToDmpMutationError = ErrorType<void>

    export const useSynchPullToDmp = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof synchPullToDmp>>, TError,{data: SysSapToDmpRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof synchPullToDmp>>, {data: SysSapToDmpRequest}> = (props) => {
          const {data} = props ?? {};

          return  synchPullToDmp(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof synchPullToDmp>>, TError, {data: SysSapToDmpRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Ëé∑ÂèñsapÈ°∂Á∫ßËäÇÁÇπÂÖ¨Âè∏ÂàóË°®
 * @summary Ëé∑ÂèñsapÈ°∂Á∫ßËäÇÁÇπÂÖ¨Âè∏ÂàóË°®
 */
export const topNodeList = (
    params?: TopNodeListParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysSapOrganizationPullResponse>(
      {url: `/boss/sysOrganization/main/sap/topNodeList`, method: 'get',
        params, signal
    },
      );
    }
  

export const getTopNodeListQueryKey = (params?: TopNodeListParams,) => [`/boss/sysOrganization/main/sap/topNodeList`, ...(params ? [params]: [])];

    
export type TopNodeListQueryResult = NonNullable<Awaited<ReturnType<typeof topNodeList>>>
export type TopNodeListQueryError = ErrorType<void>

export const useTopNodeList = <TData = Awaited<ReturnType<typeof topNodeList>>, TError = ErrorType<void>>(
 params?: TopNodeListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof topNodeList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTopNodeListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof topNodeList>>> = ({ signal }) => topNodeList(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof topNodeList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysOrganization = (
    sysOrganizationEditRequest: SysOrganizationEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOrganization/main/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysOrganizationEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysOrganization>>>
    export type SaveOrUpdateSysOrganizationMutationBody = SysOrganizationEditRequest
    export type SaveOrUpdateSysOrganizationMutationError = ErrorType<void>

    export const useSaveOrUpdateSysOrganization = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysOrganization>>, TError,{data: SysOrganizationEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysOrganization>>, {data: SysOrganizationEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysOrganization(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysOrganization>>, TError, {data: SysOrganizationEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•ids{status=disable,enable(ÂêØÁî®,Á¶ÅÁî®)}
 * @summary ‰øÆÊîπÁä∂ÊÄÅ
 */
export const updateStatusSysOrganization = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOrganization/main/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type UpdateStatusSysOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateStatusSysOrganization>>>
    export type UpdateStatusSysOrganizationMutationBody = BaseIdsRequest
    export type UpdateStatusSysOrganizationMutationError = ErrorType<void>

    export const useUpdateStatusSysOrganization = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatusSysOrganization>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatusSysOrganization>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatusSysOrganization(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatusSysOrganization>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Êü•ËØ¢‰∏™‰∫∫‰ø°ÊÅØ
 * @summary Êü•ËØ¢‰∏™‰∫∫‰ø°ÊÅØ 
 */
export const queryOwnSysEmployee = (
    dmsApiToken: DmsApiToken,
 ) => {
      return customInstance<ResultSysEmployeeResponse>(
      {url: `/boss/sysOwnInfo/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dmsApiToken
    },
      );
    }
  


    export type QueryOwnSysEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof queryOwnSysEmployee>>>
    export type QueryOwnSysEmployeeMutationBody = DmsApiToken
    export type QueryOwnSysEmployeeMutationError = ErrorType<void>

    export const useQueryOwnSysEmployee = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryOwnSysEmployee>>, TError,{data: DmsApiToken}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryOwnSysEmployee>>, {data: DmsApiToken}> = (props) => {
          const {data} = props ?? {};

          return  queryOwnSysEmployee(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryOwnSysEmployee>>, TError, {data: DmsApiToken}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÂèëÈÄÅÁü≠‰ø°È™åËØÅÁ†Å
 * @summary ÂèëÈÄÅÁü≠‰ø°È™åËØÅÁ†Å
 */
export const sendCodeAdmin = (
    smsUpdatePasswordEditRequest: SmsUpdatePasswordEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOwnInfo/sendCode`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: smsUpdatePasswordEditRequest
    },
      );
    }
  


    export type SendCodeAdminMutationResult = NonNullable<Awaited<ReturnType<typeof sendCodeAdmin>>>
    export type SendCodeAdminMutationBody = SmsUpdatePasswordEditRequest
    export type SendCodeAdminMutationError = ErrorType<void>

    export const useSendCodeAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendCodeAdmin>>, TError,{data: SmsUpdatePasswordEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendCodeAdmin>>, {data: SmsUpdatePasswordEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendCodeAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof sendCodeAdmin>>, TError, {data: SmsUpdatePasswordEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰øÆÊîπÂØÜÁ†Å
 * @summary ‰øÆÊîπÂØÜÁ†Å 
 */
export const updatePasswordAdmin = (
    forgetPwdEditRequest: ForgetPwdEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysOwnInfo/updatePassword`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: forgetPwdEditRequest
    },
      );
    }
  


    export type UpdatePasswordAdminMutationResult = NonNullable<Awaited<ReturnType<typeof updatePasswordAdmin>>>
    export type UpdatePasswordAdminMutationBody = ForgetPwdEditRequest
    export type UpdatePasswordAdminMutationError = ErrorType<void>

    export const useUpdatePasswordAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePasswordAdmin>>, TError,{data: ForgetPwdEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePasswordAdmin>>, {data: ForgetPwdEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  updatePasswordAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updatePasswordAdmin>>, TError, {data: ForgetPwdEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ÁªÑÁªáÊû∂ÊûÑÊ†ë
 * @summary ÁªÑÁªáÊû∂ÊûÑÊ†ë
 */
export const organizationTree = (
    params?: OrganizationTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysOrganizationTreeResponse>(
      {url: `/boss/sysPermiss/tree/organization`, method: 'get',
        params, signal
    },
      );
    }
  

export const getOrganizationTreeQueryKey = (params?: OrganizationTreeParams,) => [`/boss/sysPermiss/tree/organization`, ...(params ? [params]: [])];

    
export type OrganizationTreeQueryResult = NonNullable<Awaited<ReturnType<typeof organizationTree>>>
export type OrganizationTreeQueryError = ErrorType<void>

export const useOrganizationTree = <TData = Awaited<ReturnType<typeof organizationTree>>, TError = ErrorType<void>>(
 params?: OrganizationTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof organizationTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationTree>>> = ({ signal }) => organizationTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof organizationTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËßíËâ≤Ê†ë
 * @summary ËßíËâ≤Ê†ë
 */
export const roleTree = (
    params?: RoleTreeParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysRoleResponse>(
      {url: `/boss/sysPermiss/tree/role`, method: 'get',
        params, signal
    },
      );
    }
  

export const getRoleTreeQueryKey = (params?: RoleTreeParams,) => [`/boss/sysPermiss/tree/role`, ...(params ? [params]: [])];

    
export type RoleTreeQueryResult = NonNullable<Awaited<ReturnType<typeof roleTree>>>
export type RoleTreeQueryError = ErrorType<void>

export const useRoleTree = <TData = Awaited<ReturnType<typeof roleTree>>, TError = ErrorType<void>>(
 params?: RoleTreeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof roleTree>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRoleTreeQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof roleTree>>> = ({ signal }) => roleTree(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof roleTree>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Âà†Èô§
 * @summary Âà†Èô§
 */
export const deleteSysPost = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysPost/main/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type DeleteSysPostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysPost>>>
    export type DeleteSysPostMutationBody = BaseIdsRequest
    export type DeleteSysPostMutationError = ErrorType<void>

    export const useDeleteSysPost = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysPost>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysPost>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysPost(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysPost>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•SysPost
 * @summary ËØ¶ÊÉÖ
 */
export const detail = (
    params: DetailParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysPostResponse>(
      {url: `/boss/sysPost/main/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailQueryKey = (params: DetailParams,) => [`/boss/sysPost/main/detail`, ...(params ? [params]: [])];

    
export type DetailQueryResult = NonNullable<Awaited<ReturnType<typeof detail>>>
export type DetailQueryError = ErrorType<void>

export const useDetail = <TData = Awaited<ReturnType<typeof detail>>, TError = ErrorType<void>>(
 params: DetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detail>>> = ({ signal }) => detail(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detail>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂØºÂá∫
 * @summary ÂØºÂá∫
 */
export const exportSysPost = (
    params?: ExportSysPostParams,
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/boss/sysPost/main/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExportSysPostQueryKey = (params?: ExportSysPostParams,) => [`/boss/sysPost/main/export`, ...(params ? [params]: [])];

    
export type ExportSysPostQueryResult = NonNullable<Awaited<ReturnType<typeof exportSysPost>>>
export type ExportSysPostQueryError = ErrorType<unknown>

export const useExportSysPost = <TData = Awaited<ReturnType<typeof exportSysPost>>, TError = ErrorType<unknown>>(
 params?: ExportSysPostParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof exportSysPost>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportSysPostQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportSysPost>>> = ({ signal }) => exportSysPost(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof exportSysPost>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÊâÄÊúâÂ≤ó‰Ωç -‰∏ãÊãâ
 * @summary ÊâÄÊúâÂ≤ó‰Ωç -‰∏ãÊãâ 
 */
export const postListAdmin = (
    
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysPostResponse>(
      {url: `/boss/sysPost/main/postList`, method: 'get', signal
    },
      );
    }
  

export const getPostListAdminQueryKey = () => [`/boss/sysPost/main/postList`];

    
export type PostListAdminQueryResult = NonNullable<Awaited<ReturnType<typeof postListAdmin>>>
export type PostListAdminQueryError = ErrorType<void>

export const usePostListAdmin = <TData = Awaited<ReturnType<typeof postListAdmin>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postListAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostListAdminQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof postListAdmin>>> = ({ signal }) => postListAdmin(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof postListAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢ 
 */
export const querySysPost = (
    sysPostQueryRequest: SysPostQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysPostResponse>(
      {url: `/boss/sysPost/main/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysPostQueryRequest
    },
      );
    }
  

export const getQuerySysPostQueryKey = (sysPostQueryRequest: SysPostQueryRequest,) => [`/boss/sysPost/main/query`, sysPostQueryRequest];

    
export type QuerySysPostQueryResult = NonNullable<Awaited<ReturnType<typeof querySysPost>>>
export type QuerySysPostQueryError = ErrorType<void>

export const useQuerySysPost = <TData = Awaited<ReturnType<typeof querySysPost>>, TError = ErrorType<void>>(
 sysPostQueryRequest: SysPostQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysPost>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysPostQueryKey(sysPostQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysPost>>> = () => querySysPost(sysPostQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysPost>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysPost = (
    sysPostEditRequest: SysPostEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysPost/main/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysPostEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysPostMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysPost>>>
    export type SaveOrUpdateSysPostMutationBody = SysPostEditRequest
    export type SaveOrUpdateSysPostMutationError = ErrorType<void>

    export const useSaveOrUpdateSysPost = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysPost>>, TError,{data: SysPostEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysPost>>, {data: SysPostEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysPost(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysPost>>, TError, {data: SysPostEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•ids
 * @summary ‰øÆÊîπÁä∂ÊÄÅ
 */
export const updateStatus2 = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysPost/main/updateStatus`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type UpdateStatus2MutationResult = NonNullable<Awaited<ReturnType<typeof updateStatus2>>>
    export type UpdateStatus2MutationBody = BaseIdsRequest
    export type UpdateStatus2MutationError = ErrorType<void>

    export const useUpdateStatus2 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStatus2>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStatus2>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateStatus2(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateStatus2>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËßíËâ≤ÂàÜÁ±ªÂà†Èô§
 * @summary ËßíËâ≤ÂàÜÁ±ªÂà†Èô§
 */
export const deleteSysRoleClassfiy = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultSysRoleClassfiyDeleteResponse>(
      {url: `/boss/sysRoleClassfiy/main/sysRoleClassfiy/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type DeleteSysRoleClassfiyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysRoleClassfiy>>>
    export type DeleteSysRoleClassfiyMutationBody = BaseIdsRequest
    export type DeleteSysRoleClassfiyMutationError = ErrorType<void>

    export const useDeleteSysRoleClassfiy = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysRoleClassfiy>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysRoleClassfiy>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysRoleClassfiy(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysRoleClassfiy>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ËßíËâ≤ÂàÜÁ±ªÊü•ËØ¢-list
 * @summary ËßíËâ≤ÂàÜÁ±ªÊü•ËØ¢-list
 */
export const querySysRoleClassfiy = (
    sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest,
 ) => {
      return customInstance<ResultListSysRoleClassfiyResponse>(
      {url: `/boss/sysRoleClassfiy/main/sysRoleClassfiy/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRoleClassfiyQueryRequest
    },
      );
    }
  

export const getQuerySysRoleClassfiyQueryKey = (sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest,) => [`/boss/sysRoleClassfiy/main/sysRoleClassfiy/query`, sysRoleClassfiyQueryRequest];

    
export type QuerySysRoleClassfiyQueryResult = NonNullable<Awaited<ReturnType<typeof querySysRoleClassfiy>>>
export type QuerySysRoleClassfiyQueryError = ErrorType<void>

export const useQuerySysRoleClassfiy = <TData = Awaited<ReturnType<typeof querySysRoleClassfiy>>, TError = ErrorType<void>>(
 sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysRoleClassfiy>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysRoleClassfiyQueryKey(sysRoleClassfiyQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysRoleClassfiy>>> = () => querySysRoleClassfiy(sysRoleClassfiyQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysRoleClassfiy>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËßíËâ≤ÂàÜÁ±ªÊü•ËØ¢-ÂàÜÈ°µ
 * @summary ËßíËâ≤ÂàÜÁ±ªÊü•ËØ¢-ÂàÜÈ°µ
 */
export const queryPageSysRoleClassfiy = (
    sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysRoleClassfiyResponse>(
      {url: `/boss/sysRoleClassfiy/main/sysRoleClassfiy/queryPage`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRoleClassfiyQueryRequest
    },
      );
    }
  

export const getQueryPageSysRoleClassfiyQueryKey = (sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest,) => [`/boss/sysRoleClassfiy/main/sysRoleClassfiy/queryPage`, sysRoleClassfiyQueryRequest];

    
export type QueryPageSysRoleClassfiyQueryResult = NonNullable<Awaited<ReturnType<typeof queryPageSysRoleClassfiy>>>
export type QueryPageSysRoleClassfiyQueryError = ErrorType<void>

export const useQueryPageSysRoleClassfiy = <TData = Awaited<ReturnType<typeof queryPageSysRoleClassfiy>>, TError = ErrorType<void>>(
 sysRoleClassfiyQueryRequest: SysRoleClassfiyQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryPageSysRoleClassfiy>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryPageSysRoleClassfiyQueryKey(sysRoleClassfiyQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryPageSysRoleClassfiy>>> = () => queryPageSysRoleClassfiy(sysRoleClassfiyQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof queryPageSysRoleClassfiy>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ËßíËâ≤ÂàÜÁ±ªÊñ∞Â¢û/‰øÆÊîπ
 * @summary ËßíËâ≤ÂàÜÁ±ªÊñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysRoleClassfiy = (
    sysRoleClassfiyEditRequest: SysRoleClassfiyEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysRoleClassfiy/main/sysRoleClassfiy/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRoleClassfiyEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysRoleClassfiyMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysRoleClassfiy>>>
    export type SaveOrUpdateSysRoleClassfiyMutationBody = SysRoleClassfiyEditRequest
    export type SaveOrUpdateSysRoleClassfiyMutationError = ErrorType<void>

    export const useSaveOrUpdateSysRoleClassfiy = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysRoleClassfiy>>, TError,{data: SysRoleClassfiyEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysRoleClassfiy>>, {data: SysRoleClassfiyEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysRoleClassfiy(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysRoleClassfiy>>, TError, {data: SysRoleClassfiyEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Âà†Èô§
 * @summary Âà†Èô§
 */
export const deleteSysRole = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultSysRoleDeleteResponse>(
      {url: `/boss/sysRole/main/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type DeleteSysRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSysRole>>>
    export type DeleteSysRoleMutationBody = BaseIdsRequest
    export type DeleteSysRoleMutationError = ErrorType<void>

    export const useDeleteSysRole = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSysRole>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSysRole>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSysRole(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteSysRole>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰º†ÂÖ•SysRole
 * @summary ËØ¶ÊÉÖÔºàÂíåÊùÉÈôê‰∏ÄËµ∑Êü•Âá∫Ôºâ
 */
export const detailSysRole = (
    params: DetailSysRoleParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultSysRoleDetailResponse>(
      {url: `/boss/sysRole/main/detail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDetailSysRoleQueryKey = (params: DetailSysRoleParams,) => [`/boss/sysRole/main/detail`, ...(params ? [params]: [])];

    
export type DetailSysRoleQueryResult = NonNullable<Awaited<ReturnType<typeof detailSysRole>>>
export type DetailSysRoleQueryError = ErrorType<void>

export const useDetailSysRole = <TData = Awaited<ReturnType<typeof detailSysRole>>, TError = ErrorType<void>>(
 params: DetailSysRoleParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof detailSysRole>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailSysRoleQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof detailSysRole>>> = ({ signal }) => detailSysRole(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof detailSysRole>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êü•ËØ¢
 * @summary Êü•ËØ¢ 
 */
export const querySysRole = (
    sysRoleQueryRequest: SysRoleQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultSysRoleResponse>(
      {url: `/boss/sysRole/main/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRoleQueryRequest
    },
      );
    }
  

export const getQuerySysRoleQueryKey = (sysRoleQueryRequest: SysRoleQueryRequest,) => [`/boss/sysRole/main/query`, sysRoleQueryRequest];

    
export type QuerySysRoleQueryResult = NonNullable<Awaited<ReturnType<typeof querySysRole>>>
export type QuerySysRoleQueryError = ErrorType<void>

export const useQuerySysRole = <TData = Awaited<ReturnType<typeof querySysRole>>, TError = ErrorType<void>>(
 sysRoleQueryRequest: SysRoleQueryRequest, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof querySysRole>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuerySysRoleQueryKey(sysRoleQueryRequest);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof querySysRole>>> = () => querySysRole(sysRoleQueryRequest, );


  

  const query = useQuery<Awaited<ReturnType<typeof querySysRole>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Êñ∞Â¢û/‰øÆÊîπ
 * @summary Êñ∞Â¢û/‰øÆÊîπ
 */
export const saveOrUpdateSysRole = (
    sysRoleEditRequest: SysRoleEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysRole/main/saveOrUpdate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRoleEditRequest
    },
      );
    }
  


    export type SaveOrUpdateSysRoleMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrUpdateSysRole>>>
    export type SaveOrUpdateSysRoleMutationBody = SysRoleEditRequest
    export type SaveOrUpdateSysRoleMutationError = ErrorType<void>

    export const useSaveOrUpdateSysRole = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrUpdateSysRole>>, TError,{data: SysRoleEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrUpdateSysRole>>, {data: SysRoleEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrUpdateSysRole(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof saveOrUpdateSysRole>>, TError, {data: SysRoleEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * Â≠óÊÆµÊùÉÈôêÊ†ë
 * @summary Â≠óÊÆµÊùÉÈôêÊ†ë
 */
export const columnTreeAdmin = (
    params?: ColumnTreeAdminParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysRoleColumnDetailResponse>(
      {url: `/boss/sysRolePermiss/tree/col`, method: 'get',
        params, signal
    },
      );
    }
  

export const getColumnTreeAdminQueryKey = (params?: ColumnTreeAdminParams,) => [`/boss/sysRolePermiss/tree/col`, ...(params ? [params]: [])];

    
export type ColumnTreeAdminQueryResult = NonNullable<Awaited<ReturnType<typeof columnTreeAdmin>>>
export type ColumnTreeAdminQueryError = ErrorType<void>

export const useColumnTreeAdmin = <TData = Awaited<ReturnType<typeof columnTreeAdmin>>, TError = ErrorType<void>>(
 params?: ColumnTreeAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof columnTreeAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getColumnTreeAdminQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof columnTreeAdmin>>> = ({ signal }) => columnTreeAdmin(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof columnTreeAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Á≥ªÁªüËßíËâ≤-Êï∞ÊçÆÊùÉÈôêÊ†ë
 * @summary Á≥ªÁªüËßíËâ≤-Êï∞ÊçÆÊùÉÈôêÊ†ë
 */
export const dataTreeAdmin = (
    params?: DataTreeAdminParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysRoleDataScopeResponse>(
      {url: `/boss/sysRolePermiss/tree/data`, method: 'get',
        params, signal
    },
      );
    }
  

export const getDataTreeAdminQueryKey = (params?: DataTreeAdminParams,) => [`/boss/sysRolePermiss/tree/data`, ...(params ? [params]: [])];

    
export type DataTreeAdminQueryResult = NonNullable<Awaited<ReturnType<typeof dataTreeAdmin>>>
export type DataTreeAdminQueryError = ErrorType<void>

export const useDataTreeAdmin = <TData = Awaited<ReturnType<typeof dataTreeAdmin>>, TError = ErrorType<void>>(
 params?: DataTreeAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof dataTreeAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataTreeAdminQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof dataTreeAdmin>>> = ({ signal }) => dataTreeAdmin(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof dataTreeAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÂäüËÉΩÊùÉÈôêÊ†ë
 * @summary ÂäüËÉΩÊùÉÈôêÊ†ë
 */
export const functionTreeAdmin = (
    params?: FunctionTreeAdminParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysRoleMenuDetailResponse>(
      {url: `/boss/sysRolePermiss/tree/function`, method: 'get',
        params, signal
    },
      );
    }
  

export const getFunctionTreeAdminQueryKey = (params?: FunctionTreeAdminParams,) => [`/boss/sysRolePermiss/tree/function`, ...(params ? [params]: [])];

    
export type FunctionTreeAdminQueryResult = NonNullable<Awaited<ReturnType<typeof functionTreeAdmin>>>
export type FunctionTreeAdminQueryError = ErrorType<void>

export const useFunctionTreeAdmin = <TData = Awaited<ReturnType<typeof functionTreeAdmin>>, TError = ErrorType<void>>(
 params?: FunctionTreeAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof functionTreeAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFunctionTreeAdminQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof functionTreeAdmin>>> = ({ signal }) => functionTreeAdmin(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof functionTreeAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÁªèÈîÄÂïÜÈªòËÆ§ËßíËâ≤-ÂäüËÉΩÊùÉÈôêÊ†ë
 * @summary ÁªèÈîÄÂïÜÈªòËÆ§ËßíËâ≤-ÂäüËÉΩÊùÉÈôêÊ†ë
 */
export const merchantfunctionTreeAdmin = (
    params?: MerchantfunctionTreeAdminParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultListSysRoleMenuDetailResponse>(
      {url: `/boss/sysRolePermiss/tree/merchantfunctionTree`, method: 'get',
        params, signal
    },
      );
    }
  

export const getMerchantfunctionTreeAdminQueryKey = (params?: MerchantfunctionTreeAdminParams,) => [`/boss/sysRolePermiss/tree/merchantfunctionTree`, ...(params ? [params]: [])];

    
export type MerchantfunctionTreeAdminQueryResult = NonNullable<Awaited<ReturnType<typeof merchantfunctionTreeAdmin>>>
export type MerchantfunctionTreeAdminQueryError = ErrorType<void>

export const useMerchantfunctionTreeAdmin = <TData = Awaited<ReturnType<typeof merchantfunctionTreeAdmin>>, TError = ErrorType<void>>(
 params?: MerchantfunctionTreeAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof merchantfunctionTreeAdmin>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMerchantfunctionTreeAdminQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof merchantfunctionTreeAdmin>>> = ({ signal }) => merchantfunctionTreeAdmin(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof merchantfunctionTreeAdmin>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ÊùÉÈôê‰øùÂ≠ò
 * @summary ÊùÉÈôê‰øùÂ≠ò
 */
export const roleTreeSaveAdmin = (
    sysRolePermissTreeEditRequest: SysRolePermissTreeEditRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/sysRolePermiss/tree/save`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sysRolePermissTreeEditRequest
    },
      );
    }
  


    export type RoleTreeSaveAdminMutationResult = NonNullable<Awaited<ReturnType<typeof roleTreeSaveAdmin>>>
    export type RoleTreeSaveAdminMutationBody = SysRolePermissTreeEditRequest
    export type RoleTreeSaveAdminMutationError = ErrorType<void>

    export const useRoleTreeSaveAdmin = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof roleTreeSaveAdmin>>, TError,{data: SysRolePermissTreeEditRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof roleTreeSaveAdmin>>, {data: SysRolePermissTreeEditRequest}> = (props) => {
          const {data} = props ?? {};

          return  roleTreeSaveAdmin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof roleTreeSaveAdmin>>, TError, {data: SysRolePermissTreeEditRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®Êï∞ÊçÆ‰øùÂ≠ò
 * @summary ‰∏ªÂ≠êË°®Êï∞ÊçÆ‰øùÂ≠ò
 */
export const addTempMaster = (
    templateDataSaveRequest: TemplateDataSaveRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/masterTable/add`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: templateDataSaveRequest
    },
      );
    }
  


    export type AddTempMasterMutationResult = NonNullable<Awaited<ReturnType<typeof addTempMaster>>>
    export type AddTempMasterMutationBody = TemplateDataSaveRequest
    export type AddTempMasterMutationError = ErrorType<void>

    export const useAddTempMaster = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addTempMaster>>, TError,{data: TemplateDataSaveRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addTempMaster>>, {data: TemplateDataSaveRequest}> = (props) => {
          const {data} = props ?? {};

          return  addTempMaster(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addTempMaster>>, TError, {data: TemplateDataSaveRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®Êï∞ÊçÆ‰øùÂ≠ò
 * @summary ‰∏ªÂ≠êË°®Êï∞ÊçÆ‰øùÂ≠ò
 */
export const addAllTempMaster = (
    templateDataSaveRequest: TemplateDataSaveRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/masterTable/addAll`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: templateDataSaveRequest
    },
      );
    }
  


    export type AddAllTempMasterMutationResult = NonNullable<Awaited<ReturnType<typeof addAllTempMaster>>>
    export type AddAllTempMasterMutationBody = TemplateDataSaveRequest
    export type AddAllTempMasterMutationError = ErrorType<void>

    export const useAddAllTempMaster = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addAllTempMaster>>, TError,{data: TemplateDataSaveRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addAllTempMaster>>, {data: TemplateDataSaveRequest}> = (props) => {
          const {data} = props ?? {};

          return  addAllTempMaster(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof addAllTempMaster>>, TError, {data: TemplateDataSaveRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®Êï∞ÊçÆÂà†Èô§
 * @summary ‰∏ªÂ≠êË°®Êï∞ÊçÆÂà†Èô§
 */
export const _delete = (
    baseIdsRequest: BaseIdsRequest,
 ) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/masterTable/delete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: baseIdsRequest
    },
      );
    }
  


    export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof _delete>>>
    export type _DeleteMutationBody = BaseIdsRequest
    export type _DeleteMutationError = ErrorType<void>

    export const useDelete = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{data: BaseIdsRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof _delete>>, {data: BaseIdsRequest}> = (props) => {
          const {data} = props ?? {};

          return  _delete(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof _delete>>, TError, {data: BaseIdsRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®Ê®°Êùø ÂØºÂá∫ÂäüËÉΩ
 * @summary ‰∏ªÂ≠êË°®Ê®°Êùø ÂØºÂá∫ÂäüËÉΩ
 */
export const export2 = (
    params: Export2Params,
 signal?: AbortSignal
) => {
      return customInstance<ResultString>(
      {url: `/boss/masterTable/export`, method: 'get',
        params, signal
    },
      );
    }
  

export const getExport2QueryKey = (params: Export2Params,) => [`/boss/masterTable/export`, ...(params ? [params]: [])];

    
export type Export2QueryResult = NonNullable<Awaited<ReturnType<typeof export2>>>
export type Export2QueryError = ErrorType<void>

export const useExport2 = <TData = Awaited<ReturnType<typeof export2>>, TError = ErrorType<void>>(
 params: Export2Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof export2>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExport2QueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof export2>>> = ({ signal }) => export2(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof export2>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰∏ªÂ≠êË°®-ÊòéÁªÜË°® ÂØºÂÖ•ÂäüËÉΩÊåâÈíÆ
 * @summary ‰∏ªÂ≠êË°®-ÊòéÁªÜË°® ÂØºÂÖ•ÂäüËÉΩÊåâÈíÆ
 */
export const importData = (
    importDataBody: Blob,
    params: ImportDataParams,
 ) => {
      return customInstance<ResultListTemplateSonTableResponse>(
      {url: `/boss/masterTable/importData`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: importDataBody,
        params
    },
      );
    }
  


    export type ImportDataMutationResult = NonNullable<Awaited<ReturnType<typeof importData>>>
    export type ImportDataMutationBody = Blob
    export type ImportDataMutationError = ErrorType<void>

    export const useImportData = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importData>>, TError,{data: Blob;params: ImportDataParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importData>>, {data: Blob;params: ImportDataParams}> = (props) => {
          const {data,params} = props ?? {};

          return  importData(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof importData>>, TError, {data: Blob;params: ImportDataParams}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°®-ÊòéÁªÜË°® ÂØºÂÖ•Ê®°Êùø‰∏ãËΩΩ
 * @summary ‰∏ªÂ≠êË°®-ÊòéÁªÜË°® ÂØºÂÖ•Ê®°Êùø‰∏ãËΩΩ
 */
export const importTemplateUpload = (
    params: ImportTemplateUploadParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultBoolean>(
      {url: `/boss/masterTable/importTemplateUpload`, method: 'get',
        params, signal
    },
      );
    }
  

export const getImportTemplateUploadQueryKey = (params: ImportTemplateUploadParams,) => [`/boss/masterTable/importTemplateUpload`, ...(params ? [params]: [])];

    
export type ImportTemplateUploadQueryResult = NonNullable<Awaited<ReturnType<typeof importTemplateUpload>>>
export type ImportTemplateUploadQueryError = ErrorType<void>

export const useImportTemplateUpload = <TData = Awaited<ReturnType<typeof importTemplateUpload>>, TError = ErrorType<void>>(
 params: ImportTemplateUploadParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof importTemplateUpload>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getImportTemplateUploadQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof importTemplateUpload>>> = ({ signal }) => importTemplateUpload(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof importTemplateUpload>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰∏ªÂ≠êË°® Ê®°ÊùøÊâìÂç∞
 * @summary ‰∏ªÂ≠êË°® Ê®°ÊùøÊâìÂç∞
 */
export const print = (
    params: PrintParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultObject>(
      {url: `/boss/masterTable/print`, method: 'get',
        params, signal
    },
      );
    }
  

export const getPrintQueryKey = (params: PrintParams,) => [`/boss/masterTable/print`, ...(params ? [params]: [])];

    
export type PrintQueryResult = NonNullable<Awaited<ReturnType<typeof print>>>
export type PrintQueryError = ErrorType<void>

export const usePrint = <TData = Awaited<ReturnType<typeof print>>, TError = ErrorType<void>>(
 params: PrintParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof print>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPrintQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof print>>> = ({ signal }) => print(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof print>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * ‰∏ªÂ≠êË°® Êü•ËØ¢
 * @summary ‰∏ªÂ≠êË°® Êü•ËØ¢
 */
export const queryoperation = (
    templateMasterTableQueryRequest: TemplateMasterTableQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultTemplateMasterTableResponse>(
      {url: `/boss/masterTable/query`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: templateMasterTableQueryRequest
    },
      );
    }
  


    export type QueryoperationMutationResult = NonNullable<Awaited<ReturnType<typeof queryoperation>>>
    export type QueryoperationMutationBody = TemplateMasterTableQueryRequest
    export type QueryoperationMutationError = ErrorType<void>

    export const useQueryoperation = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryoperation>>, TError,{data: TemplateMasterTableQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryoperation>>, {data: TemplateMasterTableQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  queryoperation(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryoperation>>, TError, {data: TemplateMasterTableQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * ‰∏ªÂ≠êË°® ËØ¶ÊÉÖÊü•ËØ¢
 * @summary ‰∏ªÂ≠êË°® ËØ¶ÊÉÖÊü•ËØ¢
 */
export const printTempSon = (
    params: PrintTempSonParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultTemplatePrintResponse>(
      {url: `/boss/sonTable/print`, method: 'get',
        params, signal
    },
      );
    }
  

export const getPrintTempSonQueryKey = (params: PrintTempSonParams,) => [`/boss/sonTable/print`, ...(params ? [params]: [])];

    
export type PrintTempSonQueryResult = NonNullable<Awaited<ReturnType<typeof printTempSon>>>
export type PrintTempSonQueryError = ErrorType<void>

export const usePrintTempSon = <TData = Awaited<ReturnType<typeof printTempSon>>, TError = ErrorType<void>>(
 params: PrintTempSonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof printTempSon>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPrintTempSonQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof printTempSon>>> = ({ signal }) => printTempSon(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof printTempSon>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ê†πÊçÆ‰∏ªË°®Êü•ËØ¢ËØ¶ÊÉÖ
 * @summary Ê†πÊçÆ‰∏ªË°®Êü•ËØ¢ËØ¶ÊÉÖ
 */
export const queryDetailTempSon = (
    params: QueryDetailTempSonParams,
 signal?: AbortSignal
) => {
      return customInstance<ResultTemplateSonTableResponse>(
      {url: `/boss/sonTable/queryDetail`, method: 'get',
        params, signal
    },
      );
    }
  

export const getQueryDetailTempSonQueryKey = (params: QueryDetailTempSonParams,) => [`/boss/sonTable/queryDetail`, ...(params ? [params]: [])];

    
export type QueryDetailTempSonQueryResult = NonNullable<Awaited<ReturnType<typeof queryDetailTempSon>>>
export type QueryDetailTempSonQueryError = ErrorType<void>

export const useQueryDetailTempSon = <TData = Awaited<ReturnType<typeof queryDetailTempSon>>, TError = ErrorType<void>>(
 params: QueryDetailTempSonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof queryDetailTempSon>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQueryDetailTempSonQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof queryDetailTempSon>>> = ({ signal }) => queryDetailTempSon(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof queryDetailTempSon>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary Âà†Èô§
 */
export const deleteByIds2 = (
    cmsTreeDeleteReq: CmsTreeDeleteReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/treeConfig/cmsTreeDeleteByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsTreeDeleteReq
    },
      );
    }
  


    export type DeleteByIds2MutationResult = NonNullable<Awaited<ReturnType<typeof deleteByIds2>>>
    export type DeleteByIds2MutationBody = CmsTreeDeleteReq
    export type DeleteByIds2MutationError = ErrorType<void>

    export const useDeleteByIds2 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteByIds2>>, TError,{data: CmsTreeDeleteReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteByIds2>>, {data: CmsTreeDeleteReq}> = (props) => {
          const {data} = props ?? {};

          return  deleteByIds2(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteByIds2>>, TError, {data: CmsTreeDeleteReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Âçï‰ΩìÊü•Áúã
 */
export const getById2 = (
    cmsContentInfoReq: CmsContentInfoReq,
 signal?: AbortSignal
) => {
      return customInstance<ResultCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeGetById`, method: 'get',
      headers: {'Content-Type': 'application/json', }, signal
    },
      );
    }
  

export const getGetById2QueryKey = (cmsContentInfoReq: CmsContentInfoReq,) => [`/boss/platform/treeConfig/cmsTreeGetById`, cmsContentInfoReq];

    
export type GetById2QueryResult = NonNullable<Awaited<ReturnType<typeof getById2>>>
export type GetById2QueryError = ErrorType<void>

export const useGetById2 = <TData = Awaited<ReturnType<typeof getById2>>, TError = ErrorType<void>>(
 cmsContentInfoReq: CmsContentInfoReq, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetById2QueryKey(cmsContentInfoReq);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById2>>> = ({ signal }) => getById2(cmsContentInfoReq, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getById2>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary CMS-ÂÖ¨ÂëäÂàÜÁ±ª‰∏ãÊãâÊ°Ü
 */
export const queryNoticeClassify = (
    cmsCommonNoticeClassifyReq: CmsCommonNoticeClassifyReq,
 ) => {
      return customInstance<ResultListCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeQueryNoticeClassify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsCommonNoticeClassifyReq
    },
      );
    }
  


    export type QueryNoticeClassifyMutationResult = NonNullable<Awaited<ReturnType<typeof queryNoticeClassify>>>
    export type QueryNoticeClassifyMutationBody = CmsCommonNoticeClassifyReq
    export type QueryNoticeClassifyMutationError = ErrorType<void>

    export const useQueryNoticeClassify = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryNoticeClassify>>, TError,{data: CmsCommonNoticeClassifyReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryNoticeClassify>>, {data: CmsCommonNoticeClassifyReq}> = (props) => {
          const {data} = props ?? {};

          return  queryNoticeClassify(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryNoticeClassify>>, TError, {data: CmsCommonNoticeClassifyReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary CMS-Â∏∏ËßÅÈóÆÈ¢òÂàÜÁ±ª‰∏ãÊãâÊ°Ü
 */
export const queryProblemClassify = (
    cmsCommonProblemClassifyReq: CmsCommonProblemClassifyReq,
 ) => {
      return customInstance<ResultListCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeQueryProblemClassify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsCommonProblemClassifyReq
    },
      );
    }
  


    export type QueryProblemClassifyMutationResult = NonNullable<Awaited<ReturnType<typeof queryProblemClassify>>>
    export type QueryProblemClassifyMutationBody = CmsCommonProblemClassifyReq
    export type QueryProblemClassifyMutationError = ErrorType<void>

    export const useQueryProblemClassify = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof queryProblemClassify>>, TError,{data: CmsCommonProblemClassifyReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof queryProblemClassify>>, {data: CmsCommonProblemClassifyReq}> = (props) => {
          const {data} = props ?? {};

          return  queryProblemClassify(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof queryProblemClassify>>, TError, {data: CmsCommonProblemClassifyReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary CMSÊ†ë Êü•ËØ¢
 */
export const loadTree = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultListCMSTreeÈÖçÁΩÆÊãìÂ±ïÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeQueryTree`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type LoadTreeMutationResult = NonNullable<Awaited<ReturnType<typeof loadTree>>>
    export type LoadTreeMutationBody = CmsContentInfoReq
    export type LoadTreeMutationError = ErrorType<void>

    export const useLoadTree = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loadTree>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loadTree>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  loadTree(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof loadTree>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êñ∞Â¢û‰øùÂ≠ò
 */
export const save2 = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeSave`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type Save2MutationResult = NonNullable<Awaited<ReturnType<typeof save2>>>
    export type Save2MutationBody = CmsContentInfoReq
    export type Save2MutationError = ErrorType<void>

    export const useSave2 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof save2>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof save2>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  save2(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof save2>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ‰∏äÁßª‰∏ãÁßª
 */
export const cmsContentUpOrDownByIds1 = (
    cmsMoveUpAndDownReq: CmsMoveUpAndDownReq,
 ) => {
      return customInstance<Result>(
      {url: `/boss/platform/treeConfig/cmsTreeUpOrDownByIds`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsMoveUpAndDownReq
    },
      );
    }
  


    export type CmsContentUpOrDownByIds1MutationResult = NonNullable<Awaited<ReturnType<typeof cmsContentUpOrDownByIds1>>>
    export type CmsContentUpOrDownByIds1MutationBody = CmsMoveUpAndDownReq
    export type CmsContentUpOrDownByIds1MutationError = ErrorType<void>

    export const useCmsContentUpOrDownByIds1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cmsContentUpOrDownByIds1>>, TError,{data: CmsMoveUpAndDownReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cmsContentUpOrDownByIds1>>, {data: CmsMoveUpAndDownReq}> = (props) => {
          const {data} = props ?? {};

          return  cmsContentUpOrDownByIds1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof cmsContentUpOrDownByIds1>>, TError, {data: CmsMoveUpAndDownReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary Êõ¥Êñ∞‰øùÂ≠ò
 */
export const updateById1 = (
    cmsContentInfoReq: CmsContentInfoReq,
 ) => {
      return customInstance<ResultCMSTreeÈÖçÁΩÆÂÆû‰Ωì>(
      {url: `/boss/platform/treeConfig/cmsTreeUpdateById`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cmsContentInfoReq
    },
      );
    }
  


    export type UpdateById1MutationResult = NonNullable<Awaited<ReturnType<typeof updateById1>>>
    export type UpdateById1MutationBody = CmsContentInfoReq
    export type UpdateById1MutationError = ErrorType<void>

    export const useUpdateById1 = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateById1>>, TError,{data: CmsContentInfoReq}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateById1>>, {data: CmsContentInfoReq}> = (props) => {
          const {data} = props ?? {};

          return  updateById1(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateById1>>, TError, {data: CmsContentInfoReq}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÊåÇË¥¶ÂçïÊü•ËØ¢-ËØ¶ÊÉÖÊü•ËØ¢
 */
export const unpaidBillInfo = (
    unpaidBillInfoRequest: UnpaidBillInfoRequest,
 ) => {
      return customInstance<ResultUnpaidBills>(
      {url: `/boss/payment/unpaidBills/unpaidBillInfo`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: unpaidBillInfoRequest
    },
      );
    }
  


    export type UnpaidBillInfoMutationResult = NonNullable<Awaited<ReturnType<typeof unpaidBillInfo>>>
    export type UnpaidBillInfoMutationBody = UnpaidBillInfoRequest
    export type UnpaidBillInfoMutationError = ErrorType<void>

    export const useUnpaidBillInfo = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unpaidBillInfo>>, TError,{data: UnpaidBillInfoRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unpaidBillInfo>>, {data: UnpaidBillInfoRequest}> = (props) => {
          const {data} = props ?? {};

          return  unpaidBillInfo(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof unpaidBillInfo>>, TError, {data: UnpaidBillInfoRequest}, TContext>(mutationFn, mutationOptions);
    }
    
/**
 * @summary ÊåÇË¥¶ÂçïÊü•ËØ¢-ÂàÜÈ°µÊü•ËØ¢
 */
export const unpaidBillPageQuery = (
    unpaidBillPageQueryRequest: UnpaidBillPageQueryRequest,
 ) => {
      return customInstance<ResultIwubidaPageResultUnpaidBills>(
      {url: `/boss/payment/unpaidBills/unpaidBillPageQuery`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: unpaidBillPageQueryRequest
    },
      );
    }
  


    export type UnpaidBillPageQueryMutationResult = NonNullable<Awaited<ReturnType<typeof unpaidBillPageQuery>>>
    export type UnpaidBillPageQueryMutationBody = UnpaidBillPageQueryRequest
    export type UnpaidBillPageQueryMutationError = ErrorType<void>

    export const useUnpaidBillPageQuery = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unpaidBillPageQuery>>, TError,{data: UnpaidBillPageQueryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unpaidBillPageQuery>>, {data: UnpaidBillPageQueryRequest}> = (props) => {
          const {data} = props ?? {};

          return  unpaidBillPageQuery(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof unpaidBillPageQuery>>, TError, {data: UnpaidBillPageQueryRequest}, TContext>(mutationFn, mutationOptions);
    }
    
